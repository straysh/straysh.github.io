<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kafka原理及监控指标</title>
      <link href="/2022/11/28/kafka%E5%8E%9F%E7%90%86%E5%8F%8A%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/"/>
      <url>/2022/11/28/kafka%E5%8E%9F%E7%90%86%E5%8F%8A%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>文章来源：<a href="https://www.percona.com/blog/2017/04/10/innodb-page-merging-and-page-splitting/">InnoDB Page Merging and Page Splitting</a></p><h1 id="Kafka是什么？"><a href="#Kafka是什么？" class="headerlink" title="Kafka是什么？"></a>Kafka是什么？</h1><p>Kafka是分布式、高吞吐、可扩展的实时数据流平台。</p><p>Kafka广泛使用于日志收集、监控数据聚合、流式数据处理、在线和离线分析等大数据领域，已成为大数据生态中不可或缺的部分。<br><img src="/images/kafka/kafka%E7%94%9F%E6%80%8101.png"></p><p>Producer：通过push模式向Kafka Broker发送消息。发送的消息可以是网站的页面访问、服务器日志，也可以是CPU和内存相关的系统资源信息。</p><p>Kafka Broker：用于存储消息的服务。Kafka Broker支持水平扩展。Kafka Broker节点的数量越多，集群的吞吐率(?)越高。</p><p>Group：通过pull模式从Kafka Broker订阅并消费消息。</p><p>Zookeeper：管理集群的配置、选举领导（Leader）分区，并且在Group发生变化时，进行负载均衡。</p><h1 id="Kafka的特点"><a href="#Kafka的特点" class="headerlink" title="Kafka的特点"></a>Kafka的特点</h1><h2 id="1-优势"><a href="#1-优势" class="headerlink" title="1. 优势"></a>1. 优势</h2><ol><li>通信模式：支持队列和发布/订阅两种通信模式。(?)</li><li>高吞吐量、低延迟：在叫廉价的硬件上，Kafka也能做到每秒处理几十万条消息，延迟最低只有几毫秒。</li><li>持久性：Kafka可以将消息持久化到普通磁盘。</li><li>可扩展性：Kafka集群支持热扩展，可以动态向集群添加新节点。</li><li>容错性：允许集群中节点失败（若副本数量为n，则允许n-1个节点失败）。</li></ol><h2 id="2-需要注意的问题"><a href="#2-需要注意的问题" class="headerlink" title="2. 需要注意的问题"></a>2. 需要注意的问题</h2><ol><li><code>Topic/Partition</code>过多，导致性能急速下降：Kafka <code>Topic/Partition</code>过多（如，对于普通磁盘，单机超过500个Topic/Partition），会导致存储碎片化，负载会发生明显彪高现象，Topic/Partition越多，则负载越高，发送消息响应时间越长。</li><li>消息丢失：以下2种使用不当的场景，可能导致消息丢失，应根据业务场景避免。<ul><li>生产消息：如果ack!=all或消息副本数不大于1，则Kafka Broker机器越长宕机时，可能导致消息丢失。</li><li>消费消息：消费端在未完全处理完消息时即提交offset，则在消费端异常时，可能导致部分消息丢失。</li></ul></li><li>重复消费：生产者可能由于某种原因（如网络抖动或Kafka Broker宕机）没有接收到Kafka Broker的成功确认，然后重复发送消息，最终导致消费者接收到多个相同的业务消息。次场景需要消费者支持消息幂等性来解决。</li><li>消息乱序：Kafka只能保证同一分区内的消息有序，不同分区之间的消息不能保证有序。</li><li>不支持事务。</li></ol><h1 id="Kafka经典使用场景"><a href="#Kafka经典使用场景" class="headerlink" title="Kafka经典使用场景"></a>Kafka经典使用场景</h1><ul><li>大数据领域：网站行为分析、日志聚合、应用监控、流式数据处理、在线和离线数据分析等。</li><li>数据集成：将消息导入MaxCompute、OSS、RDS、Hadoop、HBase等离线数据仓库。</li><li>流式计算：与StreamCompute、E-MapReduce、Spark、Storm等流式计算引擎集成。</li></ul><h1 id="Kafka核心概念"><a href="#Kafka核心概念" class="headerlink" title="Kafka核心概念"></a>Kafka核心概念</h1><p><img src="/images/kafka/kafka%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B501.png"></p><ul><li>Broker：一个 Kafka 服务端节点。</li><li>集群（Cluster）：由多个 Broker 组成的集合。</li><li>消息（Message）：也叫 Record，Kafka 中信息传递的载体。消息可以是网站的页面访问、服务器的日志，也可以是和 CPU、内存相关的系统资源信息，但对于消息队列 Kafka 版，消息就是一个字节数组。</li><li>Producer：向 Kafka 发送消息的应用。</li><li>Consumer：从 Kafka 接收消息的应用。<br>消费者组（Consumer Group）：一组具有相同 Group ID 的 Consumer。当一个 Topic 被同一个 Group 的多个 Consumer 消费时，每一条消息都只会被投递到一个 Consumer，实现消费的负载均衡。通过 Group，您可以确保一个 Topic 的消息被并行消费，提高 Kafka 的吞吐量。</li><li>主题（Topic）：消息的主题，用于分类消息。在每个 Broker 上都可以创建多个 Topic。</li><li>副本（Replica）：每一个分区都有多个副本。当主分区（Leader）故障的时候会选择一个备分区（Follower）上位，成为 Leader。在 Kafka 中默认副本的最大数量是 10 个，且副本的数量不能大于 Broker 的数量，Follower 和 Leader 是在不同的机器，同一机器对同一个分区也只可能存放一个副本。</li><li>分区（Partition）：一个有序不变的消息序列，用于存储消息。一个 Topic 由一个或多个分区组成，每个分区中的消息存储于一个或多个 Broker 上。在一个分区中消息的顺序就是 Producer 发送消息的顺序。</li><li>位点（Offset）：分区中每条消息的位置信息，是一个单调递增且不变的值。</li><li>消费位点：分区被当前 Consumer 消费了的消息的最大位点。</li><li>堆积量：当前分区下的消息堆积总量，即最大位点减去消费位点的值。堆积量是一个关键指标，如果发现堆积量较大，则 Consumer 可能产生了阻塞，或者消费速度跟不上生产速度。此时需要分析 Consumer 的运行状况，尽力提升消费速度。可以清除所有堆积消息，从最大位点开始消费，或按时间点进行位点重置。</li><li>重平衡（Rebalance）：消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。Rebalance 是 Kafka 消费者端实现高可用的重要手段。</li><li>Zookeeper：Kafka 集群依赖 Zookeeper 来保存集群的的元信息，以保证系统的可用性。</li></ul><h1 id="Kafka监控指标参考"><a href="#Kafka监控指标参考" class="headerlink" title="Kafka监控指标参考"></a>Kafka监控指标参考</h1><p>结合 Kafka 的体系架构和使用场景，我们从 Metrics 采集、监控大盘、告警指标等3方面定义了 Kafka Metric 监控的参考模型。</p><h2 id="Metrics-采集"><a href="#Metrics-采集" class="headerlink" title="Metrics 采集"></a>Metrics 采集</h2><h3 id="1-Producer指标"><a href="#1-Producer指标" class="headerlink" title="1. Producer指标"></a>1. Producer指标</h3><p><img src="/images/kafka/metric_producer.png"></p><h3 id="2-Broder指标"><a href="#2-Broder指标" class="headerlink" title="2. Broder指标"></a>2. Broder指标</h3><p><img src="/images/kafka/metric_broker01.png"></p><p><img src="/images/kafka/metric_broker02.png"></p><p><img src="/images/kafka/metric_broker03.png"></p><h3 id="3-Consumer指标"><a href="#3-Consumer指标" class="headerlink" title="3. Consumer指标"></a>3. Consumer指标</h3><p><img src="/images/kafka/metric_consumer01.png"></p><h3 id="4-Zookeeper指标"><a href="#4-Zookeeper指标" class="headerlink" title="4. Zookeeper指标"></a>4. Zookeeper指标</h3><p><img src="/images/kafka/metric_zookeeper01.png"></p><h2 id="Kafka监控大盘"><a href="#Kafka监控大盘" class="headerlink" title="Kafka监控大盘"></a>Kafka监控大盘</h2><h3 id="1-Producer"><a href="#1-Producer" class="headerlink" title="1. Producer"></a>1. Producer</h3><ul><li>topic 消息生产量随时间的变化：便于我们快速确定流量来源，并为基础设施的变更配置提供依据。</li><li>请求/响应速率随时间的变化：密切关注峰值和下降对于确保连续服务可用性至关重要。</li><li>请求平均延迟随时间的变化：由于延迟与吞吐量有很强的相关性，观察此变化，有助于我们判断是否需要修改 batch.size 参数。</li><li>IO 等待随时间的变化：如果我们发现等待时间过长，就意味着生产者无法足够快地获取所需的数据。</li></ul><h3 id="2-Broker"><a href="#2-Broker" class="headerlink" title="2. Broker"></a>2. Broker</h3><ul><li>存在失效副本的分区数量的变化：如果此指标突增，则很可能某个 Broker 发生了异常。</li><li>ISR 数量变化：除 Broker 或 Partition 数量变化会触发 ISR 数量变化外，其它情况下的当前指标变化都需要我们注意。</li><li>有效 Broker 数量变化。</li><li>有效 Controller 数量变化。</li><li>离线分区数的变化：此指标大于 0，则意味着这些数量的分区不可用，该分区的消费者和生产者都将被阻塞。</li><li>Leader 选举速率和耗时的变化：发生选举，则意味着某个 Leader 的丢失；耗时过长，则会导致此期间消息无法接收生产者消息和消费者的请求。</li><li>请求耗时：通常该值应相当稳定，波动很小。</li><li>网络流量：提供潜在瓶颈所在位置的信息，为我们判断是否启用消息的端到端压缩提供依据。</li><li>生产/拉取 purgatory 消息数量：通过观察 purgatory 中消息数量，有助于我们确定消息生产或拉取耗时长的原因。</li></ul><h3 id="3-Broker-JVM"><a href="#3-Broker-JVM" class="headerlink" title="3. Broker JVM"></a>3. Broker JVM</h3><p>Full GC 频率和耗时：GC 频率高或耗时长，都对 Broker 性能有重大影响。据此，我们可以判断是否需要对内存进行扩容。</p><h4 id="4-Consumer"><a href="#4-Consumer" class="headerlink" title="4. Consumer"></a>4. Consumer</h4><ul><li>group 消费延迟数量的变化：该指标越大，则消息堆积越多。</li><li>消费流量的变化：显示消费消息的网络流量/消息流量大小变化。</li><li>拉取数据速率的变化：消费者是否健康的重要指标。</li></ul><h4 id="5-Zookeeper"><a href="#5-Zookeeper" class="headerlink" title="5. Zookeeper"></a>5. Zookeeper</h4><ul><li>待处理的请求数的变化。</li><li>平均请求响应耗时的变化：如果耗时突增，则可能导致整个 Kafka 集群的协调机制受阻。</li><li>客户端连接数的变化：连接数的突变，通常伴随着 Broker 的加入、退出或丢失。</li><li>打开的文件句柄数和剩余数的变化：如果剩余数不足，则可能导致 Broker 无法连接到 Zookeeper。</li><li>同步请求 pending 数量的变化。</li></ul><h2 id="Kafka-告警规则"><a href="#Kafka-告警规则" class="headerlink" title="Kafka 告警规则"></a>Kafka 告警规则</h2><h3 id="1-Producer-1"><a href="#1-Producer-1" class="headerlink" title="1. Producer"></a>1. Producer</h3><ul><li>发送失败消息数：当前发送失败的消息达到一定数量时告警。</li><li>发送重试消息数：当单位时间内发送重试的消息数量达到阀值时告警。</li><li>发送耗时长：发送耗时大于 x 毫秒。</li></ul><h3 id="2-Broker-1"><a href="#2-Broker-1" class="headerlink" title="2. Broker"></a>2. Broker</h3><ul><li>Controller 正常：有效 Controller 数量不为 1。</li><li>无离线分区：离线分区数大于 0。</li><li>无 UnClean Leader 选举：Unclean Leader 选举速率大于 0。</li><li>Broker 不可用：有效 Broker 数量减少。</li><li>ISR 收缩：Topic 分区的 ISR 数量小于 n。</li><li>分区不可用：Topic 分区处于 Under Replicated 状态。</li><li>Topic/分区容量：Topic/分区数量大于 n。</li><li>实例消息流入/出量：当前实例的流量超过或低于某个阀值时告警。</li><li>Topic 消息流入/出量：当前某个 Topic 的流量超过或低于指定阀值时告警。</li><li>磁盘容量：磁盘使用率大于 x%（参考值：85%）。</li><li>CPU 使用率：大于 80%。</li></ul><h3 id="3-Broker-JVM-1"><a href="#3-Broker-JVM-1" class="headerlink" title="3. Broker JVM"></a>3. Broker JVM</h3><p>FullGC 频率：对频繁的 FGC 告警。</p><h3 id="4-Consumer-1"><a href="#4-Consumer-1" class="headerlink" title="4. Consumer"></a>4. Consumer</h3><p>消息堆积：group 消费延迟数量大于 n（根据业务流量，适当配置 n 的大小）。</p><h3 id="5-Zookeeper-1"><a href="#5-Zookeeper-1" class="headerlink" title="5. Zookeeper"></a>5. Zookeeper</h3><p>同步请求pending数量大于n。</p><h1 id="Kafka典型问题场景及其排查-解决方法"><a href="#Kafka典型问题场景及其排查-解决方法" class="headerlink" title="Kafka典型问题场景及其排查/解决方法"></a>Kafka典型问题场景及其排查/解决方法</h1><h2 id="1-Topic消息发送慢，并发性能低"><a href="#1-Topic消息发送慢，并发性能低" class="headerlink" title="1. Topic消息发送慢，并发性能低"></a>1. Topic消息发送慢，并发性能低</h2><p>现象：某个或某几个Topic的消息并发性能低。在指标上直接体现为Producer的平均请求延迟大、平均生产吞吐量小。</p><p>问题原因：</p><ul><li>网络带宽不足，导致IO等待。</li><li>消息未压缩，导致网络流量超负荷。</li><li>消息未批量发送，或批量阈值配置不当，导致发送速率慢。</li><li>Topic分区数量不足，导致Broker接收消息积压。</li><li>Broker磁盘性能低，导致磁盘同步慢。</li><li>Broker分区数量过多，导致碎片化，度盘读写过载。</li></ul><p>排查/解决方法：</p><ul><li>确认 Producer 的“平均 I/O 等待时间”指标是否符合预期或有陡增？以便确认 Producer 到 Broker 之间的网络带宽是否满足业务流量要求？如果不满足，则需要硬件资源扩容。</li><li>确认 Producer 的“平均压缩率指标”，确保压缩率符合预期？如果压缩过低，则需要 Producer 端进行排查、修正。</li><li>确认 Producer 的“平均请求包大小”是否过小？如果是的话，则需要考虑加大 Producer 发送消息的 batchsize，同时调整 linger.ms 的阀值，以避免请求消息碎片化。</li><li>查看 Topic 分区数，分区数较小时，考虑增加分区数，以水平扩展 Broker 的并发接收消息容量。</li><li>确认 Broker 磁盘 IO 使用率是否在安全范围内？如果使用率已经较高，则考虑水平扩容 Broker 数量以分担磁盘压力，或升级磁盘为 SSD 以提升 IO 性能。</li><li>确认 Broker 的 CPU 使用率是否在安全范围内？如果使用率已经较高，则考虑垂直或水平扩容 Broker，同时考虑增加 Topic 分区数，以提升 Topic 并发接收消息能力。</li><li>查看集群的总分区数和单个 Broker 的分区数量，确保在规划的容量范围内。否则应考虑水平扩容 Broker 数量，以避免碎片化磁盘读写导致的性能下降。</li></ul><h2 id="2-Topic消息积压"><a href="#2-Topic消息积压" class="headerlink" title="2. Topic消息积压"></a>2. Topic消息积压</h2><p>现象：某个或某几个 Topic 的消息堆积持续增加。在指标上直接体现为 group 消费延迟数量持续增加。</p><p>问题原因：</p><ul><li>Producer生产消息流量增大。</li><li>Consumer由于业务变化导致消费延迟增加。</li><li>Consumer数量不足。</li><li>Consumer数量频繁变化导致Group不断在做重平衡（Rebalance）。</li><li>Broker未收到Consumer消费确认消息。</li></ul><p>解决方法：</p><ul><li>确认 Producer 的“消息生产量”指标是否有明显增加？如果有显示增加，则我们需要对应增加消费者数量。</li><li>确认 Consumer 的“消息消费流量”指标是否明显下降？如果有显示下降，则说明消费者的业务处理耗时增加，我们需要确认业务消耗，或增加消费者数量。</li><li>通过 Kafka Broker 提供的命令，确认 Topic 对应的 Consumer 数量与实际的 Consumer 数量是否一致？如果不一致，则说明某些 Consumer 未正确连接到 Broker，需要排查 Consumer 是否正常运行。</li><li>观察 Consumer 的数量是否频繁变化而触发反复再平衡（Rebalance），如果是，则我们需要排查确认各个 Consumer 是否正常运行。</li><li>由于网络或其它原因，可能导致 Consumer 与 Broker 之间的连接不稳定，Consumer 能持续消费消息，但 Broker 却始终认为消息未确认，导致消费位点不变。此时可能需要确认 Consumer 与 Broker 之间的网络稳定性、甚至重启 Consumer。</li></ul><h2 id="3-自建Prometheus监控Kafka的痛点"><a href="#3-自建Prometheus监控Kafka的痛点" class="headerlink" title="3. 自建Prometheus监控Kafka的痛点"></a>3. 自建Prometheus监控Kafka的痛点</h2><ul><li>由于安全、组织管理等因素，用户业务通常部署在多个相互隔离的 VPC，需要在多个 VPC 内都重复、独立部署 Prometheus，导致部署和运维成本高。</li><li>每套完整的自建观测系统都需要安装并配置 Prometheus、Grafana、AlertManager 等，过程复杂、实施周期长。</li><li>开源 Kafka JMX Agent 在某些场景下占用 CPU 高，对自建 Kafka 业务有一定干扰。</li><li>对于阿里云消息队列 Kafka 版（简称阿里云 Kafka），自建 Prometheus 无法监控到，导致无法实现一站式、全局视角的监控建设。</li><li>对于部署在 ECS 上的自建 Kafka，自建 Prometheus 缺少与阿里云 ECS 无缝集成的服务发现（ServiceDiscovery）机制，无法根据 ECS 标签来灵活定义抓取 targets。如果自行实现类似功能，则需要使用 GOlang 语言开发代码（调用阿里云 ECS POP 接口）、集成进开源 Prometheus 代码、编译打包后部署，实现门槛高、过程复杂、版本升级困难。</li><li>开源 Grafana Kafka 大盘不够专业，缺少结合 Kafka 原理/特征和最佳实践进行深入优化。</li><li>缺少 Kafka 告警指标模板，需要用户自行研究、配置告警规则，工作量大，且很可能缺少 Kafka 领域的专业技术沉淀。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
          <category> 笔记 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Translation </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Go操作文件</title>
      <link href="/2022/03/14/%E4%BD%BF%E7%94%A8Go%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/14/%E4%BD%BF%E7%94%A8Go%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一切皆文件"><a href="#一切皆文件" class="headerlink" title="一切皆文件"></a>一切皆文件</h1><p>UNIX世界的一个基石观点是一切皆文件。我们不需要知道文件描述符映射的，由操作系统的设备驱动抽象出来的是什么。操作系统以文件的形式向我们提供了访问设备的接口。</p><p>Go语言中的读/写接口也类似。我们仅仅简单的读/写字节，并不需要理解reader从何处及如何读数据，或者writer将数据写入到了何处。在<code>/dev</code>下能找到可用的设备。有些可能需要提权访问。<br><img src="/images/golang/go_files.png"></p><h1 id="1-基础文件操作"><a href="#1-基础文件操作" class="headerlink" title="1. 基础文件操作"></a>1. 基础文件操作</h1><h2 id="1-1-创建空文件"><a href="#1-1-创建空文件" class="headerlink" title="1.1 创建空文件"></a>1.1 创建空文件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>    newFile *os.File<br>    err     <span class="hljs-type">error</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    newFile, err = os.Create(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    log.Println(newFile)<br>    newFile.Close()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-截断文件（Truncate）"><a href="#1-2-截断文件（Truncate）" class="headerlink" title="1.2 截断文件（Truncate）"></a>1.2 截断文件（Truncate）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 截断文件至100字节。如果文件小于100字节，则原始内容保留在前并在其后补null字节。</span><br>    <span class="hljs-comment">// 如果文件大于100字节，超过100字节的不删将丢弃。</span><br>    <span class="hljs-comment">// 那么不论哪种情况，我们都将得到长度为100字节的内容。</span><br>    <span class="hljs-comment">// 第二个参数传0，则将清空整个文件。</span><br><br>    err := os.Truncate(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-获取文件信息"><a href="#1-3-获取文件信息" class="headerlink" title="1.3 获取文件信息"></a>1.3 获取文件信息</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>    fileInfo os.FileInfo<br>    err      <span class="hljs-type">error</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Stat returns file info. It will return</span><br>    <span class="hljs-comment">// an error if there is no file.</span><br>    fileInfo, err = os.Stat(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;File name:&quot;</span>, fileInfo.Name()) <span class="hljs-comment">// File name: test.txt</span><br>    fmt.Println(<span class="hljs-string">&quot;Size in bytes:&quot;</span>, fileInfo.Size()) <span class="hljs-comment">// Size in bytes: 12</span><br>    fmt.Println(<span class="hljs-string">&quot;Permissions:&quot;</span>, fileInfo.Mode()) <span class="hljs-comment">// Permissions: -rw-r--r--</span><br>    fmt.Println(<span class="hljs-string">&quot;Last modified:&quot;</span>, fileInfo.ModTime()) <span class="hljs-comment">// Last modified: 2022-03-14 20:42:22.440137408 +0800 CST</span><br>    fmt.Println(<span class="hljs-string">&quot;Is Directory: &quot;</span>, fileInfo.IsDir()) <span class="hljs-comment">// Is Directory:  false</span><br>    fmt.Printf(<span class="hljs-string">&quot;System interface type: %T\n&quot;</span>, fileInfo.Sys()) <span class="hljs-comment">// System interface type: *syscall.Stat_t</span><br>    fmt.Printf(<span class="hljs-string">&quot;System info: %+v\n\n&quot;</span>, fileInfo.Sys()) <span class="hljs-comment">// System info: &amp;&#123;Dev:66306 Ino:11021648 ......</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-4-重命名-移动文件"><a href="#1-4-重命名-移动文件" class="headerlink" title="1.4 重命名/移动文件"></a>1.4 重命名/移动文件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    originalPath := <span class="hljs-string">&quot;test.txt&quot;</span><br>    newPath := <span class="hljs-string">&quot;test2.txt&quot;</span><br>    err := os.Rename(originalPath, newPath)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-5-删除文件"><a href="#1-5-删除文件" class="headerlink" title="1.5 删除文件"></a>1.5 删除文件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    err := os.Remove(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-6-打开-关闭文件"><a href="#1-6-打开-关闭文件" class="headerlink" title="## 1.6 打开/关闭文件"></a>## 1.6 打开/关闭文件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Simple read only open. We will cover actually reading</span><br>    <span class="hljs-comment">// and writing to files in examples further down the page</span><br>    file, err := os.Open(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    file.Close()<br><br>    <span class="hljs-comment">// OpenFile with more options. Last param is the permission mode</span><br>    <span class="hljs-comment">// Second param is the attributes when opening</span><br>    file, err = os.OpenFile(<span class="hljs-string">&quot;test.txt&quot;</span>, os.O_APPEND, <span class="hljs-number">0666</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    file.Close()<br><br>    <span class="hljs-comment">// Use these attributes individually or combined</span><br>    <span class="hljs-comment">// with an OR for second arg of OpenFile()</span><br>    <span class="hljs-comment">// e.g. os.O_CREATE|os.O_APPEND</span><br>    <span class="hljs-comment">// or os.O_CREATE|os.O_TRUNC|os.O_WRONLY</span><br><br>    <span class="hljs-comment">// os.O_RDONLY // Read only</span><br>    <span class="hljs-comment">// os.O_WRONLY // Write only</span><br>    <span class="hljs-comment">// os.O_RDWR // Read and write</span><br>    <span class="hljs-comment">// os.O_APPEND // Append to end of file</span><br>    <span class="hljs-comment">// os.O_CREATE // Create is none exist</span><br>    <span class="hljs-comment">// os.O_TRUNC // Truncate file when opening</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-7-检查文件是否存在"><a href="#1-7-检查文件是否存在" class="headerlink" title="1.7 检查文件是否存在"></a>1.7 检查文件是否存在</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>    fileInfo *os.FileInfo<br>    err      <span class="hljs-type">error</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Stat returns file info. It will return</span><br>    <span class="hljs-comment">// an error if there is no file.</span><br>    fileInfo, err := os.Stat(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">if</span> os.IsNotExist(err) &#123;<br>            log.Fatal(<span class="hljs-string">&quot;File does not exist.&quot;</span>)<br>        &#125;<br>    &#125;<br>    log.Printf(<span class="hljs-string">&quot;File does exist. File information:\n%s&quot;</span>, fileInfo)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-8-检查读-写权限"><a href="#1-8-检查读-写权限" class="headerlink" title="1.8 检查读/写权限"></a>1.8 检查读/写权限</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Test write permissions. It is possible the file</span><br>    <span class="hljs-comment">// does not exist and that will return a different</span><br>    <span class="hljs-comment">// error that can be checked with os.IsNotExist(err)</span><br>    file, err := os.OpenFile(<span class="hljs-string">&quot;test.txt&quot;</span>, os.O_WRONLY, <span class="hljs-number">0666</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">if</span> os.IsPermission(err) &#123;<br>            log.Println(<span class="hljs-string">&quot;Error: Write permission denied.&quot;</span>)<br>        &#125;<br>    &#125;<br>    file.Close()<br><br>    <span class="hljs-comment">// Test read permissions</span><br>    file, err = os.OpenFile(<span class="hljs-string">&quot;test.txt&quot;</span>, os.O_RDONLY, <span class="hljs-number">0666</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">if</span> os.IsPermission(err) &#123;<br>            log.Println(<span class="hljs-string">&quot;Error: Read permission denied.&quot;</span>)<br>        &#125;<br>    &#125;<br>    file.Close()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-9-修改权限-拥有者-时间戳"><a href="#1-9-修改权限-拥有者-时间戳" class="headerlink" title="1.9 修改权限/拥有者/时间戳"></a>1.9 修改权限/拥有者/时间戳</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Change perrmissions using Linux style</span><br>    err := os.Chmod(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-number">0777</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Println(err)<br>    &#125;<br><br>    <span class="hljs-comment">// Change ownership</span><br>    err = os.Chown(<span class="hljs-string">&quot;test.txt&quot;</span>, os.Getuid(), os.Getgid())<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Println(err)<br>    &#125;<br><br>    <span class="hljs-comment">// Change timestamps</span><br>    twoDaysFromNow := time.Now().Add(<span class="hljs-number">48</span> * time.Hour)<br>    lastAccessTime := twoDaysFromNow<br>    lastModifyTime := twoDaysFromNow<br>    err = os.Chtimes(<span class="hljs-string">&quot;test.txt&quot;</span>, lastAccessTime, lastModifyTime)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Println(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-10-创建硬链接-软链接"><a href="#1-10-创建硬链接-软链接" class="headerlink" title="1.10 创建硬链接/软链接"></a>1.10 创建硬链接/软链接</h2><p>典型的文件就是一个指向硬盘某个位置的指针，我们称之为<code>inode</code>。硬链接会创建一个新的指针，指向相同的位置。只有当所有链接都删除时，文件才会真的被从硬盘上物理删除。硬链接只能在相同的文件系统中创建。<br>符号链接或软链接，稍有不同，它并不直接指向磁盘上的位置。软链接仅仅通过文件名引用其他文件。它可以指向不同的文件系统上的文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Create a hard link</span><br>    <span class="hljs-comment">// You will have two file names that point to the same contents</span><br>    <span class="hljs-comment">// Changing the contents of one will change the other</span><br>    <span class="hljs-comment">// Deleting/renaming one will not affect the other</span><br>    err := os.Link(<span class="hljs-string">&quot;original.txt&quot;</span>, <span class="hljs-string">&quot;original_also.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br><br>fmt.Println(<span class="hljs-string">&quot;creating sym&quot;</span>)<br>    <span class="hljs-comment">// Create a symlink</span><br>    err = os.Symlink(<span class="hljs-string">&quot;original.txt&quot;</span>, <span class="hljs-string">&quot;original_sym.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br><br>    <span class="hljs-comment">// Lstat will return file info, but if it is actually</span><br>    <span class="hljs-comment">// a symlink, it will return info about the symlink.</span><br>    <span class="hljs-comment">// It will not follow the link and give information</span><br>    <span class="hljs-comment">// about the real file</span><br>    <span class="hljs-comment">// Symlinks do not work in Windows</span><br>    fileInfo, err := os.Lstat(<span class="hljs-string">&quot;original_sym.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;Link info: %+v&quot;</span>, fileInfo)<br><br>    <span class="hljs-comment">// Change ownership of a symlink only </span><br>    <span class="hljs-comment">// and not the file it points to</span><br>    err = os.Lchown(<span class="hljs-string">&quot;original_sym.txt&quot;</span>, os.Getuid(), os.Getgid())<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="读-写文件"><a href="#读-写文件" class="headerlink" title="读/写文件"></a>读/写文件</h1><h2 id="2-1-复制文件"><a href="#2-1-复制文件" class="headerlink" title="2.1 复制文件"></a>2.1 复制文件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>)<br><br><span class="hljs-comment">// Copy a file</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Open original file</span><br>    originalFile, err := os.Open(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> originalFile.Close()<br><br>    <span class="hljs-comment">// Create new file</span><br>    newFile, err := os.Create(<span class="hljs-string">&quot;test_copy.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> newFile.Close()<br><br>    <span class="hljs-comment">// Copy the bytes to destination from source</span><br>    bytesWritten, err := io.Copy(newFile, originalFile)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    log.Printf(<span class="hljs-string">&quot;Copied %d bytes.&quot;</span>, bytesWritten)<br>    <br>    <span class="hljs-comment">// Commit the file contents</span><br>    <span class="hljs-comment">// Flushes memory to disk</span><br>    err = newFile.Sync()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-跳至指定位置（Seek）"><a href="#2-2-跳至指定位置（Seek）" class="headerlink" title="2.2 跳至指定位置（Seek）"></a>2.2 跳至指定位置（Seek）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    file, _ := os.Open(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">defer</span> file.Close()<br><br>    <span class="hljs-comment">// Offset is how many bytes to move</span><br>    <span class="hljs-comment">// Offset can be positive or negative</span><br>    <span class="hljs-keyword">var</span> offset <span class="hljs-type">int64</span> = <span class="hljs-number">5</span><br><br>    <span class="hljs-comment">// Whence is the point of reference for offset</span><br>    <span class="hljs-comment">// 0 = Beginning of file</span><br>    <span class="hljs-comment">// 1 = Current position</span><br>    <span class="hljs-comment">// 2 = End of file</span><br>    <span class="hljs-keyword">var</span> whence <span class="hljs-type">int</span> = <span class="hljs-number">0</span><br>    newPosition, err := file.Seek(offset, whence)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;Just moved to 5:&quot;</span>, newPosition)<br><br>    <span class="hljs-comment">// Go back 2 bytes from current position</span><br>    newPosition, err = file.Seek(<span class="hljs-number">-2</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;Just moved back two:&quot;</span>, newPosition)<br><br>    <span class="hljs-comment">// Find the current position by getting the</span><br>    <span class="hljs-comment">// return value from Seek after moving 0 bytes</span><br>    currentPosition, err := file.Seek(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    fmt.Println(<span class="hljs-string">&quot;Current position:&quot;</span>, currentPosition)<br><br>    <span class="hljs-comment">// Go to beginning of file</span><br>    newPosition, err = file.Seek(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;Position after seeking 0,0:&quot;</span>, newPosition)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-向文件写入字节"><a href="#2-3-向文件写入字节" class="headerlink" title="2.3 向文件写入字节"></a>2.3 向文件写入字节</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Open a new file for writing only</span><br>    file, err := os.OpenFile(<br>        <span class="hljs-string">&quot;test.txt&quot;</span>,<br>        os.O_WRONLY|os.O_TRUNC|os.O_CREATE,<br>        <span class="hljs-number">0666</span>,<br>    )<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> file.Close()<br><br>    <span class="hljs-comment">// Write bytes to file</span><br>    byteSlice := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Bytes!\n&quot;</span>)<br>    bytesWritten, err := file.Write(byteSlice)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    log.Printf(<span class="hljs-string">&quot;Wrote %d bytes.\n&quot;</span>, bytesWritten)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-快速写入文件"><a href="#2-4-快速写入文件" class="headerlink" title="2.4 快速写入文件"></a>2.4 快速写入文件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;io/ioutil&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    err := ioutil.WriteFile(<span class="hljs-string">&quot;test.txt&quot;</span>, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Hi\n&quot;</span>), <span class="hljs-number">0666</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5-使用缓冲写（Buffered-Writer）"><a href="#2-5-使用缓冲写（Buffered-Writer）" class="headerlink" title="2.5 使用缓冲写（Buffered Writer）"></a>2.5 使用缓冲写（Buffered Writer）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;bufio&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Open file for writing</span><br>    file, err := os.OpenFile(<span class="hljs-string">&quot;test.txt&quot;</span>, os.O_WRONLY, <span class="hljs-number">0666</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> file.Close()<br><br>    <span class="hljs-comment">// Create a buffered writer from the file</span><br>    bufferedWriter := bufio.NewWriter(file)<br><br>    <span class="hljs-comment">// Write bytes to buffer</span><br>    bytesWritten, err := bufferedWriter.Write(<br>        []<span class="hljs-type">byte</span>&#123;<span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>&#125;,<br>    )<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    log.Printf(<span class="hljs-string">&quot;Bytes written: %d\n&quot;</span>, bytesWritten)<br><br>    <span class="hljs-comment">// Write string to buffer</span><br>    <span class="hljs-comment">// Also available are WriteRune() and WriteByte()   </span><br>    bytesWritten, err = bufferedWriter.WriteString(<br>        <span class="hljs-string">&quot;Buffered string\n&quot;</span>,<br>    )<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    log.Printf(<span class="hljs-string">&quot;Bytes written: %d\n&quot;</span>, bytesWritten)<br><br>    <span class="hljs-comment">// Check how much is stored in buffer waiting</span><br>    unflushedBufferSize := bufferedWriter.Buffered()<br>    log.Printf(<span class="hljs-string">&quot;Bytes buffered: %d\n&quot;</span>, unflushedBufferSize)<br><br>    <span class="hljs-comment">// See how much buffer is available</span><br>    bytesAvailable := bufferedWriter.Available()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    log.Printf(<span class="hljs-string">&quot;Available buffer: %d\n&quot;</span>, bytesAvailable)<br><br>    <span class="hljs-comment">// Write memory buffer to disk</span><br>    bufferedWriter.Flush()<br><br>    <span class="hljs-comment">// Revert any changes done to buffer that have</span><br>    <span class="hljs-comment">// not yet been written to file with Flush()</span><br>    <span class="hljs-comment">// We just flushed, so there are no changes to revert</span><br>    <span class="hljs-comment">// The writer that you pass as an argument</span><br>    <span class="hljs-comment">// is where the buffer will output to, if you want</span><br>    <span class="hljs-comment">// to change to a new writer</span><br>    bufferedWriter.Reset(bufferedWriter) <br><br>    <span class="hljs-comment">// See how much buffer is available</span><br>    bytesAvailable = bufferedWriter.Available()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    log.Printf(<span class="hljs-string">&quot;Available buffer: %d\n&quot;</span>, bytesAvailable)<br><br>    <span class="hljs-comment">// Resize buffer. The first argument is a writer</span><br>    <span class="hljs-comment">// where the buffer should output to. In this case</span><br>    <span class="hljs-comment">// we are using the same buffer. If we chose a number</span><br>    <span class="hljs-comment">// that was smaller than the existing buffer, like 10</span><br>    <span class="hljs-comment">// we would not get back a buffer of size 10, we will</span><br>    <span class="hljs-comment">// get back a buffer the size of the original since</span><br>    <span class="hljs-comment">// it was already large enough (default 4096)</span><br>    bufferedWriter = bufio.NewWriterSize(<br>        bufferedWriter,<br>        <span class="hljs-number">8000</span>,<br>    )<br><br>    <span class="hljs-comment">// Check available buffer size after resizing</span><br>    bytesAvailable = bufferedWriter.Available()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    log.Printf(<span class="hljs-string">&quot;Available buffer: %d\n&quot;</span>, bytesAvailable)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最多读文件的n个字节"><a href="#最多读文件的n个字节" class="headerlink" title="最多读文件的n个字节"></a>最多读文件的n个字节</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Open file for reading</span><br>    file, err := os.Open(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> file.Close()<br><br>    <span class="hljs-comment">// Read up to len(b) bytes from the File</span><br>    <span class="hljs-comment">// Zero bytes written means end of file</span><br>    <span class="hljs-comment">// End of file returns error type io.EOF</span><br>    byteSlice := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">16</span>)<br>    bytesRead, err := file.Read(byteSlice)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    log.Printf(<span class="hljs-string">&quot;Number of bytes read: %d\n&quot;</span>, bytesRead)<br>    log.Printf(<span class="hljs-string">&quot;Data read: %s\n&quot;</span>, byteSlice)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-7-只读取文件的n个字节"><a href="#2-7-只读取文件的n个字节" class="headerlink" title="2.7 只读取文件的n个字节"></a>2.7 只读取文件的n个字节</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Open file for reading</span><br>    file, err := os.Open(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br><br>    <span class="hljs-comment">// The file.Read() function will happily read a tiny file in to a large</span><br>    <span class="hljs-comment">// byte slice, but io.ReadFull() will return an</span><br>    <span class="hljs-comment">// error if the file is smaller than the byte slice.</span><br>    byteSlice := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">2</span>)<br>    numBytesRead, err := io.ReadFull(file, byteSlice)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    log.Printf(<span class="hljs-string">&quot;Number of bytes read: %d\n&quot;</span>, numBytesRead)<br>    log.Printf(<span class="hljs-string">&quot;Data read: %s\n&quot;</span>, byteSlice)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-8-至少读取文件的n个字节"><a href="#2-8-至少读取文件的n个字节" class="headerlink" title="2.8 至少读取文件的n个字节"></a>2.8 至少读取文件的n个字节</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Open file for reading</span><br>    file, err := os.Open(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br><br>    byteSlice := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">512</span>)<br>    minBytes := <span class="hljs-number">8</span><br>    <span class="hljs-comment">// io.ReadAtLeast() will return an error if it cannot</span><br>    <span class="hljs-comment">// find at least minBytes to read. It will read as</span><br>    <span class="hljs-comment">// many bytes as byteSlice can hold. </span><br>    numBytesRead, err := io.ReadAtLeast(file, byteSlice, minBytes)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    log.Printf(<span class="hljs-string">&quot;Number of bytes read: %d\n&quot;</span>, numBytesRead)<br>    log.Printf(<span class="hljs-string">&quot;Data read: %s\n&quot;</span>, byteSlice)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-9-读文件的全部字节"><a href="#2-9-读文件的全部字节" class="headerlink" title="2.9 读文件的全部字节"></a>2.9 读文件的全部字节</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io/ioutil&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Open file for reading</span><br>    file, err := os.Open(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br><br>    <span class="hljs-comment">// os.File.Read(), io.ReadFull(), and</span><br>    <span class="hljs-comment">// io.ReadAtLeast() all work with a fixed</span><br>    <span class="hljs-comment">// byte slice that you make before you read</span><br><br>    <span class="hljs-comment">// ioutil.ReadAll() will read every byte</span><br>    <span class="hljs-comment">// from the reader (in this case a file),</span><br>    <span class="hljs-comment">// and return a slice of unknown slice</span><br>    data, err := ioutil.ReadAll(file)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br><br>    fmt.Printf(<span class="hljs-string">&quot;Data as hex: %x\n&quot;</span>, data)<br>    fmt.Printf(<span class="hljs-string">&quot;Data as string: %s\n&quot;</span>, data)<br>    fmt.Println(<span class="hljs-string">&quot;Number of bytes read:&quot;</span>, <span class="hljs-built_in">len</span>(data))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-10-快速读取全部文件到内存"><a href="#2-10-快速读取全部文件到内存" class="headerlink" title="2.10 快速读取全部文件到内存"></a>2.10 快速读取全部文件到内存</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;io/ioutil&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Read file to byte slice</span><br>    data, err := ioutil.ReadFile(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br><br>    log.Printf(<span class="hljs-string">&quot;Data read: %s\n&quot;</span>, data)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-11-使用缓冲读（Buffered-Reader）"><a href="#2-11-使用缓冲读（Buffered-Reader）" class="headerlink" title="2.11 使用缓冲读（Buffered Reader）"></a>2.11 使用缓冲读（Buffered Reader）</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;bufio&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Open file and create a buffered reader on top</span><br>    file, err := os.Open(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    bufferedReader := bufio.NewReader(file)<br><br>    <span class="hljs-comment">// Get bytes without advancing pointer</span><br>    byteSlice := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">5</span>)<br>    byteSlice, err = bufferedReader.Peek(<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;Peeked at 5 bytes: %s\n&quot;</span>, byteSlice)<br><br>    <span class="hljs-comment">// Read and advance pointer</span><br>    numBytesRead, err := bufferedReader.Read(byteSlice)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;Read %d bytes: %s\n&quot;</span>, numBytesRead, byteSlice)<br><br>    <span class="hljs-comment">// Ready 1 byte. Error if no byte to read</span><br>    myByte, err := bufferedReader.ReadByte()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;Read 1 byte: %c\n&quot;</span>, myByte)     <br><br>    <span class="hljs-comment">// Read up to and including delimiter</span><br>    <span class="hljs-comment">// Returns byte slice</span><br>    dataBytes, err := bufferedReader.ReadBytes(<span class="hljs-string">&#x27;\n&#x27;</span>) <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;Read bytes: %s\n&quot;</span>, dataBytes)           <br><br>    <span class="hljs-comment">// Read up to and including delimiter</span><br>    <span class="hljs-comment">// Returns string   </span><br>    dataString, err := bufferedReader.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;Read string: %s\n&quot;</span>, dataString)     <br><br>    <span class="hljs-comment">// This example reads a few lines so test.txt</span><br>    <span class="hljs-comment">// should have a few lines of text to work correct</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-12-使用Scanner读"><a href="#2-12-使用Scanner读" class="headerlink" title="2.12 使用Scanner读"></a>2.12 使用Scanner读</h2><p><code>bufio</code>包有一个<code>Scanner</code>，它提供了一种方法使用指定的分隔符来逐项迭代文件内容。默认情况下，使用换行符<code>newline</code>来将文件拆分为若干行。在CSV文件中，使用逗号作为分隔符。<code>os.File</code>对象可以使用<code>bufio.Scanner</code>包装，用起来和缓存读相似。调用<code>Scan</code>函数读取下一行，调用<code>Text()</code>或<code>Bytes()</code>读取内容。<br>分隔符不是一个简单的字节或字符，有一个特殊的函数用来决定符合分隔，计算从何处开始算作下一行，指针向前移动多少，返回什么数据。若未提供自定义的<code>SplitFunc</code>函数，默认使用<code>ScanLines</code>函数。另外<code>bufio</code>包提供了<code>ScanRunes</code>和<code>ScanWords</code>函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;bufio&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Open file and create scanner on top of it</span><br>    file, err := os.Open(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    scanner := bufio.NewScanner(file)<br><br>    <span class="hljs-comment">// Default scanner is bufio.ScanLines. Lets use ScanWords.</span><br>    <span class="hljs-comment">// Could also use a custom function of SplitFunc type</span><br>    scanner.Split(bufio.ScanWords)<br><br>    <span class="hljs-comment">// Scan for next token. </span><br>    success := scanner.Scan() <br>    <span class="hljs-keyword">if</span> success == <span class="hljs-literal">false</span> &#123;<br>        <span class="hljs-comment">// False on error or EOF. Check error</span><br>        err = scanner.Err()<br>        <span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>            log.Println(<span class="hljs-string">&quot;Scan completed and reached EOF&quot;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.Fatal(err)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Get data from scan with Bytes() or Text()</span><br>    fmt.Println(<span class="hljs-string">&quot;First word found:&quot;</span>, scanner.Text())<br><br>    <span class="hljs-comment">// Call scanner.Scan() again to find next token</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-归档"><a href="#3-归档" class="headerlink" title="3. 归档"></a>3. 归档</h1><h2 id="3-1-Zip归档"><a href="#3-1-Zip归档" class="headerlink" title="3.1 Zip归档"></a>3.1 Zip归档</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// This example uses zip but standard library</span><br><span class="hljs-comment">// also supports tar archives</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;archive/zip&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Create a file to write the archive buffer to</span><br>    <span class="hljs-comment">// Could also use an in memory buffer.</span><br>    outFile, err := os.Create(<span class="hljs-string">&quot;test.zip&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> outFile.Close()<br><br>    <span class="hljs-comment">// Create a zip writer on top of the file writer</span><br>    zipWriter := zip.NewWriter(outFile)<br><br><br>    <span class="hljs-comment">// Add files to archive</span><br>    <span class="hljs-comment">// We use some hard coded data to demonstrate,</span><br>    <span class="hljs-comment">// but you could iterate through all the files</span><br>    <span class="hljs-comment">// in a directory and pass the name and contents</span><br>    <span class="hljs-comment">// of each file, or you can take data from your</span><br>    <span class="hljs-comment">// program and write it write in to the archive</span><br>    <span class="hljs-comment">// without </span><br>    <span class="hljs-keyword">var</span> filesToArchive = []<span class="hljs-keyword">struct</span> &#123;<br>        Name, Body <span class="hljs-type">string</span><br>    &#125; &#123;<br>        &#123;<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;String contents of file&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;test2.txt&quot;</span>, <span class="hljs-string">&quot;\x61\x62\x63\n&quot;</span>&#125;,<br>    &#125;<br><br>    <span class="hljs-comment">// Create and write files to the archive, which in turn</span><br>    <span class="hljs-comment">// are getting written to the underlying writer to the</span><br>    <span class="hljs-comment">// .zip file we created at the beginning</span><br>    <span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> filesToArchive &#123;<br>            fileWriter, err := zipWriter.Create(file.Name)<br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                    log.Fatal(err)<br>            &#125;<br>            _, err = fileWriter.Write([]<span class="hljs-type">byte</span>(file.Body))<br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                    log.Fatal(err)<br>            &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Clean up</span><br>    err = zipWriter.Close()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            log.Fatal(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-Zip解压"><a href="#3-2-Zip解压" class="headerlink" title="3.2 Zip解压"></a>3.2 Zip解压</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// This example uses zip but standard library</span><br><span class="hljs-comment">// also supports tar archives</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;archive/zip&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;path/filepath&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Create a reader out of the zip archive</span><br>    zipReader, err := zip.OpenReader(<span class="hljs-string">&quot;test.zip&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> zipReader.Close()<br><br>    <span class="hljs-comment">// Iterate through each file/dir found in</span><br>    <span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> zipReader.Reader.File &#123;<br>        <span class="hljs-comment">// Open the file inside the zip archive</span><br>        <span class="hljs-comment">// like a normal file</span><br>        zippedFile, err := file.Open()<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            log.Fatal(err)<br>        &#125;<br>        <span class="hljs-keyword">defer</span> zippedFile.Close()<br>        <br>        <span class="hljs-comment">// Specify what the extracted file name should be.</span><br>        <span class="hljs-comment">// You can specify a full path or a prefix</span><br>        <span class="hljs-comment">// to move it to a different directory. </span><br>        <span class="hljs-comment">// In this case, we will extract the file from</span><br>        <span class="hljs-comment">// the zip to a file of the same name.</span><br>        targetDir := <span class="hljs-string">&quot;./&quot;</span><br>        extractedFilePath := filepath.Join(<br>            targetDir,<br>            file.Name,<br>        )<br><br>        <span class="hljs-comment">// Extract the item (or create directory)</span><br>        <span class="hljs-keyword">if</span> file.FileInfo().IsDir() &#123;<br>            <span class="hljs-comment">// Create directories to recreate directory</span><br>            <span class="hljs-comment">// structure inside the zip archive. Also</span><br>            <span class="hljs-comment">// preserves permissions</span><br>            log.Println(<span class="hljs-string">&quot;Creating directory:&quot;</span>, extractedFilePath)<br>            os.MkdirAll(extractedFilePath, file.Mode())<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Extract regular file since not a directory</span><br>            log.Println(<span class="hljs-string">&quot;Extracting file:&quot;</span>, file.Name)<br><br>            <span class="hljs-comment">// Open an output file for writing</span><br>            outputFile, err := os.OpenFile(<br>                extractedFilePath,<br>                os.O_WRONLY|os.O_CREATE|os.O_TRUNC,<br>                file.Mode(),<br>            )<br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                log.Fatal(err)<br>            &#125;<br>            <span class="hljs-keyword">defer</span> outputFile.Close()<br><br>            <span class="hljs-comment">// &quot;Extract&quot; the file by copying zipped file</span><br>            <span class="hljs-comment">// contents to the output file</span><br>            _, err = io.Copy(outputFile, zippedFile)<br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                log.Fatal(err)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-压缩"><a href="#4-压缩" class="headerlink" title="4. 压缩"></a>4. 压缩</h1><h2 id="4-1-文件压缩"><a href="#4-1-文件压缩" class="headerlink" title="4.1 文件压缩"></a>4.1 文件压缩</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// This example uses gzip but standard library also</span><br><span class="hljs-comment">// supports zlib, bz2, flate, and lzw</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;compress/gzip&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Create .gz file to write to</span><br>    outputFile, err := os.Create(<span class="hljs-string">&quot;test.txt.gz&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br><br>    <span class="hljs-comment">// Create a gzip writer on top of file writer</span><br>    gzipWriter := gzip.NewWriter(outputFile)<br>    <span class="hljs-keyword">defer</span> gzipWriter.Close()<br><br>    <span class="hljs-comment">// When we write to the gzip writer</span><br>    <span class="hljs-comment">// it will in turn compress the contents</span><br>    <span class="hljs-comment">// and then write it to the underlying</span><br>    <span class="hljs-comment">// file writer as well</span><br>    <span class="hljs-comment">// We don&#x27;t have to worry about how all</span><br>    <span class="hljs-comment">// the compression works since we just</span><br>    <span class="hljs-comment">// use it as a simple writer interface</span><br>    <span class="hljs-comment">// that we send bytes to</span><br>    _, err = gzipWriter.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Gophers rule!\n&quot;</span>))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br><br>    log.Println(<span class="hljs-string">&quot;Compressed data written to file.&quot;</span>) <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-1-文件解压缩"><a href="#4-1-文件解压缩" class="headerlink" title="4.1 文件解压缩"></a>4.1 文件解压缩</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// This example uses gzip but standard library also</span><br><span class="hljs-comment">// supports zlib, bz2, flate, and lzw</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;compress/gzip&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Open gzip file that we want to uncompress</span><br>    <span class="hljs-comment">// The file is a reader, but we could use any</span><br>    <span class="hljs-comment">// data source. It is common for web servers</span><br>    <span class="hljs-comment">// to return gzipped contents to save bandwidth</span><br>    <span class="hljs-comment">// and in that case the data is not in a file</span><br>    <span class="hljs-comment">// on the file system but is in a memory buffer</span><br>    gzipFile, err := os.Open(<span class="hljs-string">&quot;test.txt.gz&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br><br>    <span class="hljs-comment">// Create a gzip reader on top of the file reader</span><br>    <span class="hljs-comment">// Again, it could be any type reader though</span><br>    gzipReader, err := gzip.NewReader(gzipFile)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> gzipReader.Close()<br><br>    <span class="hljs-comment">// Uncompress to a writer. We&#x27;ll use a file writer</span><br>    outfileWriter, err := os.Create(<span class="hljs-string">&quot;unzipped.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> outfileWriter.Close()<br><br>    <span class="hljs-comment">// Copy contents of gzipped file to output file</span><br>    _, err = io.Copy(outfileWriter, gzipReader)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-其他操作"><a href="#5-其他操作" class="headerlink" title="5. 其他操作"></a>5. 其他操作</h1><h2 id="5-1-临时文件和目录"><a href="#5-1-临时文件和目录" class="headerlink" title="5.1 临时文件和目录"></a>5.1 临时文件和目录</h2><p><code>ioutil</code>包提提供了两个函数<code>TempDir()</code>和<code>TempFile()</code>。使用完毕后，调用方需要负责主动删除临时文件。这两个函数唯一提供的一项便利是在传空参数时，它会在系统的<code>/tmp</code>目录下自动创建。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>     <span class="hljs-string">&quot;os&quot;</span><br>     <span class="hljs-string">&quot;io/ioutil&quot;</span><br>     <span class="hljs-string">&quot;log&quot;</span><br>     <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>     <span class="hljs-comment">// Create a temp dir in the system default temp folder</span><br>     tempDirPath, err := ioutil.TempDir(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;myTempDir&quot;</span>)<br>     <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>          log.Fatal(err)<br>     &#125;<br>     fmt.Println(<span class="hljs-string">&quot;Temp dir created:&quot;</span>, tempDirPath)<br><br>     <span class="hljs-comment">// Create a file in new temp directory</span><br>     tempFile, err := ioutil.TempFile(tempDirPath, <span class="hljs-string">&quot;myTempFile.txt&quot;</span>)<br>     <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>          log.Fatal(err)<br>     &#125;<br>     fmt.Println(<span class="hljs-string">&quot;Temp file created:&quot;</span>, tempFile.Name())<br>     <br>     <span class="hljs-comment">// ... do something with temp file/dir ...</span><br><br>     <span class="hljs-comment">// Close file</span><br>     err = tempFile.Close()<br>     <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br><br>    <span class="hljs-comment">// Delete the resources we created</span><br>     err = os.Remove(tempFile.Name())<br>     <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>     err = os.Remove(tempDirPath)<br>     <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-2-从HTTP下载文件"><a href="#5-2-从HTTP下载文件" class="headerlink" title="5.2 从HTTP下载文件"></a>5.2 从HTTP下载文件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>     <span class="hljs-string">&quot;os&quot;</span><br>     <span class="hljs-string">&quot;io&quot;</span><br>     <span class="hljs-string">&quot;log&quot;</span><br>     <span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>     <span class="hljs-comment">// Create output file</span><br>     newFile, err := os.Create(<span class="hljs-string">&quot;devdungeon.html&quot;</span>)<br>     <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>          log.Fatal(err)<br>     &#125;<br>     <span class="hljs-keyword">defer</span> newFile.Close()<br><br>     <span class="hljs-comment">// HTTP GET request devdungeon.com </span><br>     url := <span class="hljs-string">&quot;http://www.devdungeon.com/archive&quot;</span><br>     response, err := http.Get(url)<br>     <span class="hljs-keyword">defer</span> response.Body.Close()<br><br>     <span class="hljs-comment">// Write bytes from HTTP response to file.</span><br>     <span class="hljs-comment">// response.Body satisfies the reader interface.</span><br>     <span class="hljs-comment">// newFile satisfies the writer interface.</span><br>     <span class="hljs-comment">// That allows us to use io.Copy which accepts</span><br>     <span class="hljs-comment">// any type that implements reader and writer interface</span><br>     numBytesWritten, err := io.Copy(newFile, response.Body)<br>     <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>          log.Fatal(err)<br>     &#125;<br>     log.Printf(<span class="hljs-string">&quot;Downloaded %d byte file.\n&quot;</span>, numBytesWritten)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-3-哈希和摘要（Hashing和Checksums）"><a href="#5-3-哈希和摘要（Hashing和Checksums）" class="headerlink" title="5.3 哈希和摘要（Hashing和Checksums）"></a>5.3 哈希和摘要（Hashing和Checksums）</h2><p>示例1</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;crypto/md5&quot;</span><br>    <span class="hljs-string">&quot;crypto/sha1&quot;</span><br>    <span class="hljs-string">&quot;crypto/sha256&quot;</span><br>    <span class="hljs-string">&quot;crypto/sha512&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io/ioutil&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Get bytes from file</span><br>    data, err := ioutil.ReadFile(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br><br>    <span class="hljs-comment">// Hash the file and output results</span><br>    fmt.Printf(<span class="hljs-string">&quot;Md5: %x\n\n&quot;</span>, md5.Sum(data))<br>    fmt.Printf(<span class="hljs-string">&quot;Sha1: %x\n\n&quot;</span>, sha1.Sum(data))<br>    fmt.Printf(<span class="hljs-string">&quot;Sha256: %x\n\n&quot;</span>, sha256.Sum256(data))<br>    fmt.Printf(<span class="hljs-string">&quot;Sha512: %x\n\n&quot;</span>, sha512.Sum512(data))<br>&#125;<br></code></pre></td></tr></table></figure><p>示例2</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;crypto/md5&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// Open file for reading</span><br>    file, err := os.Open(<span class="hljs-string">&quot;test.txt&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> file.Close()<br>    <br>    <span class="hljs-comment">// Create new hasher, which is a writer interface</span><br>    hasher := md5.New()<br>    _, err = io.Copy(hasher, file)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br><br>    <span class="hljs-comment">// Hash and print. Pass nil since</span><br>    <span class="hljs-comment">// the data is not coming in as a slice argument</span><br>    <span class="hljs-comment">// but is coming through the writer interface</span><br>    sum := hasher.Sum(<span class="hljs-literal">nil</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;Md5 checksum: %x\n&quot;</span>, sum)<br>&#125;<br></code></pre></td></tr></table></figure><hr><ul><li>原文<a href="https://www.devdungeon.com/content/working-files-go">Working with Files in Go</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
          <category> 笔记 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器网络</title>
      <link href="/2022/03/13/Docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/03/13/Docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Docker通过网络驱动<code>network drivers</code>实现容器间的网络互联。默认情况Docker提供两种网络驱动，<code>bridge</code>网络驱动和<code>overlay</code>网络驱动。<br>查看网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker network <span class="hljs-built_in">ls</span></span><br>NETWORK ID          NAME                DRIVER              SCOPE<br>fbae7442cff4        bridge              bridge              local<br>10a61a961499        docker_gwbridge     bridge              local<br>28ffffe21438        host                host                local<br>4c0fc68dd142        none                null                local<br></code></pre></td></tr></table></figure><p>名为<code>bridge</code>的网络是一个特殊的网络即<code>docker0</code>。除非显示声明，否则Docker创建容器时默认使用该网络。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker network inspect bridge -f=<span class="hljs-string">&quot;&#123;&#123;json .Options&#125;&#125;&quot;</span>|jq</span><br>&#123;<br>  &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,<br>  &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,<br>  &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,<br>  &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,<br>  &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,<br>  &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动容器，未指定网络默认使用<code>docker0</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d --<span class="hljs-built_in">rm</span> --name demo_net_container busybox sh -c <span class="hljs-string">&quot;sleep 600&quot;</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker ps -a|grep demo</span><br>eed56010136e  busybox  &quot;sh -c &#x27;sleep 600&#x27;&quot;  4 seconds ago  Up 3 seconds  demo_net_container<br></code></pre></td></tr></table></figure><p>查看容器网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker inspect -f=<span class="hljs-string">&quot;&#123;&#123;json .NetworkSettings.Networks&#125;&#125;&quot;</span> demo_net_container</span><br>&#123;&quot;bridge&quot;:&#123;&quot;IPAMConfig&quot;:null,&quot;Links&quot;:null,&quot;Aliases&quot;:null,&quot;NetworkID&quot;:&quot;fbae7442cff48ab9c8af7f5e120c8ce530db9e1416c0067c47094ba692a9d0a8&quot;,&quot;EndpointID&quot;:&quot;83fbc769afc547237687183904acad786808edd81212d96cabf69f01defded03&quot;,&quot;Gateway&quot;:&quot;172.17.0.1&quot;,&quot;IPAddress&quot;:&quot;172.17.0.2&quot;,&quot;IPPrefixLen&quot;:16,&quot;IPv6Gateway&quot;:&quot;&quot;,&quot;GlobalIPv6Address&quot;:&quot;&quot;,&quot;GlobalIPv6PrefixLen&quot;:0,&quot;MacAddress&quot;:&quot;02:42:ac:11:00:02&quot;,&quot;DriverOpts&quot;:null&#125;&#125;<br></code></pre></td></tr></table></figure><p>获取容器IP地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker inspect -f=<span class="hljs-string">&quot;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&quot;</span> demo_net_container</span><br>172.17.0.2<br></code></pre></td></tr></table></figure><h1 id="Docker网络驱动类型"><a href="#Docker网络驱动类型" class="headerlink" title="Docker网络驱动类型"></a>Docker网络驱动类型</h1><ul><li>bridage：默认网络驱动。桥接网络是的独立的容器之间能够通信。</li><li>host：对于独立容器，移除容器和宿主机之间的网络隔离，直接使用宿主机的网络。</li><li>overlay：覆盖网络能够将多个<code>Docker daemon</code>连接起来，并使swarm services之间能够通信。也可以使用覆盖网络在swarm services和独立容器之间建立网络通信，或者不同的<code>Docker daemon</code>之间的独立容器建立通信。</li><li>macvlan：Macvlan网络允许向容器分配固定的MAC地址，使它在网络中好似一个物理设备。Docker daemon通过MAC地址将流量路由到指定容器。</li><li>none：禁用网络。这种模式下，通常会搭配自定义网络插件。</li></ul><h1 id="Overlay网络，覆盖网络"><a href="#Overlay网络，覆盖网络" class="headerlink" title="Overlay网络，覆盖网络"></a>Overlay网络，覆盖网络</h1><p><code>overlay</code>网络在Docker daemon之间创建了一个分布式的网络。它工作在宿主机网络之上，将容器连接起来。并支持网络加密特性。<br>当初始化swarm集群或加入一个swarm集群时，在Docker宿主机上会创建两个新的网络：</p><ul><li>ingress网络：一个名为<code>ingress</code>的覆盖网络，控制着swarm services的流量。当创建service且不指定自定义覆盖网络时，它被默认使用。</li><li>docker_gwbridge：一个名为<code>docker_gwbridge</code>的桥接网络，在swarm集群中充当连接各个独立Docker daemon的角色。</li></ul><h2 id="对覆盖网络的操作"><a href="#对覆盖网络的操作" class="headerlink" title="对覆盖网络的操作"></a>对覆盖网络的操作</h2><h3 id="创建覆盖网络"><a href="#创建覆盖网络" class="headerlink" title="创建覆盖网络"></a>创建覆盖网络</h3><blockquote><p>前置条件：</p><ul><li>Docker daemon使用覆盖网络的防火墙规则，保持协议和端口双向放开<ul><li>TCP端口2377，用以集群管理的通信</li><li>TCP和UDP端口7946，用以节点之间通信</li><li>UDP端口4789，用以覆盖网络间流量</li></ul></li><li>初始化swarm集群或者加入一个swarm集群。加入集群后会自动创建一个名为<code>ingress</code>的覆盖网络。然后你才可以创建自定义的覆盖网络。</li></ul></blockquote><h3 id="覆盖网络流量加密"><a href="#覆盖网络流量加密" class="headerlink" title="覆盖网络流量加密"></a>覆盖网络流量加密</h3><p>使用AES算法的GCM模式</p><h3 id="swarm集群模式和独立容器"><a href="#swarm集群模式和独立容器" class="headerlink" title="swarm集群模式和独立容器"></a>swarm集群模式和独立容器</h3><h3 id="自定义ingress网络"><a href="#自定义ingress网络" class="headerlink" title="自定义ingress网络"></a>自定义ingress网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">删除ingress网络下的所有服务</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker network inspect ingress</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除ingress网络</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker network <span class="hljs-built_in">rm</span> ingress</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">自定义ingress网络</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker network create \</span><br><span class="language-bash">  --driver overlay \</span><br><span class="language-bash">  --ingress \</span><br><span class="language-bash">  --subnet=10.11.0.0/16 \</span><br><span class="language-bash">  --gateway=10.11.0.2 \</span><br><span class="language-bash">  --opt com.docker.network.driver.mtu=1200 \</span><br><span class="language-bash">  my-ingress</span><br><br></code></pre></td></tr></table></figure><h3 id="自定义docker-gwbridge网络接口"><a href="#自定义docker-gwbridge网络接口" class="headerlink" title="自定义docker_gwbridge网络接口"></a>自定义<code>docker_gwbridge</code>网络接口</h3><p><code>docker_gwbridge</code>是一个虚拟网桥，用以将覆盖网络和集群间的Docker daemon的物理网卡连接起来。当初始化swarm集群或加入swarm集群时，Docker会自动创建它，但它不是一个Docker设备。它存在与Docker宿主机的内核中。要对<code>docker_gwbridge</code>进行定制，必须在加入swarm集群之前或先退出swarm集群。</p><ol><li>停止Docker daemon</li><li>删除<code>docker_gwbridge</code>网桥<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> docker_gwbridge down</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ip <span class="hljs-built_in">link</span> del dev docker_gwbridge</span> <br></code></pre></td></tr></table></figure></li><li>启动Docker daemon但不要初始化swarm集群</li><li>创建<code>docker_gwbridge</code>网桥<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker network create \</span><br><span class="language-bash">    --subnet 10.11.0.0/16 \</span><br><span class="language-bash">    --opt com.docker.network.bridge.name=docker_gwbridge \</span><br><span class="language-bash">    --opt com.docker.network.bridge.enable_icc=<span class="hljs-literal">false</span> \</span><br><span class="language-bash">    --opt com.docker.network.bridge.enable_ip_masquerade=<span class="hljs-literal">true</span> \</span><br><span class="language-bash">    docker_gwbridge</span><br></code></pre></td></tr></table></figure></li><li>初始化或加入swarm集群。因为docker_gwbridge已存在，Docker不会使用配置创建它。</li></ol><h2 id="对swarm集群服务的操作"><a href="#对swarm集群服务的操作" class="headerlink" title="对swarm集群服务的操作"></a>对swarm集群服务的操作</h2><h3 id="在覆盖网络中发布端口"><a href="#在覆盖网络中发布端口" class="headerlink" title="在覆盖网络中发布端口"></a>在覆盖网络中发布端口</h3><h3 id="绕过swarm集群的routing-mesh"><a href="#绕过swarm集群的routing-mesh" class="headerlink" title="绕过swarm集群的routing mesh"></a>绕过swarm集群的routing mesh</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">--endpoint-mode=dnsrr<br></code></pre></td></tr></table></figure><hr><p>参考资料：</p><ul><li><a href="https://docs.docker.com/engine/tutorials/networkingcontainers/">Network containers</a></li><li><a href="https://docs.docker.com/network/overlay/">Use overlay networks</a></li><li><a href="https://docs.docker.com/network/network-tutorial-overlay/">Networking with overlay networks</a></li><li><a href="https://docs.docker.com/engine/swarm/networking/">Manage swarm service networks</a></li><li><a href="https://docs.docker.com/network/macvlan/">Use macvlan networks</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iptables和容器</title>
      <link href="/2022/03/13/Iptables%E5%92%8C%E5%AE%B9%E5%99%A8/"/>
      <url>/2022/03/13/Iptables%E5%92%8C%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="复习网络七层模型"><a href="#复习网络七层模型" class="headerlink" title="复习网络七层模型"></a>复习网络七层模型</h1><p><img src="/images/linux/OSI_7_layers.jpg"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在Linux中防火墙全称为<code>Netfilter/Iptables</code>。<code>Netfilter</code>工作在内核空间，负责根据规则执行具体的动作如数据包过滤、网络地址转换、数据包内容修改等。<code>Iptables</code>位于用户空间，是一个命令行工具，用来设定各种规则从而操作<code>Netfilter</code>。<br><img src="/images/linux/iptables_overview_01.png"></p><p>iptables有五条链：</p><ul><li>PREROUTING 路由前</li><li>INPUT 流入</li><li>FORWARD 转发</li><li>OUTPUT 流出</li><li>POSTROUTING 路由后</li></ul><p>以及四张表：</p><ul><li>Raw</li><li>Mangle 主要负责修改数据包标记</li><li>Nat 主要负责网络地址转换</li><li>Filter 主要负责过滤</li></ul><p>表和链的组合设定多条规则，实现对数据包的控制。iptables中四张表按优先级执行 raw -&gt; mangle -&gt; nat -&gt; filter。<br><img src="/images/linux/iptables_overview_02.png"></p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">iptables -t 表名 &lt;-A/I/D/R/L/F&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP&gt; --sport 源端口 &lt;-d 目标IP&gt; --dport 目标端口 -j 动作  <br><br>-t 指定表名，未指定表名时默认为 Filter 表<br>-A和-I都是添加规则，-A增加的规则放在现有规则的最后，-I添加的规则放在规则号指定的位置，该位置原先的规则往后顺位。<br>-D 删除规则号指定的规则<br>-R 替换规则号指定的规则<br>-L 查看相应的规则<br>-F 清楚某条链或者表的规则<br>-i/o 指定输入和输出的网卡<br>-p 指定数据包协议，如 tcp、udp、icmp 等，这里支持简单的表达式，如 -p !tcp 去除 tcp 外的所有协议<br>-s和-sport分别指定数据包源 IP 地址及端口<br>-d和-dport分别指定数据包目标 IP 地址及端口<br>-j 指定前述的参数匹配上数据包以后执行的动作。常用的处理动作包括 ACCEPT 放行、REJECT 拒绝、DROP 丢弃、REDIRECT 重定向、DNAT 修改目的 IP 及端口、SNAT 修改源 IP 及端口等等<br></code></pre></td></tr></table></figure><p>iptables规则示例</p><ol><li>禁用SSHD默认的22端口<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -t filter -A INPUT -p tcp --dport 22 -j DROP<br></code></pre></td></tr></table></figure></li><li>只允许特定网段10.160.0.0/16访问本机的10.160.100.1的SSHD(22端口)服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置默认的drop，再允许特定的网段进入和出去</span><br>iptables -P INPUT DROP<br>iptables -P OUTPUT DROP<br>iptables -P FORWARD DROP<br><br>iptables -t filter -A INPUT -s 10.160.0.0/16 -d 10.160.100.1 -p tcp --dport 22 -j ACCEPT<br>iptables -t filter -A OUTPUT -s 10.160.100.1 -d 10.160.0.0/16 -p tcp --dport 22 -j ACCEPT<br></code></pre></td></tr></table></figure></li><li>过滤掉状态有问题的http包。只允许http80端口且限定连接状态为Established和Related的数据包<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -A INPUT -p tcp  --sport 80 -m state --state ESTABLISHED,RELATED -j ACCEPT<br></code></pre></td></tr></table></figure></li><li>开启儿童上网模式，星期一到星期五的8:00-21:00禁止游戏相关网页”game“<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -I FORWARD -s 192.168.0.0/24 -m string --string &quot;game&quot; -m time --timestart 8:00 --timestop 21:00 --days Mon,Tue,Wed,Thu,Fri -j DROP<br></code></pre></td></tr></table></figure></li><li>生产环境mysql数据库仅允许内网特定ip访问<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables –A INPUT –s 10.160.41.1 –p tcp –dport 3306 –j ACCEPT<br></code></pre></td></tr></table></figure></li><li>将目的IP为10.160.132.55且目的端口为9090的我们做DNAT修改目标地址处理，重定向到10.162.37.1:8080<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables  -A INPUT -d 10.160.132.55 -p tcp --dport 9090 -j DNAT --to 10.162.37.1:8080<br></code></pre></td></tr></table></figure></li><li>拦截所有入站tcp80端口和8080端口数据包重定向到某个代理服务的15001端口进行统一处理<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -A INPUT -p tcp --dport 80,8080 -j REDIRECT --to-ports 15001<br></code></pre></td></tr></table></figure></li></ol><h1 id="Docker的iptables"><a href="#Docker的iptables" class="headerlink" title="Docker的iptables"></a>Docker的iptables</h1><h2 id="列出所有nat规则"><a href="#列出所有nat规则" class="headerlink" title="列出所有nat规则"></a>列出所有nat规则</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">iptables -L -nvt nat</span><br></code></pre></td></tr></table></figure><p><img src="/images/linux/docker_iptables_nat.png"></p><h2 id="列出所有filter规则"><a href="#列出所有filter规则" class="headerlink" title="列出所有filter规则"></a>列出所有filter规则</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">iptables -L -nvt filter</span><br></code></pre></td></tr></table></figure><p><img src="/images/linux/docker_iptables_filter.png"></p><hr><ul><li>原文<a href="https://mp.weixin.qq.com/s/nRTMu4J9eBOu1ydkII_toQ">从 iptables 谈 ServiceMesh 流量拦截</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
          <category> 笔记 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux网桥工作原理</title>
      <link href="/2022/03/12/Linux%E7%BD%91%E6%A1%A5%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2022/03/12/Linux%E7%BD%91%E6%A1%A5%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Linux网桥是一种使用软件实现的虚拟设备。它将多个网络接口连接起来，一个接口接收到的数据会复制到其他网络接口。</p><p><img src="/images/linux/docker0_network.png"></p><p>Docker在启动时，会创建一个名为<code>docker0</code>的虚拟网桥，默认使用<code>172.17.0.1/16</code>地址。并使用虚拟设备对veth-pair将容器与<code>docker0</code>网桥连接起来。Docker会创建一条<code>iptables NAT</code>规则将来自<code>172.17.0.0/16</code>网段的数据包通过物理网卡转发出去（如图中的<code>enps03</code>网卡）。</p><p>网桥工作在二层网络，能够根据MAC地址对数据包进行广播或者单播。当网桥在本地hash表中找到MAC地址对应的网桥端口，说明此数据包是单播数据包，否则就是广播数据包。</p><p><img src="/images/linux/docker0_network_02.png"><br>当<code>网络接口</code>接收到数据包时，会判断这个<code>网络接口</code>是否绑定在某个<code>网桥</code>上，如果绑定了就开始处理数据。<br>首先从数据包中学习到的目标MAC地址插入到网桥的hash表中。<br>如果数据包是广播包(MAC地址首位是1)，调用<code>广播</code>函数将数据包发送给连接在网桥上的所有网络接口。<br>否则在hash表中查找目标MAC地址的网桥端口，若未找到，将数据包发送给连接在网桥上的所有网络接口。<br>若找到，将数据包发送给此端口</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发和调度的关系</title>
      <link href="/2021/03/16/%E5%B9%B6%E5%8F%91%E5%92%8C%E8%B0%83%E5%BA%A6%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2021/03/16/%E5%B9%B6%E5%8F%91%E5%92%8C%E8%B0%83%E5%BA%A6%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="注：该文章基于Go-1-13"><a href="#注：该文章基于Go-1-13" class="headerlink" title="注：该文章基于Go 1.13"></a>注：该文章基于Go 1.13</h2><p><img src="/images/golang/a_journey_with_go/cocurrency_scheduler_01.png"></p><p>将Go协程从一个系统线程切换到另一个系统线程有一定开销，若触发非常频繁，将降低应用的性能。但随着时间的推移，Go调调度器已经解决了这个问题。它负责协调并发工作时协程和系统线程间的关系。让我们回到几年前，看看这个问题是如何改进的。</p><h2 id="原始问题"><a href="#原始问题" class="headerlink" title="原始问题"></a>原始问题</h2><p>在Go的早期，1.0和1.1版本，在多线程上(如提高<code>GOMAXPROCS</code>数值)执行并发的代码有性能问题。我们看看文档中素数筛的代码示例：<br><img src="/images/golang/a_journey_with_go/cocurrency_scheduler_02.png"></p><p>这是<code>GOMAXPROCS</code>非值1时，Go 1.0.3版本，计算前10万素数的压测数据。   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">name     time/op<br>Sieve    19.2s ± 0%<br>Sieve-2  19.3s ± 0%<br>Sieve-4  20.4s ± 0%<br>Sieve-8  20.4s ± 0%<br></code></pre></td></tr></table></figure><p>为了理解上面的测试结果，需要先了解当时的调度器是如何设计的。在Go的第一个版本中，调度器只有一个全局队列，所有的线程都从这里存取协程。下图所示为运行了两个系统线程<code>M</code>的程序，通过设置<code>GOMAXPROCS=2</code>实现：<br><img src="/images/golang/a_journey_with_go/cocurrency_scheduler_03.png"></p><p>只有一个队列无法保证协程恢复时，仍在相同的线程上执行。第一个就绪的线程会选取一个等待中的协程并运行它。因此，必然导致协程在另一个线程上执行，同时付出相当大的性能代价。以阻塞的管道举例：</p><ul><li><p>协程#7的管道阻塞并等待消息。当消息到达时，协程被推入全局队列。<br><img src="/images/golang/a_journey_with_go/cocurrency_scheduler_04.png"></p></li><li><p>然后，管道发送消息，协程#X将在空闲线程上执行，而协程#8因管道阻塞<br><img src="/images/golang/a_journey_with_go/cocurrency_scheduler_05.png"></p></li><li><p>协程#7此时将在空闲线程上执行<br><img src="/images/golang/a_journey_with_go/cocurrency_scheduler_06.png"></p></li></ul><p>此时协程在不同的线程上执行了。只有一个全局队列也迫使调度器使用全局锁来控制对协程的调度操作。这里是通过<code>pprof</code>的CPU分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Total: 8679 samples<br>3700  42.6%  42.6%     3700  42.6% runtime.procyield<br>1055  12.2%  54.8%     1055  12.2% runtime.xchg<br>753   8.7%  63.5%     1590   18.3% runtime.chanrecv<br>677   7.8%  71.3%      677    7.8% dequeue<br>438   5.0%  76.3%      438    5.0% runtime.futex<br>367   4.2%  80.5%     5924   68.3% main.filter<br>234   2.7%  83.2%     5005   57.7% runtime.lock<br>230   2.7%  85.9%     3933   45.3% runtime.chansend<br>214   2.5%  88.4%      214    2.5% runtime.osyield<br>150   1.7%  90.1%      150    1.7% runtime.cas<br></code></pre></td></tr></table></figure><p><code>procyield</code>，<code>xchg</code>，<code>futex</code>和<code>lock</code>都是调度器的全局锁相关。显而易见，程序的大部分消耗都在锁上。</p><p>这些问题使得Go无法利用多核，因此在Go 1.1版本中修复了。</p><h2 id="并发亲和性-Affinity-in-concurrency"><a href="#并发亲和性-Affinity-in-concurrency" class="headerlink" title="并发亲和性(Affinity in concurrency)"></a>并发亲和性(Affinity in concurrency)</h2><p>Go1.1带来了<a href="https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit?pli=1">新的调度器实现及本地协程队列的创建</a>。这个优化使用本地协程队列避免了对整个调度器加锁，并允许协程在相同的系统线程上运行。</p><p>由于线程会因系统调用而阻塞，且阻塞线程的数量是无限制的，Go引入了处理器(processor)的概念。一个处理器<code>P</code>表示一个运行的系统线程并管理者本地协程队列。新的图示：<br><img src="/images/golang/a_journey_with_go/cocurrency_scheduler_07.png"></p><p>这是用Go 1.1.2中新的调度器压测的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">name     time/op<br>Sieve    18.7s ± 0%<br>Sieve-2  8.26s ± 0%<br>Sieve-4  3.30s ± 0%<br>Sieve-8  2.64s ± 0%<br></code></pre></td></tr></table></figure><p>此时，Go真正发挥了多核的优势。CPU分析也改变了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Total: 630 samples<br>163  25.9%  25.9%      163  25.9% runtime.xchg<br>113  17.9%  43.8%      610  96.8% main.filter<br>93  14.8%  58.6%      265   42.1% runtime.chanrecv<br>87  13.8%  72.4%      206   32.7% runtime.chansend<br>72  11.4%  83.8%       72   11.4% dequeue<br>19   3.0%  86.8%       19    3.0% runtime.memcopy64<br>17   2.7%  89.5%      225   35.7% runtime.chansend1<br>16   2.5%  92.1%      280   44.4% runtime.chanrecv2<br>12   1.9%  94.0%      141   22.4% runtime.lock<br>9   1.4%  95.4%       98    15.6% runqput<br></code></pre></td></tr></table></figure><p>大部分锁相关的操作被移除了，<code>chanXXXX</code>相关的操作仅和管道相关。但是，若调度器优化了协程与线程间的亲和性，在某些场景下亲和性会被减弱。</p><h2 id="亲和性受限-Affinity-limitation"><a href="#亲和性受限-Affinity-limitation" class="headerlink" title="亲和性受限(Affinity limitation)"></a>亲和性受限(Affinity limitation)</h2><p>为理解亲和性受限，我们需要理解被放入本地和全局队列的东西是什么。所有操作，如管道/<code>select</code>阻塞，等待定时器，锁都会使用本地队列除了<code>系统调用</code>。因此，两个特性会限制协程和线程的亲和性：</p><ul><li>协程窃取。当处理器<code>P</code>没有足够的本地队列任务时，它会从其他<code>P</code>中窃取协程，若全局队列和network poller中都是空的。发生协程窃取时，协程会在另一个线程上运行。</li><li>系统调用。发生系统调用时(如文件操作，http调用，数据库操作等)，Go将运行的系统线程变更为阻塞状态，让另一个新的线程接管当前<code>P</code>进而处理本地写成队列。</li></ul><p>但，为了更好的管理本地队列的优先级，这两个限制可以避免。Go 1.5旨在给在管道中通信的协程更高的优先级，从而优化协程与线程的亲和性。</p><h2 id="排序以强化亲和性-Ordering-to-enhance-affinity"><a href="#排序以强化亲和性-Ordering-to-enhance-affinity" class="headerlink" title="排序以强化亲和性(Ordering to enhance affinity)"></a>排序以强化亲和性(Ordering to enhance affinity)</h2><p>在管道上来回通信的协程会频繁的阻塞，亦即频繁的重入本地队列。但，本地队列遵守<code>FIFO</code>原则，若有协程独占线程，被解锁的协程无法保证被及时执行。下图为被阻塞协程恢复可运行的例子：<br><img src="/images/golang/a_journey_with_go/cocurrency_scheduler_08.png"></p><p>在因管道阻塞后协程#9恢复了(管道接收到消息)。但，它必须等待协程#2，#5和#4结束才能运行。在这个例子中，协程#5将独占线程，使得协程#9被延期执行，从而有被其他线程窃取的风险。从Go 1.5开始，从阻塞管道返回的协程会有更高的优先级(通过处理器<code>P</code>的一个特殊属性实现)：<br><img src="/images/golang/a_journey_with_go/cocurrency_scheduler_09.png"></p><p>协程#9此时被标记为下一个可运行的。这个优先级特性使得协程能尽快被处理避免被再次阻塞。然后，其他协程才能获得运行时间。这个改变对<a href="https://github.com/golang/go/commit/e870f06c3f49ed63960a2575e330c2c75fc54a34">Go标准库有全面的积极影响</a>。</p><hr><ul><li>原文 <a href="https://medium.com/a-journey-with-go/go-concurrency-scheduler-affinity-3b678f490488">Go: Concurrency &amp; Scheduler Affinity</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gsignal，信号大师</title>
      <link href="/2021/03/16/gsignal%EF%BC%8C%E4%BF%A1%E5%8F%B7%E5%A4%A7%E5%B8%88/"/>
      <url>/2021/03/16/gsignal%EF%BC%8C%E4%BF%A1%E5%8F%B7%E5%A4%A7%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h2 id="注：该文章基于Go-1-13"><a href="#注：该文章基于Go-1-13" class="headerlink" title="注：该文章基于Go 1.13"></a>注：该文章基于Go 1.13</h2><p><code>signal</code>包提供了一些允许Go程序与信号量交互的方法。在深入前，我们先从这段监听器代码开始。</p><h2 id="信号订阅"><a href="#信号订阅" class="headerlink" title="信号订阅"></a>信号订阅</h2><p>我们使用通道(<code>channel</code>)来订阅信号。以下代码监听<code>中断信号</code>或<code>终端缩放</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;os/signal&quot;</span><br>    <span class="hljs-string">&quot;syscall&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>)<br><br>    s1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal, <span class="hljs-number">1</span>)<br>    signal.Notify(s1, syscall.SIGINT, syscall.SIGTERM)<br><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>        &lt;-s1<br>        fmt.Println(<span class="hljs-string">`/!\ The program is going to exit...`</span>)<br>        done &lt;- <span class="hljs-literal">true</span><br>    &#125;()<br><br>    s2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal, <span class="hljs-number">1</span>)<br>    signal.Notify(s2, syscall.SIGWINCH)<br><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span> &#123;<br>            &lt;- s2<br>            fmt.Println(<span class="hljs-string">`/!\ The terminal has been resized.`</span>)<br>        &#125;<br>    &#125;()<br><br>    &lt;- done<br>&#125;<br></code></pre></td></tr></table></figure><p>每个通道都有自己的事件逻辑，如图：<br><img src="/images/golang/a_journey_with_go/signal_events_diagram.png"></p><p>Go也提供了停止向通道发送通知的方法<code>Stop(os.Signal)</code>，或者忽略信号的方法<code>Ignore(...os.Signal)</code>。举例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;os/signal&quot;</span><br>    <span class="hljs-string">&quot;syscall&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>)<br><br>    s2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal, <span class="hljs-number">1</span>)<br>    signal.Notify(s2, syscall.SIGWINCH)<br>    signal.Ignore(syscall.SIGINT)<br><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>        &lt;- s2<br>        fmt.Println(<span class="hljs-string">`/!\ The terminal has been resized.`</span>)<br>        signal.Stop(s2)<br><br>        <span class="hljs-comment">// will block forever since we stop listening</span><br>        &lt;- s2<br>        done &lt;- <span class="hljs-literal">true</span><br>    &#125;()<br><br>    &lt;- done<br>&#125;<br></code></pre></td></tr></table></figure><p>这段程序无法通过<code>CTL+C</code>终止，而且在首次接收到终端缩放信号时，停止了该通道，导致其此后再接收不到任何信号。那么接下来，我们看看信号是如何被监听和处理的。</p><h2 id="gsignal"><a href="#gsignal" class="headerlink" title="gsignal"></a>gsignal</h2><p>在初始化阶段，<code>signal</code>派生了一个在循环中处理信号量的消费者协程。该协程处在休眠状态，直到接收到通知。过程如图：<br><img src="/images/golang/a_journey_with_go/gsignal_spawn_loop.png"></p><p>当信号发到达程序时，信号句柄将该信号量代理给一个特殊的协程<code>gsignal</code>。这个协程初始化时使用了一个很大的栈空间(32k，为满足不同操作系统的要求)，该栈大小固定不会再增长。每一个线程(图中标以M)都有一个<code>gsignal</code>协程来处理信号量。如图：<br><img src="/images/golang/a_journey_with_go/gsignal_spawn_loop_2.png"></p><p><code>gsignal</code>分析信号量并判断若能够被处理，则唤醒休眠的协程同时将信号量发送到队列。</p><p>同步信号量，如<code>SIGBUS</code>和<code>SIGFPE</code>，无法被处理并会导致panic。</p><p>然后，looping协程能够处理该信号。它找到订阅了该信号的第一个通道并将信号推送给它。<br><img src="/images/golang/a_journey_with_go/gsignal_spawn_loop_3.png"></p><p>处理信号的looping协程可以通过<code>go tool trace</code>可视化的观察。<br><img src="/images/golang/a_journey_with_go/gsignal_spawn_loop_5.png"></p><p>对<code>gsignal</code>加锁或阻塞会导致处理信号异常。同时因其有固定大小的栈空间，无法重分配内存。这就是为何在处理信号量的链路中需要两个独立的协程：一个协程将到达的信号尽快存储到队列，另一个协程循环的处理这个队列。</p><p>此时，我们可以对文中第一张图最终修改如下：<br><img src="/images/golang/a_journey_with_go/gsignal_spawn_loop_4.png"></p><hr><ul><li>原文 <a href="https://medium.com/a-journey-with-go/go-gsignal-master-of-signals-329f7ff39391">Go: gsignal, Master of Signals</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go协程是如何回收的</title>
      <link href="/2021/03/16/go%E5%8D%8F%E7%A8%8B%E6%98%AF%E5%A6%82%E4%BD%95%E5%9B%9E%E6%94%B6%E7%9A%84/"/>
      <url>/2021/03/16/go%E5%8D%8F%E7%A8%8B%E6%98%AF%E5%A6%82%E4%BD%95%E5%9B%9E%E6%94%B6%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h2 id="注：该文章基于Go-1-13"><a href="#注：该文章基于Go-1-13" class="headerlink" title="注：该文章基于Go 1.13"></a>注：该文章基于Go 1.13</h2><p><img src="/images/golang/a_journey_with_go/go_recycle_01.png"></p><p>协程很容易创建，有很小的初始栈空间，以及快速切换的上下文。大家都爱协程，但创建大量短命的协程，要花费时间去创建和销毁它们。</p><h2 id="协程的生命周期"><a href="#协程的生命周期" class="headerlink" title="协程的生命周期"></a>协程的生命周期</h2><p>下面通过一个小例子说明协程是如何被复用的。这是Go文档中的<a href="https://play.golang.org/p/9U22NfrXeq">一个示例</a>。<br><img src="/images/golang/a_journey_with_go/go_recycle_02.png"></p><p>程序中创建了大量的协程去过滤素数，Go负责这些协程的创建和销毁。实际上，Go维护了一个空闲协程的列表：<br><img src="/images/golang/a_journey_with_go/go_recycle_03.png"></p><p>每一个<code>P</code>维护自己的本地队列，在管理空闲协程时无需加锁。一个协程退出时，会被放置到本地队列中。<br><img src="/images/golang/a_journey_with_go/go_recycle_04.png"></p><p>但为了更高效的分发协程，调度器也有自己的列表。实际上是两个列表：一个基于栈实现的列表，一个非栈的列表。<br><img src="/images/golang/a_journey_with_go/go_recycle_05.png"></p><p>因为任何线程都可以访问他们，使用了锁来保护这两个列表，。当<code>P</code>的协程数超过64时，调度器从<code>P</code>的本地队列中获取协程放入中央列表。一次转移会抽取半数协程，那么<code>P</code>中将只剩于半数：<br><img src="/images/golang/a_journey_with_go/go_recycle_06.png"></p><p>从上面的描述中，这个工作流非常直白，但实际工作中根据协程的内存分配情况会有不同的操作对则。</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>回收协程能够节省再分配的开销。但，协程的栈空间是动态的，其工作时可能分配了很大的栈。回收协程时，Go不会保留其栈(超过默认2k时)。</p><p>上面计算素数的程序很简单，且不会增长协程的栈空间，Go可以直接重用它们。此处为压测结果：   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">With recycling               Without recycling<br>name           time/op       name           time/op<br>PrimeNumber     12.7s ± 3%   PrimeNumber     12.1s ± 3%<br>PrimeNumber-8   2.27s ± 4%   PrimeNumber-8   2.13s ± 3%<br><br>name           alloc/op      name           alloc/op<br>PrimeNumber    1.83MB ± 0%   PrimeNumber    5.82MB ± 4%<br>PrimeNumber-8  1.52MB ± 7%   PrimeNumber-8  5.90MB ±21%<br></code></pre></td></tr></table></figure><p>没有关闭协程回收的方法，作者通过直接修改go标准库来测试的。可以看见，协程回收减少了3M内存分配。</p><p>让我们再来看另一个使用大栈空间的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func ping() &#123;<br>   for i := 0; i &lt; 10; i++ &#123;<br>      var wg sync.WaitGroup<br>      for g := 0; g &lt; 10; g++ &#123;<br>         wg.Add(1)<br>         go func() &#123;<br>            _, err := http.Get(`https://httpstat.us/200`)<br>            if err != nil &#123;<br>               panic(err)<br>            &#125;<br>            wg.Done()<br>         &#125;()<br>      &#125;<br>      wg.Wait()<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>压测结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">With recycling               Without recycling<br>name           time/op       name           time/op<br>PingUrl     12.8s ± 2%       PingUrl     12.8s ± 3%<br>PingUrl-8   12.6s ± 0%       PingUrl-8   12.7s ± 3%<br><br>name           alloc/op      name           alloc/op<br>PingUrl    9.21MB ± 0%       PingUrl    9.44MB ± 0%<br>PingUrl-8  9.28MB ± 0%       PingUrl-8  9.43MB ± 0%<br></code></pre></td></tr></table></figure><p>由于栈空间很大，这里实际效果不明显。</p><hr><ul><li>原文 <a href="https://medium.com/a-journey-with-go/go-how-does-go-recycle-goroutines-f047a79ab352">Go: How Does Go Recycle Goroutines?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>g0一个特殊的协程.md</title>
      <link href="/2021/03/16/g0%E4%B8%80%E4%B8%AA%E7%89%B9%E6%AE%8A%E7%9A%84%E5%8D%8F%E7%A8%8B/"/>
      <url>/2021/03/16/g0%E4%B8%80%E4%B8%AA%E7%89%B9%E6%AE%8A%E7%9A%84%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="注：该文章基于Go-1-13"><a href="#注：该文章基于Go-1-13" class="headerlink" title="注：该文章基于Go 1.13"></a>注：该文章基于Go 1.13</h2><p>所有Go程序创建的协程都由内部调度器的管理。Go调度器尝试给<code>running</code>状态的协程分配运行时间。当协程被阻塞或中断时，使用<code>running</code>状态的协程保持CPU处于工作状态。Go调度器实际是一个特殊的协程。</p><h2 id="协程调度"><a href="#协程调度" class="headerlink" title="协程调度"></a>协程调度</h2><p><code>GOMAXPROCS</code>变量让Go可以限制系统线程数量。Go在每个运行的线程上调度和管理协程。这个角色，一个称为<code>g0</code>的特殊协程，是线程创建的地一个协程。<br><img src="/images/golang/a_journey_with_go/goroutine_g0_01.png"></p><p>然后，调度器将<code>ready</code>状态的协程分配到线程上运行。（参考 <code>P</code>,<code>M</code>,<code>G</code>模型）</p><p>为了更好的理解<code>g0</code>是如何调度的，我们来复习一下管道的使用过程:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ch := make(chan int)<br>[...]<br>ch &lt;- v<br></code></pre></td></tr></table></figure><p><strong>管道阻塞时，当前协程被暂停，如进入<code>waiting</code>状态，被不会被推入任何协程队列中。</strong><br><img src="/images/golang/a_journey_with_go/goroutine_g0_02.png"></p><p>然后，<code>g0</code>替换协程并进行第一轮调度。<br><img src="/images/golang/a_journey_with_go/goroutine_g0_03.png"></p><p>调度期间，本地队列<code>local queue</code>优先级较高，因此将运行<code>#2</code>协程。<br><img src="/images/golang/a_journey_with_go/goroutine_g0_04.png"></p><p>当管道读取到数据时，<code>#7</code>协程将解除阻塞。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">v ：= &lt;-ch<br></code></pre></td></tr></table></figure><p>协程接收到管道消息后，会将运行时切换到<code>g0</code>，并解除<code>#7</code>的阻塞再将其放到本地队列列首。<br><img src="/images/golang/a_journey_with_go/goroutine_g0_05.png"></p><p>虽然调度器负责所有协程的调度，但它还有很多其他工作。</p><h2 id="调度器的职责"><a href="#调度器的职责" class="headerlink" title="调度器的职责"></a>调度器的职责</h2><p>与常规协程不同，<code>g0</code>有一个固定且更大的栈空间。有些操作可能需要较大的栈空间，有些系统要求其栈空间不能增长。那么，<code>g0</code>协程主要有以下职责：</p><ul><li>负责协程的创建。当调用<code>go func()&#123; ... &#125;()</code>或 <code>go myFunction()</code>时，Go先将函数创建任何转给<code>g0</code>，再将其放入本地队列中。<br><img src="/images/golang/a_journey_with_go/goroutine_g0_06.png"></li></ul><p>新近创建的协程有更高的优先级，会被放置在本地队列的列首。</p><ul><li>分配 <code>defer</code> 函数。</li><li>垃圾收集，例如STW(stopping the world)，扫描协程栈空间，标记/清楚操作等。</li><li>栈空间增长。当协程需要更大的栈空间时，This operation is done by g0 in the prolog functions</li></ul><p>另外还有诸如超大内存分配，cgo等，这个有着较大栈空间的特殊协程保证了我们的Go程序高效的运行。</p><hr><ul><li>原文 <a href="https://medium.com/a-journey-with-go/go-g0-special-goroutine-8c778c6704d8">Go: g0, Special Goroutine</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协程切换到底做了啥</title>
      <link href="/2021/03/16/%E5%8D%8F%E7%A8%8B%E5%88%87%E6%8D%A2%E5%88%B0%E5%BA%95%E5%81%9A%E4%BA%86%E5%95%A5/"/>
      <url>/2021/03/16/%E5%8D%8F%E7%A8%8B%E5%88%87%E6%8D%A2%E5%88%B0%E5%BA%95%E5%81%9A%E4%BA%86%E5%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="注：该文章基于Go-1-13"><a href="#注：该文章基于Go-1-13" class="headerlink" title="注：该文章基于Go 1.13"></a>注：该文章基于Go 1.13</h2><p>Go协程很小，启动仅需2Kb栈空间。协程也很轻，从一个协程切换到另一个协程不需要很多操作。在深入协程切换前，我们先从高层复习下切换是如何工作的。</p><p>建议结合<a href="https://medium.com/a-journey-with-go/go-what-does-a-goroutine-switch-actually-involve-394c202dddb7">Go: Goroutine, OS Thread and CPU Management</a>一起阅读本文章。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>Go调度器将协程分配到线程上执行，依据以下两类：</p><ul><li>当协程阻塞时：系统调用，mutex锁，或者协程。被阻塞的协程进入休眠状态/放入一个队列中，并允许Go调度并运行其他等待中的协程。</li><li>在函数调用时，若在初始阶段，协程需要扩展其栈空间。该中断允许调度器运行其他协程，避免当前写成独占CPU。</li></ul><p>以上场景中，调度器<code>g0</code>负责将当前协程替换为其他协程并准备运行之。然后，被替换的协程取代<code>g0</code>在线程上运行。</p><p>将<code>running</code>协程替换为其他协程，涉及两个切换：</p><ul><li><p><code>running</code>协程切换为<code>g0</code>:<br><img src="/images/golang/a_journey_with_go/goroutine_switch_01.png"></p></li><li><p><code>g0</code>切换为下一个协程<code>g</code>：<br><img src="/images/golang/a_journey_with_go/goroutine_switch_02.png"></p></li></ul><p>在Go语言中，切换协程是轻量的。保存协程状态需要两样东西：</p><ul><li>在被取消调度前，协程停止的行号。当前执行指令被记录在程序计数器中(PC)。协程稍后会在相同的位置恢复。</li><li>协程栈空间，用以再次执行时恢复变量。</li></ul><p>来看个例子</p><h2 id="程序计数器-Program-counter"><a href="#程序计数器-Program-counter" class="headerlink" title="程序计数器(Program counter)"></a>程序计数器(Program counter)</h2><p>例子中，一个写成生产数据，另一个消费数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;sync&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br>    c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br><br>    wg.Add(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++&#123;<br>            c &lt;- i<br>        &#125;<br>        <span class="hljs-built_in">close</span>(c)<br><br>        wg.Done()<br>    &#125;()<br><br>    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++ &#123;<br>        wg.Add(<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">for</span> v:=<span class="hljs-keyword">range</span> c &#123;<br>                <span class="hljs-keyword">if</span> v%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>                    <span class="hljs-built_in">println</span>(v)<br>                &#125;<br>            &#125;<br>            wg.Done()<br>        &#125;()<br>    &#125;<br><br>    wg.Wait()<br>&#125;<br></code></pre></td></tr></table></figure><p>程序将打印出1~99的偶数。先看第一个协程-生产者-将数字添加到管道(带缓冲的管道)。当管道装满时，数据放送方将被阻塞。同事，Go将切换到<code>go</code>并调度另一个协程来工作。</p><p>根据上文的知识，此时，Go需要保存当前操作以便恢复时能继续v执行。程序计数器(PC)被保存为协程的一个内部结构体。此处为图示：<br><img src="/images/golang/a_journey_with_go/goroutine_switch_03.png"></p><p>可以使用<code>go tool objdump</code>命令查看指令及其地址信息。此处以生产者为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">go tool compile -N -l 1.go<br>go tool objdump 1.o<br></code></pre></td></tr></table></figure><p><img src="/images/golang/a_journey_with_go/goroutine_switch_04.png"></p><p>程序逐个指令执行，直到被函数<code>runtime.channelsend1</code>阻塞。Go将当前程序计数器保存到协程的内部属性中。本例中，程序计数器被保存到地址<code>0x4268d0</code>：<br><img src="/images/golang/a_journey_with_go/goroutine_switch_05.png"></p><p>然后，<code>g0</code>协程唤醒休眠的协程，执行同样的质量，循环数字并推入管道。接下来，我们看看协程切换时的站空间管理。</p><h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h2><p>在被阻塞前，<code>running</code>协程有它自己的栈空间。其中包含临时内存，如变量<code>i</code>：<br><img src="/images/golang/a_journey_with_go/goroutine_switch_06.png"></p><p>然后，当管道阻塞时，协程及其栈被切换到<code>g0</code>(<code>g0</code>有一个更大的栈空间)：<br><img src="/images/golang/a_journey_with_go/goroutine_switch_07.png"></p><p>协程切换前，栈空间会被保存以便恢复协程时可以继续执行：<br><img src="/images/golang/a_journey_with_go/goroutine_switch_08.png"></p><p>现在，我们对协程切换有了一个完整的认识。我们来看看它是如何影响性能的。</p><h2 id="操作-Operations"><a href="#操作-Operations" class="headerlink" title="操作(Operations)"></a>操作(Operations)</h2><p>我们继续使用上面的代码测量协程切换消耗的时间。因查找下一个待调度协程需要时间，因此这个例子中的测量结果不是太精准。从函数的prolog切换比从阻塞的管道切换协程，要花费更多的操作。</p><p>总结一下待测量的操作：</p><ul><li>当前被管道阻塞的协程<code>g</code>，切换到<code>g0</code>协程：<ul><li><code>PC</code>和栈指针一起被保存到内部结构体</li><li><code>g0</code>被设置为<code>running</code>协程</li><li><code>g0</code>的栈空间替换当前栈空间</li></ul></li><li><code>g0</code>查找下一个待调度协程。</li><li><code>g0</code>与待调度协程切换：<ul><li><code>PC</code>和栈指针从内部结构体中恢复。</li><li>程序跳至<code>PC</code>指针位置执行</li></ul></li></ul><p><img src="/images/golang/a_journey_with_go/goroutine_switch_09.png"></p><p>协程切换，从<code>g</code>到<code>g0</code>或从<code>g0</code>到<code>g</code>是最快的阶段。仅包含有限的几个指令，而调度器查找下一个协程需要很多操作。查找待调度协程甚至需要更多时间，这取决于运行的程序。</p><p>图示的测试结果，给出了性能的数量级示意。通常也没有标准的工具来做这么测量。当然测量结果也与架构相关(作者使用的是 Mac 2.9GHz 双核i5)。</p><hr><ul><li>原文 <a href="https://medium.com/a-journey-with-go/go-what-does-a-goroutine-switch-actually-involve-394c202dddb7">Go: What Does a Goroutine Switch Actually Involve?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go协程是如何启动和退出的</title>
      <link href="/2021/03/16/go%E5%8D%8F%E7%A8%8B%E6%98%AF%E5%A6%82%E4%BD%95%E5%90%AF%E5%8A%A8%E5%92%8C%E9%80%80%E5%87%BA%E7%9A%84/"/>
      <url>/2021/03/16/go%E5%8D%8F%E7%A8%8B%E6%98%AF%E5%A6%82%E4%BD%95%E5%90%AF%E5%8A%A8%E5%92%8C%E9%80%80%E5%87%BA%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h2 id="注：该文章基于Go-1-14"><a href="#注：该文章基于Go-1-14" class="headerlink" title="注：该文章基于Go 1.14"></a>注：该文章基于Go 1.14</h2><p>在Go语言中，go协程是携带当前运行程序信息(诸如栈、程序计数器、或其当前OS线程)的结构体。Go调度器依据这些信息给其分配运行时间。调度器也需要关注这些协程的开始与退出，这两个阶段需要非常细致的管理。</p><p>关于栈和程序计数器，推荐阅读作者的另一篇文章<a href="https://medium.com/a-journey-with-go/go-what-a-goroutine-switch-actually-involve-394c202dddb7">Go: What Does a Goroutine Switch Actually Involve?</a></p><h2 id="协程启动"><a href="#协程启动" class="headerlink" title="协程启动"></a>协程启动</h2><p>启动协程非常简单。用代码举例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;sync&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> wg sync.WaitGroup<br>    wg.Add(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;goroutine is running...&quot;</span>)<br>        wg.Done()<br>    &#125;()<br><br>    <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;main is running...&quot;</span>)<br>    <br>    wg.Wait()<br>&#125;<br></code></pre></td></tr></table></figure><p><code>main</code>程序在打印之前启动了一个协程。由于Go协程有其自己的运行时间，Go通知运行时(<code>runtime</code>)创建一个新的协程即：</p><ul><li>创建stack</li><li>收集当前程序的计数器或调用方的数据。</li><li>更新协程的内部数据，如<code>ID</code>或<code>状态</code>。</li></ul><p>但协程并不会立即获得运行时间。新创建的协程会入队到本地队列列首，并在调度器的下一轮调度时执行。下图是该状态的图示：<br><img src="/images/golang/a_journey_with_go/goroutine_scheduler_running.png"></p><p>将其放置在队首使得该协程在当前协程结束后会首先被执行。该协程要么在当前线程被执行，要么在其他线程执行(若发生了<a href="https://medium.com/a-journey-with-go/go-what-a-goroutine-switch-actually-involve-394c202dddb7">线程窃取</a>)。</p><p>协程创建过程在汇编代码中也能找到：<br><img src="/images/golang/a_journey_with_go/goroutine_creation_assembly.png"></p><p>一旦协程被创建且入队后，就继续执行<code>main</code>函数的后续代码。</p><h2 id="协程退出"><a href="#协程退出" class="headerlink" title="协程退出"></a>协程退出</h2><p>一个协程终止时，为避免浪费CPU时间，Go必须调度其他协程继续工作。也会保留这个协程以便之后<a href="https://medium.com/a-journey-with-go/go-how-does-go-recycle-goroutines-f047a79ab352">重用</a>。</p><p>Go需要一种方式来感知到协程的退出。该控制方法在协程创建时已确定。当协程创建时，在将程序计数器指向真实被调函数前，Go在栈中设置了<code>goexit</code>函数。则巧妙的使得协程终止工作时一定会调用<code>goexit</code>函数。下面的代码可以观察这个过程：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;runtime&quot;</span><br>    <span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> wg sync.WaitGroup<br>    wg.Add(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">var</span> skip <span class="hljs-type">int</span><br><br>        <span class="hljs-keyword">for</span> &#123;<br>            _, file, line, ok := runtime.Caller(skip)<br>            <span class="hljs-keyword">if</span> !ok &#123;<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>            fmt.Printf(<span class="hljs-string">&quot;%s:%d\n&quot;</span>, file, line)<br>            skip++<br>        &#125;<br>        wg.Done()<br>    &#125;()<br><br>    <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;main is running...&quot;</span>)<br><br>    wg.Wait()<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为其调用栈信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/app/straysh/docs/translation/1.go:17<br>/home/uos/.gvm/gos/go1.14/src/runtime/asm_amd64.s:1373<br></code></pre></td></tr></table></figure><p><code>src/runtime/asm_amd64.s</code>的代码如下<br><img src="/images/golang/a_journey_with_go/asm_amd64_assembly.png"></p><p>然后Go会切换到<code>go</code>去调度另一个协程。</p><p>也可以通过手动调用<code>runtime.Goexit()</code>来结束一个协程:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;runtime&quot;</span><br>    <span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> wg sync.WaitGroup<br>    wg.Add(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">defer</span> wg.Done()<br>        runtime.Goexit()<br>        <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;never executed&quot;</span>)<br>    &#125;()<br><br>    <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;main is running...&quot;</span>)<br><br>    wg.Wait()<br>&#125;<br></code></pre></td></tr></table></figure><p>该函数会首先执行defer函数，然后继续执行调用该协程前的函数。</p><hr><ul><li>原文 <a href="https://medium.com/a-journey-with-go/go-how-does-a-goroutine-start-and-exit-2b3303890452">Go: How Does a Goroutine Start and Exit?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>角度变了,很多事情就看懂了!</title>
      <link href="/2020/03/23/%E8%A7%92%E5%BA%A6%E5%8F%98%E4%BA%86-%E5%BE%88%E5%A4%9A%E4%BA%8B%E6%83%85%E5%B0%B1%E7%9C%8B%E6%87%82%E4%BA%86/"/>
      <url>/2020/03/23/%E8%A7%92%E5%BA%A6%E5%8F%98%E4%BA%86-%E5%BE%88%E5%A4%9A%E4%BA%8B%E6%83%85%E5%B0%B1%E7%9C%8B%E6%87%82%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h2 id="文章来源：微信文章"><a href="#文章来源：微信文章" class="headerlink" title="文章来源：微信文章"></a>文章来源：<a href="https://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=2650666921&idx=1&sn=99efa7e4ceec8d179e4d3b14351fdef6&chksm=87d12af6b0a6a3e055f188f1f25bd84d2997ac3dfe2a9e01e7127ba970a2f3188c1f8cd6457a&mpshare=1&scene=1&srcid=&sharer_sharetime=1584807056213&sharer_shareid=0a5f0581869913747e54ca097f77ea2b&key=0a52bed5812f2e139f428d868bc5a59089131145dcbe1c1bbcd3bc511c4d7c31697721c88161cdc21136a87dc0522d31a09fc8f8cc55b9471199daaf31baad61bc1d50b139aac5fc00768f7bc63e274c&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=62080079&lang=zh_CN&exportkey=ASZxqHRl2ASG0aajhOB17Oo=&pass_ticket=le0oG8vyJ1XPN9ydtkj7TXWbI8Qkd0456twleOdS/KfVRqLjCTA9U9sENC6F2DaZ">微信文章</a></h2><h2 id="角度变了，很多事情就看懂了！"><a href="#角度变了，很多事情就看懂了！" class="headerlink" title="角度变了，很多事情就看懂了！"></a>角度变了，很多事情就看懂了！</h2><p>普通人和高手之间的差距在哪里？  </p><p>在于能不能拥有自己独立清晰的判断和观点。不盲目跟风，不人云亦云。</p><p>这是从 1 楼爬到 10 楼，从普通到优秀。</p><p>那高手和顶尖高手的差距在哪里？</p><p>在于能不能同时拥有自己和他人的观点，把自己放进别人的鞋子里，不以自我为中心。</p><p>这是从10楼爬到100楼，从优秀到极致。</p><h1 id="两幅地图"><a href="#两幅地图" class="headerlink" title="两幅地图"></a><strong>两幅地图</strong></h1><p>最近，疫情继续在全球扩散。  </p><p>我们常听新闻里说，欧美等“西方国家”情况危急，像中国这样的“远东国家”，疫情得到了有效控制。</p><p>但是你有没有想过，为什么？</p><p>为什么欧美是“西方”，中国是“远东”？</p><p>如果我们看地图，明明美国在地图最右侧，更偏“东方”啊！</p><p>为什么美国不是“东方国家”，而是“西方国家”？</p><p><img src="/images/misc/worldmap001.jpg" alt="worldmap001"><br>答案，其实也在我们使用的世界地图里。</p><p>各国使用的世界地图基本是两种：</p><p>一种是以太平洋为中心的世界地图，亚洲的一些国家，大多使用的是这种世界地图。</p><p>另一种是以大西洋为中心的世界地图，西方和美洲国家，大多使用这种世界地图。</p><p>亚洲一些国家以太平洋为中心来绘制世界地图，这样这些国家就处于地图的中央，象征着世界的中心。</p><p>同样，欧美国家以大西洋为中心来绘制世界地图，这样他们就处于地图的中央，象征着他们是世界的中心。</p><p>回到开头的问题，为什么美国是“西方国家”？</p><p>因为我们中国人，其实也是站在大西洋为中心的世界地图角度来看的：</p><p>在这张地图上，美国不在中国的东面，而在西面。</p><p><img src="/images/misc/worldmap002.jpg" alt="worldmap002"><br>明白这个道理，就知道很多时候我们喜欢以自己为中心审视问题、价值取舍、处理矛盾。</p><p>所以，英国的“群体免疫”，意大利的“全国封城”，美国宣布进入“紧急状态”，站在我们的角度可能是不合理的，站在他们的角度，也许是有原因的。</p><p>再比如，特朗普发了推特，把新冠病毒称为“中国病毒”。为什么？</p><p>他完全以自我为中心，这一招把内部矛盾，转移为外部矛盾，果然迎来了很多民族主义者的点赞。但实际上，这招太阴损，太恶毒了。</p><p><img src="/images/misc/trump_twitter_001.jpg" alt="trump_twitter_001"><br>（图片来自网络）</p><h1 id="一次辩论"><a href="#一次辩论" class="headerlink" title="一次辩论"></a><strong>一次辩论</strong></h1><p>我目睹过一次辩论，一身冷汗。  </p><p>张伟俊老师是中国第一位私人董事会教练。有一次，他受邀主持了一场企业家辩论会。</p><p>这些平常在自己公司永远伟大、光荣、正确的企业家们坐在一起，谁都不能说服谁。</p><p>他们越辩越激动，辩得脸红脖子粗，我看差点就快打起来了。</p><p>然后，然后，张伟俊突然叫停辩论，说：</p><p>“下一个环节，交换观点，继续辩论。”</p><p>听完之后，人都傻了。</p><p>稍微停顿后，大家又唇枪舌剑起来，开始帮对方自圆其说，又差点要打起来。</p><p>这对在场的企业家们，是深刻的一课。</p><p>你是以自我为中心，还是能换个角度站在他人的立场去考虑问题？</p><p>你捍卫的是自己的观点，还仅仅是自己的尊严？</p><p>你捍卫的是自己的屁股，还是脑袋？</p><p>换个角度看世界，你会看到完全不一样的世界。</p><h1 id="三个场景"><a href="#三个场景" class="headerlink" title="三个场景"></a><strong>三个场景</strong></h1><p>所以，设计产品、亲密关系、教育孩子，都是如此。  </p><p>我们总爱站在自己的视角来解决问题，而不是真正站在用户的视角来解决需求。</p><p>我们总爱站在自己的视角说多喝热水，而不是真正站在对方的视角来嘘寒问暖。</p><p>我们总爱站在自己的视角来决定爱好，而不是真正站在孩子的视角问是否喜欢。</p><p>这也是为什么，世界上总有“自嗨”的产品，教不好的“坏小孩”，和永远教不会的“直男”。</p><p>这是非常容易犯的错误，不能实现自己想要的结果。</p><p>即使实现了，也极大造成成本的剧烈攀升。</p><p>如果能换个角度看问题，是提升，更是跃升。视角不同，视野不同，结果也会天差地别。</p><h1 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a><strong>最后的话</strong></h1><p>人和人之间的差距在哪里？  </p><p>在于是站在 1 楼，还是 10 楼，还是 100 楼看事物。</p><p>有的人终其一生的努力，都只是站在 1 楼的视角看外面，看到的都是细节，自己附近那点东西，市井吵架，违章停车。</p><p>有的人努力向上攀登，站在 10 楼的视角看外面，开始能逐渐看到局部，轮廓关联浮现。</p><p>有的人比你更优秀，还比你更勤奋更努力，他爬到了 100 楼看世界。</p><p>他看到的是全局，开始体会自然资源的分布，城市设计的气概和俯瞰世界的万丈豪情。</p><p>站在 100 楼视角审视天下的人，可以决定一场战争的走向。</p><p>站在 10 楼视角观察天下的人，可以决定一场战役的胜负。</p><p>站在 1 楼视角面对天下的人，可以决定一场战斗的起止。</p><p>当你在 1 楼时，要更愿意主动跑到 5 楼、8 楼、10 楼，去看看都能望到些什么。再回到 1 楼执行时，会更理解不同角度看待问题的深度，并且不会遗忘细节。</p><p>希望你能拥有上帝视角，能瞬间把自己拉到空中俯视全局。希望你能拥有操盘手技能，能瞬间俯冲到地面死磕细节。希望你能知道什么时候该在空中，什么时候该在地面。</p><p>人与人之间的差距，在于看事物的角度不同。角度变了，视野变了，很多事情就看懂了。看懂了，也就知道该怎么做了。</p><hr><h2 id="文章来源：微信文章-1"><a href="#文章来源：微信文章-1" class="headerlink" title="文章来源：微信文章"></a>文章来源：<a href="https://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=2650666921&idx=1&sn=99efa7e4ceec8d179e4d3b14351fdef6&chksm=87d12af6b0a6a3e055f188f1f25bd84d2997ac3dfe2a9e01e7127ba970a2f3188c1f8cd6457a&mpshare=1&scene=1&srcid=&sharer_sharetime=1584807056213&sharer_shareid=0a5f0581869913747e54ca097f77ea2b&key=0a52bed5812f2e139f428d868bc5a59089131145dcbe1c1bbcd3bc511c4d7c31697721c88161cdc21136a87dc0522d31a09fc8f8cc55b9471199daaf31baad61bc1d50b139aac5fc00768f7bc63e274c&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=62080079&lang=zh_CN&exportkey=ASZxqHRl2ASG0aajhOB17Oo=&pass_ticket=le0oG8vyJ1XPN9ydtkj7TXWbI8Qkd0456twleOdS/KfVRqLjCTA9U9sENC6F2DaZ">微信文章</a></h2>]]></content>
      
      
      <categories>
          
          <category> 杂记 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂 </tag>
            
            <tag> Banbrick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019反思</title>
      <link href="/2020/03/10/2019%E5%8F%8D%E6%80%9D/"/>
      <url>/2020/03/10/2019%E5%8F%8D%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<p>持续整理中，无法阅读</p><h1 id="提现-总结和反思失误"><a href="#提现-总结和反思失误" class="headerlink" title="提现 - 总结和反思失误"></a>提现 - 总结和反思失误</h1><h1 id="LBS-研究网格"><a href="#LBS-研究网格" class="headerlink" title="LBS - 研究网格"></a>LBS - 研究网格</h1><ul><li><a href="https://blog.hxsen.com/article/81.html">https://blog.hxsen.com/article/81.html</a></li><li><a href="https://www.jianshu.com/p/ec612d4982b9">https://www.jianshu.com/p/ec612d4982b9</a></li><li><a href="https://www.jianshu.com/u/513quchu202559d5c">https://www.jianshu.com/u/513quchu202559d5c</a></li><li><a href="https://www.jianshu.com/p/ab314e21fa0e">https://www.jianshu.com/p/ab314e21fa0e</a></li><li><a href="https://www.cnblogs.com/jifeng/p/4356006.html">https://www.cnblogs.com/jifeng/p/4356006.html</a></li><li><a href="https://blog.csdn.net/fdipzone/article/details/53896842">https://blog.csdn.net/fdipzone/article/details/53896842</a></li><li><a href="https://blog.intelligentbee.com/2017/09/14/get-nearby-locations-mysql-database/">https://blog.intelligentbee.com/2017/09/14/get-nearby-locations-mysql-database/</a></li><li><a href="https://stackoverflow.com/questions/2234204/find-nearest-latitude-longitude-with-an-sql-query">https://stackoverflow.com/questions/2234204/find-nearest-latitude-longitude-with-an-sql-query</a></li><li><a href="https://dba.stackexchange.com/questions/4214/how-to-best-implement-nearest-neighbour-search-in-mysql">https://dba.stackexchange.com/questions/4214/how-to-best-implement-nearest-neighbour-search-in-mysql</a></li><li><a href="https://weixin.sogou.com/weixin?type=2&amp;s_from=input&amp;query=mysql+%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96&amp;ie=utf8&amp;_sug_=y&amp;_sug_type_=&amp;w=01019900&amp;sut=1845&amp;sst0=1582784283384&amp;lkt=1,1582784283281,1582784283281">https://weixin.sogou.com/weixin?type=2&amp;s_from=input&amp;query=mysql+%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96&amp;ie=utf8&amp;_sug_=y&amp;_sug_type_=&amp;w=01019900&amp;sut=1845&amp;sst0=1582784283384&amp;lkt=1%2C1582784283281%2C1582784283281</a></li></ul><h1 id="轨迹-数据存储"><a href="#轨迹-数据存储" class="headerlink" title="轨迹 - 数据存储"></a>轨迹 - 数据存储</h1><h1 id="RabbitMQ-模拟异步-事件广播-逻辑解耦"><a href="#RabbitMQ-模拟异步-事件广播-逻辑解耦" class="headerlink" title="RabbitMQ - 模拟异步/事件广播/逻辑解耦"></a>RabbitMQ - 模拟异步/事件广播/逻辑解耦</h1><h1 id="MQTT-长链接推送"><a href="#MQTT-长链接推送" class="headerlink" title="MQTT - 长链接推送"></a>MQTT - 长链接推送</h1><h1 id="Etcd-配置中心"><a href="#Etcd-配置中心" class="headerlink" title="Etcd - 配置中心"></a>Etcd - 配置中心</h1><h1 id="工具-群通知-阿里云工具sdk"><a href="#工具-群通知-阿里云工具sdk" class="headerlink" title="工具 - 群通知/阿里云工具sdk"></a>工具 - 群通知/阿里云工具sdk</h1>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BlowFish_https_ssl</title>
      <link href="/2020/03/10/BlowFish-https-ssl/"/>
      <url>/2020/03/10/BlowFish-https-ssl/</url>
      
        <content type="html"><![CDATA[<h1 id="SSL到底用的哪个SSL证书端口"><a href="#SSL到底用的哪个SSL证书端口" class="headerlink" title="SSL到底用的哪个SSL证书端口"></a>SSL到底用的哪个SSL证书端口</h1><h1 id="看看啥是“SSL证书端口”"><a href="#看看啥是“SSL证书端口”" class="headerlink" title="看看啥是“SSL证书端口”"></a>看看啥是“SSL证书端口”</h1><p>常有人问“SSL到底使用的是哪个端口？”，或者“常用的SSL证书端口是哪些？”。答案是没有。<code>SSL/TLS</code>本身不使用任何端口，而<code>HTTPS</code>使用443端口。</p><p><code>SSL/TLS</code>是基础设施，允许其他协议如<code>HTTPS</code>或<code>DNS</code>等基于<code>TLS</code>工作。这些协议各自使用特定的端口，但<code>SSL/TLS</code>并不需要。</p><h1 id="两个不同的术语：SSL证书端口-vs-HTTPS端口"><a href="#两个不同的术语：SSL证书端口-vs-HTTPS端口" class="headerlink" title="两个不同的术语：SSL证书端口 vs HTTPS端口"></a>两个不同的术语：SSL证书端口 vs HTTPS端口</h1><p>通常我们把TLS证书叫作SSL证书。因此当我们提到”SSL证书443端口”一点也不奇怪。只需要记住，当有人提到SSL证书端口，通常是指HTTPS。</p><p><del>端口也指代软件用来与硬件通信的内存地址。在此处特指<code>I/O</code>地址。</del></p><p>在进入故宫前，会有栅栏把人群分成若干组，否则人群蜂拥向大门简直是灾难。这个比喻并100%准确，但是端口差不多就是这些栅栏的作用。端口来管控数据的收发。HTTP使用80端口通信。HTTPS使用443端口通信。这就是为啥老说SSL证书端口443了。</p><h1 id="HTTPS-SSL证书端口有多少个？"><a href="#HTTPS-SSL证书端口有多少个？" class="headerlink" title="HTTPS/SSL证书端口有多少个？"></a>HTTPS/SSL证书端口有多少个？</h1><p>专家将网络链接划分为四层（若基于OSI则是七层）。<a href="/2020/02/27/%E7%BD%91%E7%BB%9C-tcp-udp/#TCP-UDP%E5%B7%A5%E4%BD%9C%E5%9C%A8%E4%BC%A0%E8%BE%93%E5%B1%82">端口在传输层使用</a>。<br>一共有<code>65535</code>个端口，从<code>0000h</code>到<code>FFFFh</code>。</p><table><tr><th>PORT #</th><th>功能</th></tr><tr><td>80</td><td>HTTP</td></tr><tr><td>443</td><td>SSL</td></tr><tr><td>21</td><td>FTP</td></tr><tr><td>990</td><td>FTPs</td></tr><tr><td>22</td><td>SFTP/SSH</td></tr><tr><td>3306</td><td>MySQL</td></tr></table><p>SSL(和后继者TLS)直接工作在TCP协议上。因此更高层的协议如HTTP可以无需修改的提供安全连接。在SSL层下的HTTP即HTTPS。</p><p>正确使用SSL/TLS后，攻击者只能从链路中看到IP地址和端口号，传输数据的估算大小，加密方式和压缩方式。黑客也可以终止连接，这样做的话客户端和服务端都将知道被第三方介入了。</p><p>通常，攻击者也能得到你请求的域名，但URL中其他部分并不能看到。HTTPS本身并不会暴露域名，但浏览器会首先使用域名去获取IP地址。</p><h1 id="对协议的高层级描述"><a href="#对协议的高层级描述" class="headerlink" title="对协议的高层级描述"></a>对协议的高层级描述</h1><p>在建立TCP连接后，由客户端发起SSL握手。客户端会发送一些规范：</p><ul><li>使用的SSL/TLS版本</li><li>期望使用何种加密算法（提供一个列表供选择）</li><li>期望使用何种压缩算法（提供一个列表供选择）</li></ul><p>服务器会挑选出自己支持的SSL/TLS版本中最高的，从客户端提供的加密套件集合中挑选一套，并从中随机挑选一种压缩算法。</p><p>做完这些基础设置后，服务器向客户端发送它的证书<code>certiticate</code>。该证书要么被客户端信任，要么被浏览器信任的第三方证书机构信任。例如，若客户端信任GeoTrust，那么浏览器可以信任google.com，因为GeoTrust签发了Google的证书。</p><p>客户端验证了证书且确认服务器是其自称的服务器后，会生成一个随机秘钥<code>randomkey</code>，并使用接收的服务器公钥(或其他<code>PreMasterSecret</code>，取决于使用的密码套件)加密，发送到服务器。服务器使用私钥解密出秘钥<code>randomkey</code>。此时，双方可以使用该秘钥来安全的传输数据了。<br><img src="/images/linux/tls_ssl_encryption.png" alt="tls_ssl_encryption"></p><hr><p>名词解释：</p><ol><li>SSL - 该协议会给客户端与服务器之间的通信进行加密，保障通信的安全</li><li>TLS - 是SSL的一个新版本，该协议与SSL 3.0之间的差异并不显著，但这些差异的存在，已使得TLS 1.0和SSL 3.0之间不能互操作</li></ol><p>所以，目前当谈论SSL时实际指TLS。</p><p>参考资料：</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BlowFish_Gin源码阅读</title>
      <link href="/2020/03/08/BlowFish-Gin%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
      <url>/2020/03/08/BlowFish-Gin%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>持续整理中，不适合阅读</p><h1 id="GIN版本-commithash-a71af9c144f9579f6dbe945341c1df37aaf09c0d"><a href="#GIN版本-commithash-a71af9c144f9579f6dbe945341c1df37aaf09c0d" class="headerlink" title="GIN版本 commithash a71af9c144f9579f6dbe945341c1df37aaf09c0d"></a>GIN版本 commithash a71af9c144f9579f6dbe945341c1df37aaf09c0d</h1><h1 id="Gin框架的特点"><a href="#Gin框架的特点" class="headerlink" title="Gin框架的特点"></a>Gin框架的特点</h1><ul><li>快：路由使用<code>radix trie</code>实现，检索路径短。无反射。API性能可预测。</li><li>支持中间件：请求可以有多个中间件逐个处理，最后交给业务处理。例如：<code>Logger</code>,<code>Authorization</code>,<code>GZIP</code>,最后写入数据库。</li><li>若发生了<code>panic</code>，Gin可以捕获并恢复错误，因此服务并不会终止，且可有机会介入错误恢复的过程。</li><li>JSON校验：Gin可以解析并校验请求的json数据，例如检查字段值。</li><li>路由分组：更好的组织路由。通过分组将需要鉴权和不需鉴权的路由分开，分组可以无限嵌套且不影响性能。</li><li>错误管理：Gin可以和很方便的收集错误信息。最后使用中间件将错误写入文件或数据库或发送到网络上。</li><li>内置视图渲染：提供了易用的接口来渲染<code>JSON</code>，<code>XML</code>和<code>HTML</code>。</li><li>可扩展：自定义中间件非常容易。</li></ul><h1 id="源代码阅读"><a href="#源代码阅读" class="headerlink" title="源代码阅读"></a>源代码阅读</h1><h2 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h2><h3 id="Socket-Server-VS-HTTP-Server"><a href="#Socket-Server-VS-HTTP-Server" class="headerlink" title="Socket Server VS HTTP Server"></a>Socket Server VS HTTP Server</h3><p>HTTP是<a href="/2020/02/27/%E7%BD%91%E7%BB%9C-tcp-udp/#TCP-UDP%E5%B7%A5%E4%BD%9C%E5%9C%A8%E4%BC%A0%E8%BE%93%E5%B1%82">应用层协议</a>；Socket是系统提供的抽象接口，它直接操作传输层协议(如<code>TCP</code>、<code>UDP</code>等)来工作。它们不是一个层级上的概念。<br>所以，只要Socket两端不主动关闭连接，就可以通过TCP连接来双向通信。<br>而HTTP服务器则按照HTTP协议来通信：<code>建立TCP连接 🡺 客户端发送报文 🡺 服务器相应报文 🡺 客户端或服务器关闭连接</code>。每一个请求都要重复这个过程。虽说TCP协议是长连接的，但上层的HTTP协议会主动关闭它。<br>另外HTTP中有一个<code>Connection: keep-alive</code>头信息，来重用连接，减少创建连接的消耗。它受到重用次数和超时时间的限制(服务器设置)，触发限制时仍会主动断开连接。因此这个所谓的”长连接”和Socket长连接的本质是不同的。</p><p>Socket Server例子，内层的for循环读并不会主动关闭连接(不发生panic时)</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    srv, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:8080&quot;</span>) <span class="hljs-comment">// 协议，端口</span><br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-built_in">panic</span>(err)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> srv.Close()<br><br>    <span class="hljs-keyword">for</span> &#123;<br>        conn, err := srv.Accept() <span class="hljs-comment">// 监听连接</span><br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;accept failed:&quot;</span>, err.Error())<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br><br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c net.Conn)</span></span>&#123;<br>            <span class="hljs-keyword">defer</span> c.Close()<br>            buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)<br>            <span class="hljs-keyword">for</span> &#123;<br>                n, err := c.Read(buf) <span class="hljs-comment">// 尝试读数据</span><br>                <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                    fmt.Println(<span class="hljs-string">&quot;read failed:&quot;</span>, err.Error())<br>                    <span class="hljs-keyword">continue</span><br>                &#125;<br><br>                receiveData := buf[:n] <span class="hljs-comment">// 接收到的字节buf[0:n]</span><br>                fmt.Println(<span class="hljs-string">&quot;received data=&quot;</span>, receiveData)<br>            &#125;<br>        &#125;(conn)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HTTP Server</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> handler <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h handler)</span></span> ServeHTTP(w http.ResponseWriter, r *http.Request) &#123;<br>    requestUrl := r.URL.String()<br>    msg := fmt.Sprintf(<span class="hljs-string">&quot;request uri=%s\n&quot;</span>, requestUrl)<br>    fmt.Println(msg)<br>    _, _ = w.Write([]<span class="hljs-type">byte</span>(msg))<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    err := http.ListenAndServe(<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>, handler&#123;&#125;) <span class="hljs-comment">//地址、端口，处理句柄</span><br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-built_in">panic</span>(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HTTP Server的底层还是TCP连接，对比上面Socket Server的代码，我们期望在HTTP Server的实现里发现</p><ol><li>创建连接<code>net.Listen</code></li><li>网络监听<code>srv.Accept()</code></li><li>读取数据<code>c.Read(buf)</code></li><li>额外的，在服务端发送完数据后，应该要关闭连接</li></ol><p>带着以上四个目标，我们来跟一下HTTP Server的启动过程。</p><ol><li>启动HTTP Server<code>err := http.ListenAndServe(&quot;127.0.0.1:8080&quot;, handler&#123;&#125;)</code> <a href="/images/golang/gin/Server_start.png" data-caption="Server_start" data-fancybox class="fancy_box_trg">&nbsp;</a></li><li>构造server对象 <a href="/images/golang/gin/Server_struct.png" data-caption="Server_struct" data-fancybox class="fancy_box_trg">&nbsp;</a></li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ListenAndServe</span><span class="hljs-params">(addr <span class="hljs-type">string</span>, handler Handler)</span></span> <span class="hljs-type">error</span> &#123;<br>    server := &amp;Server&#123;Addr: addr, Handler: handler&#125;<br>    <span class="hljs-keyword">return</span> server.ListenAndServe()<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>调用server的<code>ListenAndServe</code>方法。在#Line9我们发现了<code>net.Listen(&quot;tcp&quot;, addr)</code>，<strong>目标1找到</strong>。</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(srv *Server)</span></span> ListenAndServe() <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-keyword">if</span> srv.shuttingDown() &#123;<br>        <span class="hljs-keyword">return</span> ErrServerClosed<br>    &#125;<br>    addr := srv.Addr<br>    <span class="hljs-keyword">if</span> addr == <span class="hljs-string">&quot;&quot;</span> &#123;<br>        addr = <span class="hljs-string">&quot;:http&quot;</span><br>    &#125;<br>    ln, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, addr)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> err<br>    &#125;<br>    <span class="hljs-keyword">return</span> srv.Serve(ln)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>跟入#Line13行代码<code>srv.Serve(ln)</code> <a href="/images/golang/gin/srv.Serve.png" data-fancybox data-caption="srv.Serve" class="fancy_box_trg">&nbsp;</a>。这里，#Line4:<code>rw,err := l.Accept()</code>，<strong>目标2找到</strong>。<br>这里的<code>rw</code>即是<code>net.Conn</code>，在#Line14重新包装了<code>rw</code> <a href="/images/golang/gin/srv.newConn.png" data-fancybox data-caption="srv.newConn" class="fancy_box_trg">&nbsp;</a>，，并在#Line14启动协程<code>go c.serve(connCtx)</code>。<br>到此，服务器已经正常启动，并且给每一个新进来的Request都分配了一个协程。#Line3的for循环配合golang轻协程的特性，一个高并发的web服务器启动了。</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(srv *Server)</span></span> Serve(l net.Listener) <span class="hljs-type">error</span> &#123;<br>    ...<br>    <span class="hljs-keyword">for</span> &#123;<br>        rw, err := l.Accept()<br>        ...<br>        connCtx := ctx<br>        <span class="hljs-keyword">if</span> cc := srv.ConnContext; cc != <span class="hljs-literal">nil</span> &#123;<br>            connCtx = cc(connCtx, rw)<br>            <span class="hljs-keyword">if</span> connCtx == <span class="hljs-literal">nil</span> &#123;<br>                <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;ConnContext returned nil&quot;</span>)<br>            &#125;<br>        &#125;<br>        tempDelay = <span class="hljs-number">0</span><br>        c := srv.newConn(rw)<br>        c.setState(c.rwc, StateNew) <span class="hljs-comment">// before Serve can return</span><br>        <span class="hljs-keyword">go</span> c.serve(connCtx)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>继续挖<code>go c.serve(connCtx)</code>看看<code>net/http</code>是如何处理一个Request的。先快速扫一下这个函数里面做了哪些事情：</li><li>#Line20<code>w, err := c.readRequest(ctx)</code>构建Response对象。向内追找到HTTP协议的解析过程<code>newTextprotoReader</code>。<strong>目标3找到</strong>。</li><li>#Line35<code>serverHandler&#123;c.server&#125;.ServeHTTP(w, w.req)</code> 处理业务逻辑(即用户定义的路由逻辑)。<code>ServeHTTP</code>的第一个参数<code>w</code>就是Response对象，负责向客户端响应数据，<code>w.req</code>即Request，负责解析请求参数、头信息等。</li><li>#Line40<code>w.finishRequest()</code>中有flush操作，到这里服务器已经完成了数据响应。</li><li>#Line50-64处理了<code>keep-alive</code>重用连接和<code>idle_timeout</code>空闲超时断开连接的逻辑。这里涉及到一些网络知识不具体展开。<br>若设置了<code>Connection: close</code>或者服务器保持连接直到空闲超时，都会return从而执行#Line5中的defer代码,注意源代码中的#Line1775~1777 <a href="/images/golang/gin/defer_conn_close.png" data-fancybox data-caption="defer_conn_close" class="fancy_box_trg">&nbsp;</a>。<strong>目标4找到</strong></li><li>需要额外关注一下#Line35行上面的注释 <a href="/images/golang/gin/serverHandler_comments.png" data-fancybox data-caption="serverHandler_comments" class="fancy_box_trg">&nbsp;</a>。这里明确指出了<code>net/http</code>没有实现pipeline，理由是在HTTP1.1中pipeline并没有被（客户端/浏览器）广泛的实现，因此扔到了和HTTP2.0一起实现。</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// Serve a new connection.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *conn)</span></span> serve(ctx context.Context) &#123;<br>    c.remoteAddr = c.rwc.RemoteAddr().String()<br>    ctx = context.WithValue(ctx, LocalAddrContextKey, c.rwc.LocalAddr())<br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;...&#125;()<br><br>    ...<br><br>    <span class="hljs-comment">// HTTP/1.x from here on.</span><br><br>    ctx, cancelCtx := context.WithCancel(ctx)<br>    c.cancelCtx = cancelCtx<br>    <span class="hljs-keyword">defer</span> cancelCtx()<br><br>    c.r = &amp;connReader&#123;conn: c&#125;<br>    c.bufr = newBufioReader(c.r)<br>    c.bufw = newBufioWriterSize(checkConnErrorWriter&#123;c&#125;, <span class="hljs-number">4</span>&lt;&lt;<span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">for</span> &#123;<br>        w, err := c.readRequest(ctx)<br>        <span class="hljs-keyword">if</span> c.r.remain != c.server.initialReadLimitSize() &#123;<br>            <span class="hljs-comment">// If we read any bytes off the wire, we&#x27;re active.</span><br>            c.setState(c.rwc, StateActive)<br>        &#125;<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;...&#125;<br><br>        <span class="hljs-comment">// Expect 100 Continue support</span><br>        req := w.req<br>        <span class="hljs-keyword">if</span> req.expectsContinue() &#123;...&#125;<br><br>        c.curReq.Store(w)<br><br>        <span class="hljs-keyword">if</span> requestBodyRemains(req.Body) &#123;...&#125;<br><br>        serverHandler&#123;c.server&#125;.ServeHTTP(w, w.req)<br>        w.cancelCtx()<br>        <span class="hljs-keyword">if</span> c.hijacked() &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        w.finishRequest()<br>        <span class="hljs-keyword">if</span> !w.shouldReuseConnection() &#123;<br>            <span class="hljs-keyword">if</span> w.requestBodyLimitHit || w.closedRequestBodyEarly() &#123;<br>                c.closeWriteAndWait()<br>            &#125;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        c.setState(c.rwc, StateIdle)<br>        c.curReq.Store((*response)(<span class="hljs-literal">nil</span>))<br><br>        <span class="hljs-keyword">if</span> !w.conn.server.doKeepAlives() &#123;<br>            <span class="hljs-comment">// We&#x27;re in shutdown mode. We might&#x27;ve replied</span><br>            <span class="hljs-comment">// to the user without &quot;Connection: close&quot; and</span><br>            <span class="hljs-comment">// they might think they can send another</span><br>            <span class="hljs-comment">// request, but such is life with HTTP/1.1.</span><br>            <span class="hljs-keyword">return</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> d := c.server.idleTimeout(); d != <span class="hljs-number">0</span> &#123;<br>            c.rwc.SetReadDeadline(time.Now().Add(d))<br>            <span class="hljs-keyword">if</span> _, err := c.bufr.Peek(<span class="hljs-number">4</span>); err != <span class="hljs-literal">nil</span> &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>        &#125;<br>        c.rwc.SetReadDeadline(time.Time&#123;&#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>P.S. 这里再额外挖一下#Line35<code>serverHandler&#123;c.server&#125;.ServeHTTP(w, w.req)</code>的实现，将用户代码和<code>net/http</code>包打通。<br>这里首先构造了一个serverHandler对象并调用了它的<code>ServeHTTP</code>方法。<a href="/images/golang/gin/serverHandler_ServeHTTP.png" data-fancybox data-caption="serverHandler_ServeHTTP" class="fancy_box_trg">&nbsp;</a><br>之后，调用了<code>sh.srv.Handler.ServeHTTP(rw, req)</code>，这里的<code>srv</code>就是本文步骤2中<code>构造server对象</code>的这个server对象。<br>因此这里的<code>.Handler.ServeHTTP</code>最终调用的是我们的<code>HTTP Server</code>demo中#Line4-9的代码。</p><h2 id="Gin的启动过程"><a href="#Gin的启动过程" class="headerlink" title="Gin的启动过程"></a>Gin的启动过程</h2><p>挖完了<code>net/http</code>包，对http网络请求的过程有了一个整体的认知，接下来正式开挖Gin。</p><ol><li>启动服务非常简便<code>engine := gin.New()</code>然后<code>engine.Run(&quot;:8080&quot;)</code> <a href="/images/golang/gin/gin_New.png" data-caption="gin_New" data-fancybox class="fancy_box_trg">&nbsp;</a></li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    engine := gin.New()<br><br>    <span class="hljs-comment">//engine.GET(&quot;/someGet&quot;, getting)</span><br>    ...<br>    <span class="hljs-comment">//engine.Use(middlewares.Authenticate())</span><br><br>    engine.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><code>gin.New()</code>的细节。其中<code>Engine</code>的结构 <a href="/images/golang/gin/gin_Engine.png" data-caption="gin_Engine" data-fancybox class="fancy_box_trg">&nbsp;</a><br>其中：</li></ol><ul><li><code>RedirectTrailingSlash</code>若请求地址是<code>/foo/</code>且未匹配，但<code>/foo</code>可以匹配，则将客户端重定向到<code>/foo</code>，若请求是GET则状态码是301，其他动词则是307</li><li><code>RedirectFixedPath</code>未匹配时尝试去除多余的<code>../</code>或<code>//</code>以修正路径(且转化为小写)，例如<code>/FOO</code>或<code>/..//FOO</code>都能匹配<code>/foo</code></li><li><code>HandleMethodNotAllowed</code>未匹配时尝试其他动词，若路由匹配则以状态码405响应，否则将请求代理到<code>NotFound</code>句柄。</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// New returns a new blank Engine instance without any middleware attached.</span><br><span class="hljs-comment">// By default the configuration is:</span><br><span class="hljs-comment">// - RedirectTrailingSlash:  true</span><br><span class="hljs-comment">// - RedirectFixedPath:      false</span><br><span class="hljs-comment">// - HandleMethodNotAllowed: false</span><br><span class="hljs-comment">// - ForwardedByClientIP:    true</span><br><span class="hljs-comment">// - UseRawPath:             false</span><br><span class="hljs-comment">// - UnescapePathValues:     true</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">()</span></span> *Engine &#123;<br>    debugPrintWARNINGNew() <span class="hljs-comment">//debug模式下打印开发模式警告</span><br>    engine := &amp;Engine&#123;<br>        RouterGroup: RouterGroup&#123; <span class="hljs-comment">// 路由分组</span><br>            Handlers: <span class="hljs-literal">nil</span>,<br>            basePath: <span class="hljs-string">&quot;/&quot;</span>,<br>            root:     <span class="hljs-literal">true</span>,<br>        &#125;,<br>        FuncMap:                template.FuncMap&#123;&#125;, <span class="hljs-comment">// 模板函数？</span><br>        RedirectTrailingSlash:  <span class="hljs-literal">true</span>,<br>        RedirectFixedPath:      <span class="hljs-literal">false</span>,<br>        HandleMethodNotAllowed: <span class="hljs-literal">false</span>,<br>        ForwardedByClientIP:    <span class="hljs-literal">true</span>,<br>        AppEngine:              defaultAppEngine,<br>        UseRawPath:             <span class="hljs-literal">false</span>,<br>        UnescapePathValues:     <span class="hljs-literal">true</span>,<br>        MaxMultipartMemory:     defaultMultipartMemory,<br>        trees:                  <span class="hljs-built_in">make</span>(methodTrees, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>),<br>        delims:                 render.Delims&#123;Left: <span class="hljs-string">&quot;&#123;&#123;&quot;</span>, Right: <span class="hljs-string">&quot;&#125;&#125;&quot;</span>&#125;,<br>        secureJsonPrefix:       <span class="hljs-string">&quot;while(1);&quot;</span>,<br>    &#125;<br>    engine.RouterGroup.engine = engine<br>    engine.pool.New = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">interface</span>&#123;&#125; &#123; <span class="hljs-comment">// 连接池</span><br>        <span class="hljs-keyword">return</span> engine.allocateContext()<br>    &#125;<br>    <span class="hljs-keyword">return</span> engine<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><code>engine.Run(&quot;:8080&quot;)</code>中的细节。它仅仅是<code>http.ListenAndServe(address, engine)</code>的语法糖，啥也没做。<br>因此可以看出来，Gin对网络底层没做任何处理，直接使用了<code>net/http</code>包。其核心代码全部在<code>Engine</code>这个结构体中。根据我们分析<code>net/http</code>包的经验，Engine中一定实现了<code>ServeHTTP</code>方法</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// Run attaches the router to a http.Server and starts listening and serving HTTP requests.</span><br><span class="hljs-comment">// It is a shortcut for http.ListenAndServe(addr, router)</span><br><span class="hljs-comment">// Note: this method will block the calling goroutine indefinitely unless an error happens.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(engine *Engine)</span></span> Run(addr ...<span class="hljs-type">string</span>) (err <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; debugPrintError(err) &#125;()<br><br>    address := resolveAddress(addr) <span class="hljs-comment">// addr 是动态参数，默认值取:8080</span><br>    debugPrint(<span class="hljs-string">&quot;Listening and serving HTTP on %s\n&quot;</span>, address)<br>    err = http.ListenAndServe(address, engine)<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><code>engine.ServeHTTP</code>到底干了啥？ <code>Engine</code>结构体的方法集：<br><img src="/images/golang/gin/gin_Engine_methods.png" alt="gin_Engine_methods"></li></ol><p><code>gin.Context</code> <a href="/images/golang/gin/gin_Context.png" data-caption="gin_Context" data-fancybox class="fancy_box_trg">&nbsp;</a></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// ServeHTTP conforms to the http.Handler interface.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;<br>    <span class="hljs-comment">// 源码#Line145行定义，这里返回engine.allocateContext()的结果</span><br>    <span class="hljs-comment">// 是*gin.Context指针</span><br>    c := engine.pool.Get().(*Context) <span class="hljs-comment">// 从连接池中取出一个连接</span><br>    c.writermem.reset(w) <span class="hljs-comment">// 重置 http.responseWriter</span><br>    c.Request = req<br>    c.reset() <span class="hljs-comment">// 重置Context</span><br><br>    engine.handleHTTPRequest(c) <span class="hljs-comment">// 核心!!! 路由处理逻辑</span><br><br>    engine.pool.Put(c) <span class="hljs-comment">// 执行结束，将连接放入连接池</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li><code>engine.handleHTTPRequest(c)</code>的细节。</li></ol><p><img src="/images/golang/gin/engine_handleHTTPRequest.png" alt="engine_handleHTTPRequest"></p><p>可以看到源码#Line403行调用<code>c.Next()</code>后<code>c.index</code>从-1自增到0，然后调用<code>c.handlers[0]</code>句柄，执行第一个中间件<code>RouteLogger</code>，而在中间件中我们需要再次调用<code>c.Next()</code>。非常明显的一个递归调用，然后执行第二个中间件<code>RecoverWithWriter</code>，之后调用<code>GET</code>动词注册的路由<code>api.Ping</code>，最后调用链路依次返回。<br>参考下图（点击可放大）<br><a href="/images/golang/gin/gin_Route_Next.png" data-caption="gin_Route_Next" data-fancybox><br><img src="/images/golang/gin/gin_Route_Next.png" alt="gin_Route_Next"><br></a></p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>Gin的路由按HTTP动词，分9组（默认<code>engine.trees = make(methodTrees, 0, 9)</code>）分别对应<code>GET</code>组，<code>POST</code>组，<code>PUT</code>组等。<code>methodTrees</code>是<code>[]methodTree</code>的别名：<code>type methodTrees []methodTree</code>。<br><code>node</code>是一颗前缀树或<code>Radix trie</code>。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> methodTree <span class="hljs-keyword">struct</span> &#123;<br>    method <span class="hljs-type">string</span> <span class="hljs-comment">// 即HTTP动词，如GET</span><br>    root   *node  <span class="hljs-comment">// 路由链路</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a><code>Trie</code></h2><p><code>trie</code>译为字典树或单词查找树或前缀树。这是一种搜索树——存储动态集合或关联数组的有序的树形数据结构，且通常使用字符串做键。与二叉搜索树不同，其节点上并不直接存键。其在树中的位置决定了与其关联的键。所有的子节点都有相同的前缀，而根节点对应的是空字符串。键只与叶子节点关联。</p><p><code>trie</code>术语的发明者念<code>/ˈtriː/</code>(tree)，而有些作者念为<code>/ˈtraɪ/</code>以便和tree区别。</p><p>下图是一颗字典树，描述了键值为<code>A</code>、<code>to</code>、<code>tea</code>、<code>ted</code>、<code>ten</code>、<code>i</code>、<code>in</code>、<code>inn</code>的情况。（图中节点并不是完全有序的，虽然应该如此：如root节点与<code>t</code>节点）<br><img src="/images/golang/gin/Trie_example.svg" alt="wiki字典树"></p><p>不难想象，字典树典型的应用场景是单词计数。</p><h3 id="trie通常用来取代hash-table，因为有如下优势："><a href="#trie通常用来取代hash-table，因为有如下优势：" class="headerlink" title="trie通常用来取代hash table，因为有如下优势："></a><code>trie</code>通常用来取代<code>hash table</code>，因为有如下优势：</h3><ul><li>在最坏的情况下，<code>trie</code>的时间复杂度是<code>O(m)</code>，其中m是字符串的长度。但哈希表有<code>key</code>碰撞的情况，最坏的情况下其复杂度是<code>O(N)</code>，虽然通常是<code>O(1)</code>，且计算哈希的复杂度是<code>O(m)</code>。</li><li><code>trie</code>中没有碰撞。</li><li>当<code>trie</code>中一个<code>key</code>对应多个值时，会使用<code>buckets</code>来存储多个值，与哈希表中发生碰撞时使用的桶相似。</li><li>不论有多少个<code>key</code>，都不需哈希函数或重哈希函数。</li><li><code>key</code>的路径是有序的。</li></ul><h3 id="但同时，相对哈希表，trie有如下缺点："><a href="#但同时，相对哈希表，trie有如下缺点：" class="headerlink" title="但同时，相对哈希表，trie有如下缺点："></a>但同时，相对哈希表，<code>trie</code>有如下缺点：</h3><ul><li><code>trie</code>的搜索通常比哈希表慢，特别是需要从硬盘上加载数据时。</li><li>浮点数做<code>key</code>通常导致链路过长。</li><li>有些<code>trie</code>可能比哈希表需要更多的空间，因为每一个字符都要分配内存。而哈希表只需要申请一块内存。</li></ul><img src="/images/golang/gin/trie_example_001.png" alt="trie_001" style="width:30em;" /><h2 id="Radix-Tree"><a href="#Radix-Tree" class="headerlink" title="Radix Tree"></a><code>Radix Tree</code></h2><p><code>radix tree</code>也叫<code>radix trie</code>或<code>compact prefix trie</code>。在字典树中，每一个字符都要占一个节点，这样造成树过高。<code>radix trie</code>则将唯一的子节点压缩到自身来降低树的高度。</p><hr><p>参考资料：</p><ol><li><a href="https://en.wikipedia.org/wiki/Trie">字典树</a></li><li><a href="https://en.wikipedia.org/wiki/Radix_tree">Radix树</a></li><li><a href="https://www.youtube.com/watch?v=CX777rfuZtM">Trie Data Structure Tutorial - Introduction to the Trie Data Structure</a></li><li><a href="https://www.youtube.com/watch?v=jXAHLqQthKw">Trie and Patricia Trie Overview</a></li><li><a href="https://mp.weixin.qq.com/s/HzGS0ekNFubJGjj19NxlEw">图解Redis中的Radix树</a></li><li><a href="https://mp.weixin.qq.com/s/4DWC9Upv2UEXKssb8DDwVw">Linux 内核数据结构：Radix树</a></li></ol><h1 id="解析请求参数"><a href="#解析请求参数" class="headerlink" title="解析请求参数"></a>解析请求参数</h1><h1 id="渲染JSON"><a href="#渲染JSON" class="headerlink" title="渲染JSON"></a>渲染JSON</h1><h1 id="session-amp-cookie"><a href="#session-amp-cookie" class="headerlink" title="session &amp; cookie"></a>session &amp; cookie</h1><h1 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a>URL重定向</h1><h1 id="goroutin-inside-a-middleware"><a href="#goroutin-inside-a-middleware" class="headerlink" title="goroutin inside a middleware"></a>goroutin inside a middleware</h1><h1 id="日志模块"><a href="#日志模块" class="headerlink" title="日志模块"></a>日志模块</h1><h2 id="debug日志"><a href="#debug日志" class="headerlink" title="debug日志"></a>debug日志</h2><p><code>/debug.go#L55</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">debugPrint</span><span class="hljs-params">(format <span class="hljs-type">string</span>, values ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> IsDebugging() &#123;<br>        <span class="hljs-keyword">if</span> !strings.HasSuffix(format, <span class="hljs-string">&quot;\n&quot;</span>) &#123;<br>            format += <span class="hljs-string">&quot;\n&quot;</span><br>        &#125;<br>        <span class="hljs-comment">// DefaultWriter是在项目bootstrap阶段配置的写句柄</span><br>        <span class="hljs-comment">// 可以通过DefaultWriter=io.MultiWriter(...)自定义</span><br>        <span class="hljs-comment">// 也可以使用默认值os.Stdout见/mode.go#L31-38</span><br>        fmt.Fprintf(DefaultWriter, <span class="hljs-string">&quot;[GIN-debug] &quot;</span>+format, values...)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>/debug.go#L97</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">debugPrintError</span><span class="hljs-params">(err <span class="hljs-type">error</span>)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">if</span> IsDebugging() &#123;<br>            <span class="hljs-comment">// DefaultErrorWriter is the default io.Writer used by Gin to debug errors</span><br>            fmt.Fprintf(DefaultErrorWriter, <span class="hljs-string">&quot;[GIN-debug] [ERROR] %v\n&quot;</span>, err)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="路由日志"><a href="#路由日志" class="headerlink" title="路由日志"></a>路由日志</h2><p><code>/logger.go#L131</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// defaultLogFormatter is the default log format function Logger middleware uses.</span><br><span class="hljs-keyword">var</span> defaultLogFormatter = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(param LogFormatterParams)</span></span> <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">var</span> statusColor, methodColor, resetColor <span class="hljs-type">string</span><br>    <span class="hljs-keyword">if</span> param.IsOutpu123456<br>    or() &#123;<br>        statusColor = param.StatusCodeColor()<br>        methodColor = param.MethodColor()<br>        resetColor = param.ResetColor()<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> param.Latency &gt; time.Minute &#123;<br>        <span class="hljs-comment">// Truncate in a golang &lt; 1.8 safe way</span><br>        param.Latency = param.Latency - param.Latency%time.Second<br>    &#125;<br>    <span class="hljs-comment">// 默认日志格式：</span><br>    <span class="hljs-comment">//             [GIN] 时间戳|HTTP_Code|响应时间|客户IP| http_verb url 错误信息 </span><br>    <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;[GIN] %v |%s %3d %s| %13v | %15s |%s %-7s %s %#v\n%s&quot;</span>,<br>        param.TimeStamp.Format(<span class="hljs-string">&quot;2006/01/02 - 15:04:05&quot;</span>),<br>        statusColor, param.StatusCode, resetColor,<br>        param.Latency,<br>        param.ClientIP,<br>        methodColor, param.Method, resetColor,<br>        param.Path,<br>        param.ErrorMessage,<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p><code>/logger.go#L203</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// LoggerWithConfig instance a Logger middleware with config.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LoggerWithConfig</span><span class="hljs-params">(conf LoggerConfig)</span></span> HandlerFunc &#123;<br>    formatter := conf.Formatter<br>    <span class="hljs-keyword">if</span> formatter == <span class="hljs-literal">nil</span> &#123;<br>        formatter = defaultLogFormatter<br>    &#125;<br><br>    out := conf.Output<br>    <span class="hljs-keyword">if</span> out == <span class="hljs-literal">nil</span> &#123;<br>        out = DefaultWriter<br>    &#125;<br><br>    notlogged := conf.SkipPaths<br><br>    isTerm := <span class="hljs-literal">true</span><br><br>    <span class="hljs-keyword">if</span> w, ok := out.(*os.File); !ok || os.Getenv(<span class="hljs-string">&quot;TERM&quot;</span>) == <span class="hljs-string">&quot;dumb&quot;</span> ||<br>        (!isatty.IsTerminal(w.Fd()) &amp;&amp; !isatty.IsCygwinTerminal(w.Fd())) &#123;<br>        isTerm = <span class="hljs-literal">false</span><br>    &#125;<br><br>    <span class="hljs-keyword">var</span> skip <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">struct</span>&#123;&#125;<br><br>    <span class="hljs-keyword">if</span> length := <span class="hljs-built_in">len</span>(notlogged); length &gt; <span class="hljs-number">0</span> &#123;<br>        skip = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">struct</span>&#123;&#125;, length)<br><br>        <span class="hljs-keyword">for</span> _, path := <span class="hljs-keyword">range</span> notlogged &#123;<br>            skip[path] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *Context)</span></span> &#123;<br>        <span class="hljs-comment">// Start timer</span><br>        start := time.Now()<br>        path := c.Request.URL.Path<br>        raw := c.Request.URL.RawQuery<br><br>        <span class="hljs-comment">// Process request</span><br>        c.Next()<br><br>        <span class="hljs-comment">// Log only when path is not being skipped</span><br>        <span class="hljs-keyword">if</span> _, ok := skip[path]; !ok &#123;<br>            param := LogFormatterParams&#123;<br>                Request: c.Request,<br>                isTerm:  isTerm,<br>                Keys:    c.Keys,<br>            &#125;<br><br>            <span class="hljs-comment">// Stop timer</span><br>            param.TimeStamp = time.Now()<br>            param.Latency = param.TimeStamp.Sub(start)<br><br>            param.ClientIP = c.ClientIP()<br>            param.Method = c.Request.Method<br>            param.StatusCode = c.Writer.Status()<br>            param.ErrorMessage = c.Errors.ByType(ErrorTypePrivate).String()<br><br>            param.BodySize = c.Writer.Size()<br><br>            <span class="hljs-keyword">if</span> raw != <span class="hljs-string">&quot;&quot;</span> &#123;<br>                path = path + <span class="hljs-string">&quot;?&quot;</span> + raw<br>            &#125;<br><br>            param.Path = path<br><br>            fmt.Fprint(out, formatter(param))<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Build-a-single-binary-with-templates"><a href="#Build-a-single-binary-with-templates" class="headerlink" title="Build a single binary with templates"></a>Build a single binary with templates</h1><p>See a complete example in the <a href="https://github.com/gin-gonic/examples/tree/master/assets-in-binary">https://github.com/gin-gonic/examples/tree/master/assets-in-binary</a> directory.</p><h1 id="http2-server-push"><a href="#http2-server-push" class="headerlink" title="http2 server push"></a>http2 server push</h1><p>https on port 8080</p><h1 id="go服务要不要配nginx前端"><a href="#go服务要不要配nginx前端" class="headerlink" title="go服务要不要配nginx前端"></a>go服务要不要配nginx前端</h1><hr><p>参考阅读:</p><ol><li><a href="">Gin的路由为什么这么快?</a></li></ol><hr><p>参考资料:</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang_汇编基础</title>
      <link href="/2020/03/01/Golang-%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/03/01/Golang-%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>待填坑</p><hr><p>参考资料</p><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDUwNTQwMQ==&mid=2257483728&idx=1&sn=c881e621f4f2dfc0ff2277766249ced5&chksm=a5391706924e9e103424852355327c991a7ea2b939add74b949a1ed2cc7fbe62dc79c08efe2f&mpshare=1&scene=1&srcid=0301tMNtfeQb4MNqG5MGhI77&sharer_sharetime=1583045076748&sharer_shareid=0a5f0581869913747e54ca097f77ea2b&key=d9c35d22f9135c5e5abd167d30a97220bb7974a97aae4889edc2ed60660ee092d3931d7316ac6c9f95a785a4affeb4494f848ea1c12a18c45860c2cb767b879498f5390022e711314f5ae924081a9344&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=AbBZMfc/Es0Ptouu9JnS8Zg=&pass_ticket=H9KugKX66caf/O6hk1fW3TFdlTbKusIswgbiLVUQZcdxYhvcZNoDNBQ7FB7khUoW">深入Go的底层，带你走近一群有追求的人</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMzc4Mzk1Mw==&mid=2649840979&idx=1&sn=06247e933f624eec1239d891494ab21b&chksm=8398bbadb4ef32bbc46ee8e27f2287fbf41b53e0005594ec02b9230feefdb6cd5dfef8d2c412&scene=126&sessionid=1583042919&key=0176b95a2185ced1763d87f5d6158e926450bcd1548cf0b7c5fbbaab618786cfec2e4b1276e92bbfc1bc3b35b0a7e0f357485604e61fd50c3b8a4ce5405b7f3a483c16d3dcf2c81b8b3b23f4b3b934af&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=Af7yd/JsI2tikg/+WGTqHcI=&pass_ticket=H9KugKX66caf/O6hk1fW3TFdlTbKusIswgbiLVUQZcdxYhvcZNoDNBQ7FB7khUoW">深度解密Go语言之Slice</a></li><li><a href="https://www.bilibili.com/video/av46494102/?redirectFrom=h5">#34 go plan9 汇编入门，带你打通应用和底层 - Go夜读</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>健康码是个被忽视的奇点事件</title>
      <link href="/2020/02/28/%E5%81%A5%E5%BA%B7%E7%A0%81%E6%98%AF%E4%B8%AA%E8%A2%AB%E5%BF%BD%E8%A7%86%E7%9A%84%E5%A5%87%E7%82%B9%E4%BA%8B%E4%BB%B6/"/>
      <url>/2020/02/28/%E5%81%A5%E5%BA%B7%E7%A0%81%E6%98%AF%E4%B8%AA%E8%A2%AB%E5%BF%BD%E8%A7%86%E7%9A%84%E5%A5%87%E7%82%B9%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="文章来源：健康码是个被忽视的奇点事件"><a href="#文章来源：健康码是个被忽视的奇点事件" class="headerlink" title="文章来源：健康码是个被忽视的奇点事件"></a>文章来源：<a href="https://c.m.163.com/news/a/F6D0RH4905118O92.html?spss=newsapp">健康码是个被忽视的奇点事件</a></h2><p>健康码得以迅速推广，本质上是人和信息的紧密结合</p><p>大家都在谈健康码，但这件事情的重要性，可能还是被低估了。我们可能正在平静地度过一个历史性的奇点时刻。</p><p>2020年2月11日，疫情最严重的时候，健康码在杭州率先推出，用“红黄绿”三色二维码作为数字化健康证明，居民和来杭人员只需上钉钉或支付宝领取，绿码可凭码通行，红码和黄码需按规定隔离并健康打卡。</p><p>健康码的出现，居民不再需要重复填报健康表格，高速路口和小区卡口工作人员也更加便利，实现了“无接触式”查验，降低了感染风险。按照杭州市政府发布的企业复工申报指南，企业复工需要在钉钉上申报，在审核通过之后，企业员工每天也需要在钉钉上进行健康打卡。</p><p>因为种种的优点，健康码在全国迅速得到广泛应用，截至2月24日，健康码已在全国近200个地市上线。</p><p>健康码上线之后，我和阿里钉钉CEO无招通了个不长的电话，主要是他在说健康码的思路和经过，但这个过程中，我脑子里突然有一个念头亮了——我突然意识到健康码这个产品的成功，其实顺应了一个在过去10年缓慢发生的巨大变化，那就是人和信息不再是原来分离的状态，正在融为一体。</p><p>“强信息人”的时代</p><p>这是一个不可小觑的变化。因为在过去的成千上万年时间里，我们都是和信息处于分离状态的，自身产生、携带和可分享的信息是非常少的。可以说，整个世界的架构，其实都是在人和信息分离的前提下搭建的。从语言、文字的出现，到印刷术、电报、电话、互联网的发明，都是为了让人能更好地找到信息。</p><p>克劳德·香农在1948年奠定信息理论基础的论文《通信的数据理论》里就写到：</p><blockquote><p>“通信的基本问题是，在一点精确地或者紧似地复现在另一点所选取的讯息。这些讯息往往都带有意义。”<br>想想唐僧师徒一行为了取经要走十万八千里，就知道那时人和信息分离的情况有多严重了。</p></blockquote><p>之前有很多书籍和文章都在谈论因为广泛的连接，而给社会和世界带来的改变——改变不仅是因为你可以在手机上观看视频，更是因为你为什么可以在手机上看视频。而移动互联网和智能手机的普及，使得智能手机几乎成为地球上几十亿人身上突然增加的一个信息器官。从对人类的改变来说，这相当于一个发生在最近十年内的巨大基因突变，人类自身一下可以自己生成、携带、共享（主动和被动都包括）相当于过去无数倍的海量信息，正在成为网络里面一个愈发强力的节点，完全可以把现在的自己称为“强信息人“。要知道，根据技术史学家乔治·戴森（ George Dyson）收集的数据，在 1953年 3月，世界上只有 53K字节的高速存储空间（ RAM）。今天，我们裤兜里随便一个手机的存储空间就是这个数字的10万倍。</p><p>在欧洲，GDPR将产生可识别个人数据的人视为“数据主体”（data subject），其实也是从法律上认定并保护了信息与人的高度融合这一现实。</p><p>杭州市委副书记在接受白岩松在《新闻1+1》 中的采访时，曾专门提及健康——健康码的评判来源于三个维度，一个维度是空间，根据疫情风险程度，杭州市的大数据公司按照有关数据已经可以精确到乡镇（街道）；第二个维度是时间，某人去过疫区的次数以及时间的长短，这个与传染路径有关联；第三个是人际关系维度，与密切接人员接触状态等个人有效信息，量化赋分后最终生成相应的三色码。这充分说明了现在很多信息只有互相连接起来时，才是完整的或是有用的。</p><p>最近这几年，我们的身上已经早已被贴上了无数层密密麻麻的数字标签，人和信息早已经紧密地融合为一体。领导提及的三个维度，都是我们随身携带、唾手可得的信息，而生成的健康码，其实又成为新的信息和标签。</p><blockquote><p>10年前，我们可以9点打开电脑，5点关掉它；现在是手机持续开着，我们定时睡觉和醒来。<br>当我们身上贴了足够多的标签时，标签已经开始和外界频繁互动，且可以反作用于我们的时候，我们就会感知到自己已经和信息融为一体了。很简单的一个例子，我们可以感受一下——10年前，我们可以9点打开电脑，5点关掉它；现在是手机持续开着，我们定时睡觉和醒来。</p></blockquote><p>有一本书《第七感》，里面谈到古生物学家斯蒂芬·杰·古尔德（ Stephen Jay Gould）将这种物种进化过程中的突变称为“间断平衡”（ punctuated equilibrium），即世界从一种均衡态跳入另一种均衡态，永无回头之时。古尔德主要是指恐龙的灭绝，实际上这一理论同样适用于思考历史。</p><p>我们可能正处在这个时刻。其实中国移动支付的普及，也是人和信息不断融合的结果。只是这个过程太长了，我们几乎没有意识到这种潜移默化的渐变。而健康码的意义，不仅仅对于防控疫情有很大帮助，更是因为时间很短，帮助我们感知到了发生在身边的巨大变化。</p><p>爬出经验的河流</p><p>《第七感》有句话非常带感——20世纪 20年代华尔街的拓扑结构，很大程度上取决于某个人在特定的某一天正好去了交易大厅。</p><p>人类社会是一个复杂的系统，而任何一个系统都包括三种构成要件：要素、连接、功能或目标，因为连接的改变，人作为这个系统里最重要的一个要素，也发生了巨大的变化。在欧洲启蒙运动的时候，一位农民从农奴变成市民，他的政治地位、经济前景、教与学的能力也会随之改变。这一变革触发了欧洲社会长达几百年的分裂和动荡，世界也因此重新布局。当一个人结合了不同的信息，放在不同的场景之下，他可以释放的能量，起到的作用，也是完全不同的。</p><p>我们都要保持对变化高度警醒，因为变化的巨流改道，会淹没众多曾经信赖的路径。<br>美军特种作战的实践和数字化师的建立就是一个典型的例子，当一个士兵结合了不间断的通讯，更清晰且通过卫星和侦察机持续更新的地图、随时随地的空中甚至太空支援，甚至透过墙壁和其他阻碍探测敌军的热感应器的时候，他的作战效率和战场规则，和过往成千上万需要层级调动指挥的只会服从的士兵，是完全不同的。</p><blockquote><p>我们都要保持对变化高度警醒，因为变化的巨流改道，会淹没众多曾经信赖的路径。</p></blockquote><p>这次疫情，湖北政府在初期的手足无措、漏洞百出，很大程度上也是因为强信息人的出现，传播已经改变，每个人都有能力向外发出足够大的声音，但防疫和政府治理体系却没有跟上。</p><p>对企业来说，这次疫情的停摆，真正摧毁了一些传统的入口和行为习惯，结合信息和人高度融合的现状，加速了很多变化的到来。人类的习惯往往比感知转变得更快，疫情期间所做的很多不得已的变化，有很多都会在未来留下深刻的痕迹，新力量正毫不留情地对旧架构施加巨大的压力。</p><p>作为企业家，要想处理好未来强信息人员工和客户的关系，大可借鉴美军特种部队的支撑体系，和云计算架构给出的思路——那就是围绕着强节点，建立去层级、分布式、网络化的连接体系。这一次疫情，也同样有一些企业，例如林清轩，借助远程协同、在线销售，发挥一线员工的能动性，反而取得意想不到效果，这就可以视作正确的释放了强信息人员工的能量。其实，他们的能量就在那里，只是疫情给了他们机会——就像米开朗基罗说的那样——我只是把大卫从石头里释放出来。</p><p>健康码这个产品的成功，不是偶然的幸运，更应该是一种顺理成章。</p><p>同样，健康码这个产品的成功，也不是偶然的幸运，更应该是一种顺利成章。回头看看钉钉的历次版本的升级，会发现其实钉钉一直在调试人和信息的关系。健康码的成功，只是找到了最适合的产品形态，在最需要的时间和场景下，把这种关系呈现了出来。</p><p>钉钉最开始的特色功能“Ding”，成功地让自己从一开始就形成了鲜明的差异化，但也因此招到一些“反人性”的质疑。无招的解释是，“Ding”这个功能最初的设置目的，就是希望信息在需要的时候，能够到达正确的人。</p><p>的确，定位于工作场景的钉钉，对抗的是人的惰性。但回头看看“钉“的想法，还是没有脱离开人和信息分离的惯性思维，还是有中心化、层级化思维的影子，所以动作还是有些僵硬，也因此才会有质疑，有反弹。</p><p>不过随后钉钉团队在频繁的产品迭代中，持续引入审批、签到、工作方式、以及最新5.0发布的在线办公室、圈子等新功能，在不停地探索人和信息结合的最顺畅的场景。更重要的是，钉钉天生是一个通信平台，所有的发力其实都是做好连接和信息汇集，无形之中形成了一个去层级的、分布式开放平台，给了用户很多创新的空间。</p><p>例如复星集团就曾提了一个非常好的问题：系统到底服务于谁，是员工还是领导？这个问题的背景是复星要应对多文化、多时区，多企业的管理挑战，这个提法，哪怕是在3年前，都是难以想象的。而目前复星在钉钉上形成的开放式的新型组织形式——员工实时在线，打破边界，信息不加工，不过滤完全透明——追求的是适应性和效率，是典型的“失控”，而不是控制带来的安全感觉。这样灵活柔软且实时在线的组织，在面对现在越来越频繁的市场巨变时，就会从容很多。</p><p>以前应用最多的企业级管理系统，还是最早MRPII、ERP以流程为中心的设计思路，追求的是控制和有序，人和数据围绕着流程转；随着互联网公司的崛起，以数据为中心的系统建设思路抬头，这也是为什么最近数据中台火爆一时的原因。未来，会不会有更多真正以人（包括员工、客户、上下游合作伙伴）为中心的系统会涌现出来，去进一步释放人的价值呢？</p><p>这样一来，一个企业会越来越具有生态的样子，在失控无序和敏捷复杂之间找到平衡。但是这样做的代价也是明显的——系统是无法被精确地设计的，同时也很难被完全控制——前几天钉钉被小学生恶作剧打一星求饶的事件，就是一个鲜活的例子，00后生下来就是强信息人，是数字化的原住民。而钉钉对于孩子们的得体回复，也可以看作是和全新用户打交道的实验。</p><p>但这样以人为中心的分布式网络化架构，最大的好处是很容易达成泛组织、跨组织数字化协同联动，这次健康码达成的“政府-企业-员工”，以及招致小学生恶搞的在线教育“政府-学校-班级-学生”，其实就是非常好的协同案例。无招自己也表示，健康码给他带来很多新的启发：“以前钉钉数据在线讲得比较多，没有意识到社会、城市、区县、乡村、小区街道、企业等组织全面在线化带来的深层次社会变革，今天我们从钉钉的健康码，钉钉的码上复工中开始突然有了体感。在线意味着每一个组织，每一个人都数字化了，每一个人的公开行为和组织执行过程都成为一个数字片段，组织和人、人和行为、组织和政策、政策和组织执行（被管理者和管理者的行为）都通过数字化变成了一个在线的虚拟镜像，而且是实时的镜像。你想象一下如果决策者坐在这个镜像面前，还能实时操作政策的变更，立刻看到变更的结果，实时分析实时优化，这个社会的进化速度会不会几何倍数的增长？”</p><blockquote><p>“集中-分散”是永恒的矛盾和循环，也是推动网络进化的力量之源——连接的发达趋向集中，而节点的强大则带来分散，而网络就是在这样“集中-分散“的角力中不断前进演化的。<br>在一个网络里，“集中-分散”是永恒的矛盾和循环，也是推动网络进化的力量之源——连接的发达趋向集中，而节点的强大则带来分散，而网络就是在这样“集中-分散“的角力中不断前进演化的。在这样的模式里，钉钉代表的就是日益发达的连接，而每个强信息人就是新的节点，这种新的连接和节点融合在一起带来的科学、透明、公开、高效，可以在很大程度上消除大组织、大社会信息传递的低效和歪曲，执行的不透明和不统一，阶层人群的不平等形成的网络张力，会对旧结构带来巨大冲击。</p></blockquote><p>这些都是技术带来的进步和普惠，在这个基础上，新数字化体系正在萌芽，一个个未来的在线数字化经济体会孕育出来。从这个角度来看，钉钉对于国家和社会的重要性，在未来可能会超越淘宝带来的社会价值。</p><p>同时，因为信息和人的关系越来越紧密，信息安全和隐私问题，科技与治理的问题，也会成为未来极其重要且敏感的议题。这也是个宏大的话题，限于篇幅，就不展开了。（本文首发钛媒体，作者/刘湘明）</p><hr><p>文章来源：<a href="https://c.m.163.com/news/a/F6D0RH4905118O92.html?spss=newsapp">健康码是个被忽视的奇点事件</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂 </tag>
            
            <tag> Banbrick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记_负责任地说，这次疫情已经成为压垮全球化的最后一根稻草</title>
      <link href="/2020/02/28/%E6%9D%82%E8%AE%B0-%E8%B4%9F%E8%B4%A3%E4%BB%BB%E5%9C%B0%E8%AF%B4%EF%BC%8C%E8%BF%99%E6%AC%A1%E7%96%AB%E6%83%85%E5%B7%B2%E7%BB%8F%E6%88%90%E4%B8%BA%E5%8E%8B%E5%9E%AE%E5%85%A8%E7%90%83%E5%8C%96%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E6%A0%B9%E7%A8%BB%E8%8D%89/"/>
      <url>/2020/02/28/%E6%9D%82%E8%AE%B0-%E8%B4%9F%E8%B4%A3%E4%BB%BB%E5%9C%B0%E8%AF%B4%EF%BC%8C%E8%BF%99%E6%AC%A1%E7%96%AB%E6%83%85%E5%B7%B2%E7%BB%8F%E6%88%90%E4%B8%BA%E5%8E%8B%E5%9E%AE%E5%85%A8%E7%90%83%E5%8C%96%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E6%A0%B9%E7%A8%BB%E8%8D%89/</url>
      
        <content type="html"><![CDATA[<h2 id="文章来源：反者道之动弱者道之用"><a href="#文章来源：反者道之动弱者道之用" class="headerlink" title="文章来源：反者道之动弱者道之用"></a>文章来源：<a href="https://mp.weixin.qq.com/s?__biz=MzI5NjU2Mjg3Nw==&mid=2247485942&idx=1&sn=0ca3269b0498875d1baa5bc35ec47b7f&chksm=ec433024db34b932fb427d8cf0459361d009ec37990747cbf11277812622f17ce19157bb9163&mpshare=1&scene=1&srcid=&sharer_sharetime=1582819881423&sharer_shareid=0a5f0581869913747e54ca097f77ea2b&key=6ee24c58972fa44106319d4c2c5fa150f2052cff75d9ac04993e2f2df69e1f27924d48e4e56bdbe7850c3d07b427a3f07fe3f25871c9e01d3cc0bb12a40bc7b2ca6c6b12ceeb071a9a5b031015ae1410&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=AXqyEq7gucAOtilfPVwED9A=&pass_ticket=VgkLY/EacwAJl4k3BVtkOUqpbZ8FspjYatVx+/bOA2xTz7rjQJnohhF/pPf2kdpM">反者道之动弱者道之用</a></h2><p>疫情还在持续，这次疫情能给世界带来什么，众说纷纭，但有一点是确定的，<strong>全球化时代的句点到来了</strong>。</p><p>全球化作为某种大同世界的雏形，吸引过无数的人为之奋斗，而且，客观地说，全球化也确实给许多国家带来了飞跃。</p><p>以中国为例，<strong>如果没有全球化，没有产业链的跨国分布，中国根本不可能有经济起飞的机会</strong>。</p><p>正是因为中国人接下了西欧北美转移的低端产业，从最苦最累的活做起，一点点建成了世界第二大经济体。</p><p>毫不夸张地说，<strong>中国是全球化的最大受益国</strong>，改革开放的四十年，就是中国拥抱全球化的四十年，全球化为中国的发展贡献了无数的资源，而中国也以庞大的市场和叹为观止的生产能力为全球化提供了无穷动力。</p><p>然而，这一和谐的图景在过去五年出现了大逆转。人们发现，全球化看上去美好，却会带来巨大的危险。</p><p><strong>第一，全球化让很多国家的产业狭隘化了。</strong></p><p>由于全球协作，各国都在发展有比较优势的产业，像中国的纺织、中东的石油，澳洲的矿石，美国的高科技，都是全球分工的结果。风平浪静时，一切协调而美好，然而，只要一环出现问题，就会牵一发动全身。</p><p>还以中国为例，前几年，若不是总理大人在一次谈话中露出了信息，大部分国人都不知道中国连生产圆珠笔尖的能力都没有。</p><p>很多人惊讶：我们能建世界上最好的高铁，为什么做不了小小的笔尖？其实，这没什么好奇怪，既然有人做，不见得非得自己来。</p><p>今天，笔尖问题已经解决了，但是，没有“解决”的问题仍然数不胜数。</p><p>美国一个芯片禁运，打得中兴几近倒闭，好多民众咬牙切齿地说，<strong>一定得发展自己的芯片，免得受制于人</strong>。</p><p>话是这么说，但你就算解决了芯片，就没有别的事吗？上亿吨的大豆总不能都自己种吧？每年进口的四亿吨石油，不能都从自己的地上挖吧？</p><p>各司其职，协同配合，这本是全球化的基本逻辑。芯片受制于人，根子不在芯片，而在中美关系。换言之，只要是全球化，总会有东西受制于人，中国要是和乌克兰关系闹僵了，中兴倒是没事，可下一艘军舰可能就没有燃气轮机了。</p><p>中国的窘境也是各国的窘境。<strong>产业的狭窄化让所有的国家都如履薄冰，既怕别人出事断了自己的供应，更怕自己丢掉产业链上的位置，失去发展机会</strong>。</p><p>其实，纵使像美国这样产业大国，也不能置身事外。美国汽车工业的衰败，导致汽车城底特律的破产；制造业的外迁，催生了五大湖湖畔漫长的“铁锈”地带。</p><p>三十年前，美国打掉了日本的发展势头，却没有换来家电产业的复兴；二十年前，不少议员还在阻止中国的纺织品的倾销，可到了今天，它的纺织业已被彻底摧毁。</p><p>曾有一位美国的高官忧心地谈到，美国许多战斗机上的显示屏自己不能生产，这可怎么得了！如果某天要与那个显示屏生产国开战，战斗机岂不是要断供？</p><p>这就是全球化。</p><p>面对这种局面，很多国家开始思考，<strong>产业的大转移，真的是好事吗</strong>？</p><p><strong>第二，全球化让全球贫富差距扩大。</strong></p><p>全球化通过资源的自由流动，实现了优化配置，进而产生了更高的效率，更低的价格，以及更丰厚的利润，而所有这一切，对于那些因产业转移而承担消极后果的人们来说，则是另外一番图景。</p><p>在全世界范围内，确实一些国家因全球化而强大，但<strong>更多的国家，因为产业、人才、资金以及技术的抽离，每况愈下</strong>。</p><p>而在那些所谓“强大”的国家里，同样因为产业、人才、资金和技术的流动，发达地区更发达，落后地区更落后；少数阶层更富有，多数阶层更贫穷。</p><p>于是，最奇怪的情况出现了：在经历了70余年的狂奔后，所有国家，无论是受益国还是受损国，几乎都对全球化不满意。</p><p><strong>第三，全球化令那些最不该全球化的东西全球化了。</strong></p><p>在全球化之初，人们只是想到经济的效率将因资源的自由流动而提高，谁也没想到的是，<strong>许多糟糕的东西也全球化了</strong>。</p><p>首先，<strong>难民全球化了</strong>。众所周知，<strong>中东的难民几乎摧毁了繁荣富裕的西欧</strong>，然而，这并不全是难民的错，若没有欧洲各国对劳动力的渴求，谁也不会打开大门。结果，欧洲的一手好牌打丢了，成千上万的难民不仅没有带来有效的劳动力，反倒带来了无数的犯罪，以及对社会资源的天量消耗。</p><p>现在，数万墨西哥及中南美的难民又挤到了美墨边境，试图进入美国。</p><p>其次，<strong>极端宗教思想全球化了</strong>。西方世界常年与伊斯兰原教旨主义作战的结果是，恐怖主义作为实体被几近消灭，但恐怖主义的思想却依托着难民以及不断增加的伊斯兰教人口在欧美落地生根。今天，欧洲主要大城市都在伊斯兰化，荷兰、德国、英国从人口构成上看，50年内就将成为穆斯林国家。</p><p>再次，<strong>武器贩运与贩毒也全球化了</strong>，如中亚的塔吉克斯坦，几乎以从阿富汗向俄罗斯转运毒品为生，贩毒占了这个国家GDP的40%；<strong>疾病与瘟疫也全球化了</strong>，非洲的猪瘟直接导致了中国的猪肉价格上涨了120%，HIV成为了全球性的绝症；还有，像<strong>洗钱、走私、绑架、奴隶贩运……都全球化了</strong>。</p><p>越来越多的人们发现，全球化已经到了“利好出尽是利空”的转折点，再这么下去，祸害无穷而获利甚微，于是，美国选出了特朗普，英国开始脱欧，整个西方世界，保守派领袖纷纷上台，民族主义开始大回潮。</p><p>同时，各国也开始重建自己的产业系统；强化货币和金融主权；弱化联合国和其他国际组织的作用；或多或少地封闭边境，限制移民；重新回归宗教和传统价值观；部分国家甚至整军备战。</p><p>这个局面，有人称之为<strong>逆全球化</strong>。</p><p>不过，仍有一些国家对全球化抱有希望，或者说，<strong>他们对全球化就这样落幕并不甘心</strong>。</p><p>这些国家，或是产能大，需要为全球提供服务，或是市场大，需要消化大量境外来的商品，或是资源多，需要向境外巨幅出口，再或是技术依赖大，必须依靠全球的智力。总之，对这些国家而言，全球化的好处还是远远大于坏处。</p><p>中国就是这样的一个国家。</p><p>当然，不止中国，印度也是，还有东盟各国。</p><p><strong>由于利益攸关，这些年来，中国仍在逆势为全球化奔走呼号，甚至试图建立一个全球化的次级版本——“一带一路”</strong>。</p><p>中国试图告诉世界：产业狭窄没那么可怕，只要国际社会总体上和平发展，国际分工还是利大于弊的。贫富差距扩大也不是大问题，毕竟先富者可以用资金和技术帮助后进者；全球化引发的社会问题也并非不可控，只要有针对性地处理好恐怖分子、跨国犯罪等棘手问题，全球化总体上还是一片光明。</p><p><strong>可惜的是，突如其来的新冠肺炎打破了这一切</strong>。</p><p>这次肺炎疫情给本已降温的全球化又生生地泼了一盆冰水，让所有的国家都意识到了下面两个关键问题：</p><p><strong>第一，像中国这样体量的大国忽然停摆将发生什么？</strong></p><p>很多人都预测，这次疫情将重创中国经济，但很少人意识到，肺炎疫情也会重创世界经济。因为大量的中国工厂因疫情无法开工，严重缩减了全世界的商品供应。</p><p>全球连锁的<strong>沃尔玛超市有70%的商品来自中国，中国停工三周，沃尔玛的供应链就会断裂</strong>。如果中国停工三个月，世界上就没有沃尔玛了。</p><p>韩国的现代汽车由于大量的零部件来自中国，现在中国的疫情直接影响到了现代汽车的产量，许多生产线已经关闭。</p><p>苹果手机的代工厂主要在中国，按最乐观的情况估计，今年的销量也要下降10%。</p><p>前些天大家都在为日本的援助而感动，但真实的情况是，日本只能救急而不能救穷，因为日本市面上的口罩主要是中国生产的，现在日本的病例已经数百，日本政府已经在认真的考虑，<strong>如果中国持续无法开工，疫情又在日本爆发，日本的口罩从哪里来</strong>？</p><p>美国的疫情还算好，但<strong>美国市面上的几乎所有医用防护服都产自中国，如果美国同时爆发大规模疫情，后果将比中国还要惨烈</strong>。</p><p><strong>第二，在各国治理模式不一的情况下片面推进经济全球化是否明智？</strong></p><p>全球化最深刻矛盾，莫过于社会治理的各自为战与资源全球化配置之间的冲突。</p><p>通俗点说，<strong>经济上虽然协同一致，但政治上却天差地别，早晚会出事</strong>。</p><p>以这次肺炎为例，一国爆发瘟疫，它的信息是否第一时间会向国际社会公布？真实情况是否会有隐瞒？瘟疫的原发国应对是否得力？它的社会资源是否足够？它是否会接受他国的建议和要求？这些问题都将对世界构成巨大挑战。</p><p>这就好比一个单元楼有多个住户，一家发生火灾，如果这家人呼救得不及时，处理得不得当，最倒霉的其实是邻居。</p><p>现在的全球化就是这样一幅画面，<strong>一个国家的行为虽然会影响全球，但他到底要怎么做，能怎么做，又做过什么，其他国家既无信息来源，也无权置喙</strong>。</p><p>这次疫情就充分体现了这种脱节。虽然民间营造的气氛是“山川异域，风月同天”，但各国在如何应对这场瘟疫的问题上几乎吵到人仰马翻。</p><p>中国外交部说美国没有对中国提供实质性援助，美国反驳说它们其实才是捐助最多的国家；世界卫生组织希望各国不要对中国进行旅游限制，但一百多个国家先后都与中国断了航班；中国说有些国家的撤侨产生了恐慌，可朝鲜作为传统意义上的中国盟友却第一个封闭了边境。</p><p>此外，就病毒的来源，传播的途径，真实病例的人数，疫情控制的现状，中国政府应对方式的合理性等问题，国际社会始终存在不同看法。</p><p>其实，这也不难理解，这么大的疫情发展下去，对世界各国都会有影响，大家当然会去找最优的处理方案，并且七嘴八舌的提些意见，可是，国际社会是天然无政府的，想统一声音，一同行动，又谈何容易？</p><p>于是，几次碰壁后，不少国家有意无意地会走向另一个思路：</p><p><strong>首先，既然与别国进行产业协作风险这么大，那把各类产业放在自己手中总不会错吧？实在自己不能掌控的，就尽量分散，鸡蛋反正不能放在一个篮子里</strong>。</p><p>其次，与其坐等像新冠肺炎这样的疫情爆发，自己既伸不上手又说不上话，还不如早早远离，当年非洲的埃博拉病毒为什么没有波及欧美？还不是因为非洲根本没有纳入全球化么。</p><p>你看，一场肺炎，不仅坐实了全球化退潮的事实，还让那些模棱两可，似是而非的观念，那些在保守主义者心头萦绕却又难以启齿的话语，纷纷表露出来了。</p><p>所以，负责任地说，这<strong>次疫情已经成为压垮全球化的最后一根稻草</strong>。</p><p>我估计<strong>全球化将从现在彻底刹车，并缓缓地开始倒退</strong>。</p><p>虽然，<strong>这并不意味着世界将回到彼此孤立的年代</strong>，但全球化显然不会再前进和深化了，<strong>这对中国而言，绝不是好消息</strong>。</p><p>在可见的未来，出于对新冠肺炎负面影响的恐惧，<strong>会有更多的外国公司关闭在中国的分支机构，缩减生产能力，撤出大量资本，甚至是将工厂整体迁出</strong>。</p><p>如果疫情持续下去，这些公司撤出资源的速度还会加快。而那些离开的人、财、物，只要撤走，短时间内就不会再回来。</p><p>前两天我和一位朋友说，<strong>如果疫情不能在两个月内结束，疫情之后的中国经济，将会像被核弹炸过一样</strong>。</p><p>你也许会问，那全球化还有没有未来呢？答案是：会有的，但彼时的全球化必须有一个条件：</p><p><strong>全球社会治理模式的高度一致，甚至是统一</strong>。</p><p>简言之，经济的全球化必须以政治的一体化为前提。</p><p>因为，<strong>只有上层管理的统一，才能一方面实现资源全球配置的最大效益，另一方面又有效地遏制其负面影响</strong>。</p><p>当然，这种政治一体化的具体形态我们今天还无法预测，但可以肯定的是，它一定不同于现存的任何一种政治体制，因为全球化所需要的社会治理模式，至少要满足国际社会协同行动的基本需要，而当下各国的政治体制均无法达到这个目标。</p><p>其实，我一直觉得，<strong>全球化本来就应该是一项包含政治、经济、社会、文化等多方面的系统工程</strong>，但现在看，我们从一开始就走偏了，只顾着发展经济，忘记了其他的，结果，还得退回去重新走。</p><p>不过，最终实现目标那天，应该是在很遥远的未来了。</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂 </tag>
            
            <tag> Banbrick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL_页分裂</title>
      <link href="/2020/02/28/MySQL-%E9%A1%B5%E5%88%86%E8%A3%82/"/>
      <url>/2020/02/28/MySQL-%E9%A1%B5%E5%88%86%E8%A3%82/</url>
      
        <content type="html"><![CDATA[<p>文章来源：<a href="https://www.percona.com/blog/2017/04/10/innodb-page-merging-and-page-splitting/">InnoDB Page Merging and Page Splitting</a></p><hr><h1 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h1><p>假设有张表名为<code>windmills</code>，其数据文件目录结构可能如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">data/<br>  windmills/<br>      wmills.ibd<br>      wmills.frm<br></code></pre></td></tr></table></figure><p>数据存储在一个叫<code>wills.ibd</code>的文件中。该文件由N个<code>segments</code>组成，每个<code>segments</code>都关联着索引。</p><p>在删除数据行是，该文件的尺寸不会改变，<code>segment</code>自身会增大或缩小取决于其名为<code>extent</code>的子元素。一个<code>extent</code>只能存在于<code>segment</code>中并且固定大小为1MB（若page是默认页大小时）。一个<code>page</code>是<code>extent</code>的子元素且有默认16KB的大小。</p><p>因此，<code>extent</code>最多有64<code>pages</code>。一个页可以包含2~N的数据行。具体的行数取决于行的大小（在表结构中定义了）。Innodb中有一个强制规定，即一个页至少要包含两个数据行，由此有了另一个规定：数据行不能超过8000字节。<br><img class="re-small" alt="segment-extent-page" src="/images/mysql/segment_extent-e1491345857803.png" /><br><span class="img-subtitle">InnoDB uses B-trees to organize your data inside pages across extents, within segments.</span></p><h1 id="Roots-Branches-and-Leaves"><a href="#Roots-Branches-and-Leaves" class="headerlink" title="Roots,Branches,and Leaves"></a>Roots,Branches,and Leaves</h1><p>每个页(leaf)包含2~N的数据行，由主键索引来组织其结构。该树形结构有一些特殊的页来管理树枝(branches)，即所谓的<code>internal nodes</code>(INodes)。<br><img src="/images/mysql/Bplustree-1024x471.png" alt="b+树"><br><span class="img-subtitle">This image is just an example, and is not indicative of the real-world output below.</span><br>上图对应的具体细节如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROOT NODE <span class="hljs-comment">#3: 4 records, 68 bytes</span><br> NODE POINTER RECORD ≥ (<span class="hljs-built_in">id</span>=2) → <span class="hljs-comment">#197</span><br> INTERNAL NODE <span class="hljs-comment">#197: 464 records, 7888 bytes</span><br> NODE POINTER RECORD ≥ (<span class="hljs-built_in">id</span>=2) → <span class="hljs-comment">#5</span><br> LEAF NODE <span class="hljs-comment">#5: 57 records, 7524 bytes</span><br> RECORD: (<span class="hljs-built_in">id</span>=2) → (uuid=<span class="hljs-string">&quot;884e471c-0e82-11e7-8bf6-08002734ed50&quot;</span>, millid=139, kwatts_s=1956, <span class="hljs-built_in">date</span>=<span class="hljs-string">&quot;2017-05-01&quot;</span>, location=<span class="hljs-string">&quot;For beauty&#x27;s pattern to succeeding men.Yet do thy&quot;</span>, active=1, time=<span class="hljs-string">&quot;2017-03-21 22:05:45&quot;</span>, strrecordtype=<span class="hljs-string">&quot;Wit&quot;</span>)<br></code></pre></td></tr></table></figure><p>表结构:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `wmills` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `uuid` <span class="hljs-type">char</span>(<span class="hljs-number">36</span>) <span class="hljs-keyword">COLLATE</span> utf8_bin <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `millid` <span class="hljs-type">smallint</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `kwatts_s` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `<span class="hljs-type">date</span>` <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `location` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">COLLATE</span> utf8_bin <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `active` tinyint(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;1&#x27;</span>,<br>  `<span class="hljs-type">time</span>` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `strrecordtype` <span class="hljs-type">char</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">COLLATE</span> utf8_bin <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `IDX_millid` (`millid`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB;<br></code></pre></td></tr></table></figure><p>B-Tree都有一个根节点，本例子中根节点是#3。root页（即根节点）包含有索引的ID值，其INodes数量等信息。INodes页包含自身的属性，取值范围等信息。最后，是叶子节点(leaf nodes)，这里我们能获取到数据行。在这个例子中，我们可以看出来，#5号叶子节点包含57行数据，总共7524字节。</p><p>我们使用表和行来维护数据，而Innodb使用branches，pages，和records来维护数据。必须牢记一点，Innodb并不直接操作数据行，而是操作pages。当从磁盘上加载一页后，他会扫描改页来确定数据行(row/record)。</p><h1 id="Page-Internals"><a href="#Page-Internals" class="headerlink" title="Page Internals"></a>Page Internals</h1><p><code>page</code>可以是空的也可以是装满的。数据行由主键组织，若你的表有<code>AUTO_INCREMENT</code>属性，那么主键就是顺序的，如ID=1,2,3,4等等。<br><img src="/images/mysql/Locality_1.png" alt="页"></p><p><code>page</code>有另一个重要的属性：<code>MERGE_THRESHOLD</code>。其默认值是页大小的50%，它在Innodb的合并过程中很重要。<br><img src="/images/mysql/Locality_2.png" alt="页2"></p><p>插入数据时，页顺序填充（若装得下）。当页满了，下一行数据会填充到下一页中。</p><p>我们不仅能自上而下的遍历branches，也能水平遍历叶子节点。因为叶子节点含有指向下一叶子节点的指针。</p><p>例如，page#5有指向下一节点页#6的指针。而页#6含有一个指回页#5的指针，同时有一个指向下一节点页#7的指针。</p><p>该结构能加速顺序扫描的速度（如范围检索）。上述是对<code>AUTO_INCREMENT</code>的插入场景的描述。但若我们执行删除操作呢？</p><h1 id="Page-Mergeing"><a href="#Page-Mergeing" class="headerlink" title="Page Mergeing"></a>Page Mergeing</h1><p>当删除一行时，它并不会物理上删除该数据。而是标记为已删除，其占用的空间是可申领的状态。(Instead, it flags the record as deleted and the space it used becomes reclaimable.)<br><img src="/images/mysql/Locality_3.png" alt="页3"></p><p>当执行了足够多的删除操作，达到<code>MERGE_THRESHOLD</code>（默认是页大小的50%）时，Innodb开始检查附近的页（前一页和后一页），看看是否能通过合并两页来优化空间。<br><img src="/images/mysql/Locality_4.png" alt="页4"></p><p>本例中，页#6使用的空间不足其50%，页#5因为多次删除操作也有&lt;50%的使用率，从Innodb的角度看，他们是可以合并的。<br><img src="/images/mysql/Locality_5.png" alt="页5"></p><p>合并之后，页#5包含自身旧数据和页#6的数据，而页#6则为空留待使用。<br><img src="/images/mysql/Locality_6.png" alt="页6"></p><h1 id="Page-Splits"><a href="#Page-Splits" class="headerlink" title="Page Splits"></a>Page Splits</h1><p>上面提到过，但页使用满了，下一行数据会被写入下一页中。<br>但若我们遇到如下情景呢？<br><img src="/images/mysql/Locality_7.png" alt="页7"></p><p>页#10剩余空间不足以存放新的数据行(或更新操作)，按照上面的下一页逻辑，该行数据应插入到下一页，但实际上：<br><img src="/images/mysql/Locality_9.png" alt="页9"></p><p>页#11也满了，此时数据无法按既定的书序插入，该怎么办？<br>还记得上面提到的链表结构吗？此时，页#10含有前一页#9和后一页#11的指针。<br>Innodb只需要简单的如下操作：</p><ol><li>创建一个新的页</li><li>找到数据源页（页#10）中应该从哪开始分裂(按数据行级别)。</li><li>移动数据。</li><li>重新定义页之间的指向。<br><img src="/images/mysql/Locality_8.png" alt="页8"></li></ol><p>创建一个新页#12。<br><img src="/images/mysql/Locality_10.png" alt="页10"></p><p>页#11保持不变，改变的是页之间的指向关系：</p><ol><li>页#10将指向前一页#9和后一页#12。</li><li>页#12将指向前一页#10和后一页#11。</li><li>页#11将指向前一页#12和后一页#13。</li></ol><p>此时，B+树的路径在逻辑上仍然是连续的，但物理上，页之间是无序的，通常都在不同的<code>extent</code>中。</p><p>Innodb使用<code>INFORMATION_SCHEMA.INNODB_METRICS</code>跟踪页分裂的次数。</p><p>一旦页分裂发生，只能通过删除新页数据达到&lt;50%使用率来触发也合并来恢复。</p><p>或者通过<code>OPTIMIZE</code>优化表结构，这通常很消耗资源且需要很长时间。但有时也是唯一的办法（比如使用了uuid做主键）。</p><p>另外需要记住一点，当发生页分类或也合并时，Innodb会在索引上获取<code>x-latch</code>，在一个繁忙的系统中，这会是一个性能障碍。在Innodb中称为”悲观”更新，此时加的是悲观锁。这会造成索引上的锁竞争。若合并或分裂只操作了一页，被称为”乐观”更新，锁是乐观锁。</p><h1 id="不同主键的比较"><a href="#不同主键的比较" class="headerlink" title="不同主键的比较"></a>不同主键的比较</h1><p>良好的主键不但对读数据重要，也能在写数据时正确的分布数据。</p><p>一例中我们使用简单的自增ID做主键。二例中主键使用了ID（取值范围1-200）且自增。三例中我们使用了同样的ID做主键，但该主键关联到UUID上。</p><p>插入数据时，页分裂的情况如下：<br><img src="/images/mysql/split_1.png" alt="页分裂的对比"></p><p>前两例的数据分布更紧凑。也意味着它们有更好的空间利用率。例三有着大量空闲的页，意味着有大量的页分裂操作。</p><p>而在也合并的情况：<br><img src="/images/mysql/merges_1.png" alt="页合并的对比"></p><p>在<code>插入-更新-删除</code>操作下，自增ID的例子中合并操作更少，更低的合并成功率9.45%。而使用UUID为主键的例子中，合并操作更多且合并成功率更高22.34%</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL_B+Tree索引</title>
      <link href="/2020/02/27/MySQL-B-Tree%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/02/27/MySQL-B-Tree%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>索引是提高查询效率的，在MySQL中以B+树索引为主（绝大部分MySQL数据库引擎都是用的Innodb，而Innodb默认使用B+树）。<br>B+树索引又分为聚簇索引和非聚簇索引，本文着重介绍聚簇索引。</p><h1 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h1><p>聚簇索引并不是单独的索引类型（索引类型包含：主键索引、唯一索引、单列索引、聚合索引等），而是一种数据存储方式。其非叶子节点仅包含索引列，数据行存储在叶子节点上。<br>Innodb只保证相同页上的数据是连续的，但不同的页可能相距甚远。</p><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><ol><li>类似平衡二叉查找树：节点有序(左节点&lt;根节点&lt;右节点)，树是平衡的不会单边增长。</li><li>节点上存有多个索引值，控制树的深度，稳定查询效率。</li><li>节点大小是一个页4KB。</li></ol><h2 id="B-Tree和B-Tree的对比"><a href="#B-Tree和B-Tree的对比" class="headerlink" title="B-Tree和B+Tree的对比"></a>B-Tree和B+Tree的对比</h2><p><strong>B-Tree</strong><br><img src="/images/mysql/b-Tree.webp" alt="B树"></p><p><strong>B+Tree</strong><br><img src="/images/mysql/b+Tree.webp" alt="B+树"></p><h1 id="聚簇索引的优点"><a href="#聚簇索引的优点" class="headerlink" title="聚簇索引的优点"></a>聚簇索引的优点</h1><ol><li>叶子节点包含数据行，因此聚簇索引比非聚簇索引更快。</li><li>叶子节点中的数据是连续的，实现范围查找效率更高（叶子节点之间有顺序指针）。<br><img src="/images/mysql/b+tree_seq_ptr.webp" alt="叶子节点之间有顺序指针"></li></ol><h1 id="聚簇索引的缺点"><a href="#聚簇索引的缺点" class="headerlink" title="聚簇索引的缺点"></a>聚簇索引的缺点</h1><ol><li>更新聚簇索引代价很高，以为需要移动数据行到新的位置。</li><li>可能导致<a href="/2020/02/28/MySQL-%E9%A1%B5%E5%88%86%E8%A3%82/">页分裂</a>，从而某时刻导致大量的I/O操作。</li></ol><hr><p>参考资料：</p><ol><li><a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-indexes.html">8.3.1 How MySQL Uses Indexes</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/index-btree-hash.html">8.3.9 Comparison of B-Tree and Hash Indexes</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/multiple-column-indexes.html">8.3.6 Multiple-Column Indexes</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_covering_index">covering index</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247486057&idx=1&sn=eec75a0f6f2c408c8188658011c38e07&chksm=ebd74b68dca0c27e90096f0017ba5479774ae7643f2cecd72b011823df1411ab1659ea889b37&mpshare=1&scene=1&srcid=0227wKqrRDn5WWOWC5hOZnrW&sharer_sharetime=1582784840625&sharer_shareid=0a5f0581869913747e54ca097f77ea2b&key=e1d18effe01e13c45e831bca7ce32424fbdfcd17afd7bd8529258d0dbbde26ef9685b7359cbad4b5df760219307def5f806daf7c611d12fe08d4f7b5ffe113045975d784908d381965b74a306162d71d&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=ARKOykk77XHXzE9b6n4W5k0=&pass_ticket=LfdlJsZTmXBQdrVYQljTmpWvFMzoeQx6Wi9ewOu4ScxuKyysIBvhLO/8k6ZGN7MK">Mysql索引简明教程</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU4MzU4NzI5OA==&mid=2247483843&idx=2&sn=27c6d378f92635875a7ed050b8cc477d&chksm=fda7854ecad00c5829d4900630da7e0743e4939f0b0f725380de7ecc628f87e233e5eeec68bf&mpshare=1&scene=1&srcid=0227ui0mH6TQVfmAevkgdUeY&sharer_sharetime=1582784826674&sharer_shareid=0a5f0581869913747e54ca097f77ea2b&key=b75e9a2bedf85391600cf4de5ae4f18cbedc1b6042691e4a69bbd980e81afb35f3d12972039e7cf2f33db60509f07785dfe862de04514c2cb8223958d65ab05235af3eab5a7c76673629541c1c13c085&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=AQPGhtcoIKYENMY5ov+dq2E=&pass_ticket=LfdlJsZTmXBQdrVYQljTmpWvFMzoeQx6Wi9ewOu4ScxuKyysIBvhLO/8k6ZGN7MK">聚簇索引及 InnoDB 与 MyISAM 数据分布对比</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2NzA4MTkxNQ==&mid=2247486251&idx=1&sn=296f07b65b5a73a15337541fb4bc6572&key=e1d18effe01e13c43433cc33c5161f00872a430ca41b577f513fa082b7f46bd37471f7cfe2954afa430e0eaf04288da8b98daa275053c639d985c27ec0dd8b286dcf0196305776d4004cac349def25e0&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=AZxQ0x8eUrIpA2TZSIvCers=&pass_ticket=eYprKboj//Vkb9z2n1rVgrNb833slBE0lMIXwN27FvVBipjBM67fSOf2ZckEmBBo">不准犹豫！再有人问你为什么MySQL用B+树做索引，就把这篇文章发给她</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记_风物长宜放眼量，人间正道是沧桑 - 一位北美留学生的内心独唱</title>
      <link href="/2020/02/27/%E6%9D%82%E8%AE%B0-%E9%A3%8E%E7%89%A9%E9%95%BF%E5%AE%9C%E6%94%BE%E7%9C%BC%E9%87%8F%EF%BC%8C%E4%BA%BA%E9%97%B4%E6%AD%A3%E9%81%93%E6%98%AF%E6%B2%A7%E6%A1%91-%E4%B8%80%E4%BD%8D%E5%8C%97%E7%BE%8E%E7%95%99%E5%AD%A6%E7%94%9F%E7%9A%84%E5%86%85%E5%BF%83%E7%8B%AC%E5%94%B1/"/>
      <url>/2020/02/27/%E6%9D%82%E8%AE%B0-%E9%A3%8E%E7%89%A9%E9%95%BF%E5%AE%9C%E6%94%BE%E7%9C%BC%E9%87%8F%EF%BC%8C%E4%BA%BA%E9%97%B4%E6%AD%A3%E9%81%93%E6%98%AF%E6%B2%A7%E6%A1%91-%E4%B8%80%E4%BD%8D%E5%8C%97%E7%BE%8E%E7%95%99%E5%AD%A6%E7%94%9F%E7%9A%84%E5%86%85%E5%BF%83%E7%8B%AC%E5%94%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="文章来源：微信文章"><a href="#文章来源：微信文章" class="headerlink" title="文章来源：微信文章"></a>文章来源：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247486264&idx=2&sn=444d27fa529444c508fc449dbd83b1ff&chksm=cea244f3f9d5cde5b422409eb0966fa47dbb471ea8391af5c7a84760e30a344cf154838b4131&mpshare=1&scene=1&srcid=&sharer_sharetime=1582789714830&sharer_shareid=0a5f0581869913747e54ca097f77ea2b&key=8281d14d0868e11709124fa096ac5eb1d10010677af59117c24b6a1f37a2bd19f5b567ed76b336d150bb1dda5190182ed8f5720523e1a58cf2a6678c9e7544d31afdb0398fd15309634c6085acbb4be3&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=Ab8wF4o7U7a4HxuIJFTA6XA=&pass_ticket=LfdlJsZTmXBQdrVYQljTmpWvFMzoeQx6Wi9ewOu4ScxuKyysIBvhLO/8k6ZGN7MK">微信文章</a></h2><p>摘录部分，点击上方文章来源浏览原文。</p><h2 style="margin: 1.5em 0px; padding: 0px; font-size: 1.4em; max-width: 100%; box-sizing: border-box; letter-spacing: 0.544px; color: rgb(21, 153, 87); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; overflow-wrap: break-word !important;"><span style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word !important; font-size: inherit; color: inherit; line-height: inherit;">引言</span><br style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; overflow-wrap: break-word !important;"></h2><p style="margin: 1.5em 0px; padding: 0px; max-width: 100%; box-sizing: border-box; clear: both; min-height: 1em; letter-spacing: 0.544px; font-size: 16px; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; overflow-wrap: break-word !important;">我对于本科时光的印象，还停留在那所普通大学的建筑物之间，<strong style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word !important; color: inherit; font-size: inherit; line-height: inherit;">我坐在大学的时光长廊里，满眼望去，都是经历的过的故事</strong>。可毕业后回首，却很少有人能说，自己从来没有迷茫过。迷茫，仿佛就是一团<code style="margin: 0px 2px; padding: 2px 4px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; font-size: inherit; color: rgb(233, 105, 0); line-height: inherit; border-radius: 4px; background: rgb(248, 248, 248);">乌云</code>，笼罩在每一个心中怀有抱负的人的头上。每当夜深人静，思绪归于对自己人生未来的严肃思考，不知去往何处的苦闷，再加之不断迫近的升学/就业选择的压力，一些看似周密的计划，由于想把每一环都做的尽善尽美，往往不仅减少了反馈（一切的目标、报偿都在最后）、还因为人生的不确定性而失败：以保研为例，我常常见到一些平常学习认真、热心参加学术活动的人，但是由于不关心所在院系制度，到保研时因为一些硬性规定（如必须完成某些并不喜欢的所谓<code style="margin: 0px 2px; padding: 2px 4px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; font-size: inherit; color: rgb(233, 105, 0); line-height: inherit; border-radius: 4px; background: rgb(248, 248, 248);">保研必修课</code>）、或者是不公平的排名标准（比如说活动成绩、竞赛成绩计算很高，导致成绩上产生的差距在计算时权重过低）导致与原本准备了很长时间的保研机会失之交臂，而此时离考研也已不远，本来就没有提前准备，也很容易落榜。在这样的过程中，亲历者绝望、愤懑甚至因而导致抑郁的，我都见过，以至于都有些麻木了。太阳照常升起，一个人的悲哀苦痛，回到这个宏大的时代与社会中，连一粒尘埃也算不上。而那些看多了这样的故事的人，也难免兔死狐悲，故而更难聚集其一股<code style="margin: 0px 2px; padding: 2px 4px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; font-size: inherit; color: rgb(233, 105, 0); line-height: inherit; border-radius: 4px; background: rgb(248, 248, 248);">欲与天公试比高</code>的拼搏的意志。</p><p style="margin: 1.5em 0px; padding: 0px; max-width: 100%; box-sizing: border-box; clear: both; min-height: 1em; letter-spacing: 0.544px; font-size: 16px; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; overflow-wrap: break-word !important;">2019年7月29日，《中国青年报》刊发《大学生抑郁症发病率逐年攀升 大一和大三高发》引发读者广泛关注。有31.2万网民参与了中国青年报微博发起的&nbsp;<strong style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word !important; color: inherit; font-size: inherit; line-height: inherit;">大学生抑郁症发病率逐年攀升，你觉得自己有抑郁倾向吗</strong>的网络投票，其中认为自己<code style="margin: 0px 2px; padding: 2px 4px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; font-size: inherit; color: rgb(233, 105, 0); line-height: inherit; border-radius: 4px; background: rgb(248, 248, 248);">有抑郁倾向且情况很严重</code>的达到了8.6万，占比27.6%，若是统计为<code style="margin: 0px 2px; padding: 2px 4px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; font-size: inherit; color: rgb(233, 105, 0); line-height: inherit; border-radius: 4px; background: rgb(248, 248, 248);">有过低沉的倾向</code>，则有约18万人，占比为60.8%。</p><p style="margin: 1.5em 0px; padding: 0px; max-width: 100%; box-sizing: border-box; clear: both; min-height: 1em; letter-spacing: 0.544px; font-size: 16px; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; overflow-wrap: break-word !important;">一些市面上的<code style="margin: 0px 2px; padding: 2px 4px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; font-size: inherit; color: rgb(233, 105, 0); line-height: inherit; border-radius: 4px; background: rgb(248, 248, 248);">流行语录</code>，似乎也从侧面说出了这种感觉：什么<strong style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word !important; color: inherit; font-size: inherit; line-height: inherit;">我所得到的不过是侥幸</strong>，纵然得到了一时的世俗意义上的<code style="margin: 0px 2px; padding: 2px 4px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; font-size: inherit; color: rgb(233, 105, 0); line-height: inherit; border-radius: 4px; background: rgb(248, 248, 248);">成功</code>，由于从来没有对自己的人生命运有一个通盘的规划与目标，即使通过搜集到的一些信息、经验走了一些捷径，但是短暂的兴奋后，却又会重新回到迷茫与空虚中来。我忍不住还是要发问：上了好学校、找了好工作、赚了不少钱，那然后呢？倘若有一步，没能像这样环环相扣地被达成，那又该怎么办呢？纯粹的人往往能在一个方向做出不俗的成绩，可过于纯粹，就难以承受突如其来的打击，难以接受自己的规划被命运玩弄，付之东流。</p><p style="margin: 1.5em 0px; padding: 0px; max-width: 100%; box-sizing: border-box; clear: both; min-height: 1em; letter-spacing: 0.544px; font-size: 16px; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; overflow-wrap: break-word !important;">回想我的大学生活，也的确是这样：一起朝夕相处的同学朋友们，虽然可以一起感慨未来的未知与自身的无力，可自己的命运最终还是只能自己把握，总要面对那条<code style="margin: 0px 2px; padding: 2px 4px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; font-size: inherit; color: rgb(233, 105, 0); line-height: inherit; border-radius: 4px; background: rgb(248, 248, 248);">只能一个人走完的路</code>。而在我在大学期间认识的大约几百人里，真正能有坚定的三观信仰，又努力去做的（即所谓<code style="margin: 0px 2px; padding: 2px 4px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; font-size: inherit; color: rgb(233, 105, 0); line-height: inherit; border-radius: 4px; background: rgb(248, 248, 248);">知行合一</code>的），实在是凤毛麟角，而且这往往出自他们不断地痛苦地思考与试错，有时甚至还需要一点运气。</p><p style="margin: 1.5em 0px; padding: 0px; max-width: 100%; box-sizing: border-box; clear: both; min-height: 1em; letter-spacing: 0.544px; font-size: 16px; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; overflow-wrap: break-word !important;">人本应该是越长大越坚强越成熟的，可在大学期间因迷茫和各种诱惑堕落的大多数人，其心志能力，往往连高中时代都不如，既失去了当初的纯粹与坚定，又没有真正获得一些面对问题、解决问题的勇气与能力。这种普遍的迷茫，不只是存在于那些<code style="margin: 0px 2px; padding: 2px 4px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; font-size: inherit; color: rgb(233, 105, 0); line-height: inherit; border-radius: 4px; background: rgb(248, 248, 248);">混吃等死</code>的人中，我认识的无数的名列前茅、努力拼搏的同学，也还是深受其苦。笔者也是前两年，才逐渐开始想明白。像这样大环境的精神空虚与迷茫，究竟是谁的责任呢？</p><p style="margin: 1.5em 0px; padding: 0px; max-width: 100%; box-sizing: border-box; clear: both; min-height: 1em; letter-spacing: 0.544px; font-size: 16px; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; overflow-wrap: break-word !important;">毕业晚会时，一曲<code style="margin: 0px 2px; padding: 2px 4px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; font-size: inherit; color: rgb(233, 105, 0); line-height: inherit; border-radius: 4px; background: rgb(248, 248, 248);">谁的青春不迷茫</code>唱出了我的心声，歌词非常写实，也写出了很多人的青春，可是让我有些近乎条件反射般的讨厌：<strong style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word !important; color: inherit; font-size: inherit; line-height: inherit;">谁的青春又想迷茫呢</strong>?</p><p style="margin: 1.5em 0px; padding: 0px; max-width: 100%; box-sizing: border-box; clear: both; min-height: 1em; letter-spacing: 0.544px; font-size: 16px; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; overflow-wrap: break-word !important;">一个人、一小群人的迷茫，尚且可以认为是个人心理问题，抑或是环境，甚至是遗传；可成批的学生都怀疑人生、看不到未来的出路、不知道自己要干什么，这究竟是谁的责任呢？辗转反侧后我觉得需要用文字来阐述一下我的观点。</p><p style="margin: 1.5em 0px; padding: 0px; max-width: 100%; box-sizing: border-box; clear: both; min-height: 1em; letter-spacing: 0.544px; font-size: 16px; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; overflow-wrap: break-word !important;">那么究竟为什么会变成这样呢？就有没有什么合理的办法、科学的想法可以借鉴呢？作为个人，我们是不是也应该参考古今中外的真正的大人物、向那些<code style="margin: 0px 2px; padding: 2px 4px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; font-size: inherit; color: rgb(233, 105, 0); line-height: inherit; border-radius: 4px; background: rgb(248, 248, 248);">慧人</code>借鉴呢？</p><p style="margin: 1.5em 0px; padding: 0px; max-width: 100%; box-sizing: border-box; clear: both; min-height: 1em; letter-spacing: 0.544px; font-size: 16px; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; overflow-wrap: break-word !important;">我的青春并不想迷茫，我相信大家的青春也都不想迷茫。虽然因为运气我有了一点成绩，但是我觉得这不少都得归于时运的赐予，不把这样的经验分享给更多还在痛苦思考中继续前行的人，我无法获得良心的安宁。</p><p style="margin: 1.5em 0px; padding: 0px; max-width: 100%; box-sizing: border-box; clear: both; min-height: 1em; letter-spacing: 0.544px; font-size: 16px; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; overflow-wrap: break-word !important;">本文将从成因开始着手分析<code style="margin: 0px 2px; padding: 2px 4px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word; font-size: inherit; color: rgb(233, 105, 0); line-height: inherit; border-radius: 4px; background: rgb(248, 248, 248);">迷茫</code>这个问题，从问题的产生到表现、再到教育制度、人性的缺点、再到我们可以锻炼的能力以及可以采取的想法（<strong style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box; overflow-wrap: break-word !important; color: inherit; font-size: inherit; line-height: inherit;">由于笔者也算是半个做技术的，相关的能力将主要以技术为基础</strong>）。</p><hr><p>摘录部分，点击上方文章来源浏览原文。</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂 </tag>
            
            <tag> Banbrick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络_tcp_udp</title>
      <link href="/2020/02/27/%E7%BD%91%E7%BB%9C-tcp-udp/"/>
      <url>/2020/02/27/%E7%BD%91%E7%BB%9C-tcp-udp/</url>
      
        <content type="html"><![CDATA[<h1 id="先复习下OSI七层模型"><a href="#先复习下OSI七层模型" class="headerlink" title="先复习下OSI七层模型"></a>先复习下OSI七层模型</h1><p><img src="/images/linux/OSI_layers.jpeg" alt="OSI七层模型"><br><img src="/images/linux/OSI_2_tcpip.jpeg" alt="OSI七层模型"></p><h1 id="TCP-UDP工作在传输层"><a href="#TCP-UDP工作在传输层" class="headerlink" title="TCP/UDP工作在传输层"></a>TCP/UDP工作在传输层</h1><p><img src="/images/linux/tpcip_struct.jpeg" alt="tcp/ip协议族"></p><p>TPC/IP协议族</p><ul><li><strong>ARP</strong>: 是正向解析地址协议(Address Resolution Protocol),通过已知的IP,寻找对应主机的MAC地址.</li><li><strong>RARP</strong>: 是反向地址转换协议,通过MAC地址确定IP地址.</li><li><strong>IP</strong>: 是因特网互联协议<code>Internet Protocol</code></li><li><strong>ICMP</strong>: 是Internet控制报文协议<code>Internet Control Message Protocol</code>,用于在IP主机、路由器之间传递控制消息.</li><li><strong>IGMP</strong>: 是Internet组管理协议<code>Internet Group Management Protocol</code>,是协议族中的组播协议,运行在主机和组播路由器之间.</li><li><strong>TCP</strong>: 传输控制协议<code>Transmission Control Protocol</code>,一种面向连接的、可靠的、基于字节流的传输层协议.</li><li><strong>UDP</strong>: 用户数据报协议<code>User Datagram Protocol</code>，是无连接的、不可靠的、基于报文的传输层协议.</li><li><strong>HTTP</strong>: 超文本传输协议<code>Hyper Text Transfer Protocol</code>,互联中应用最广泛的一种协议.</li><li><strong>FTP</strong>: 文件传输协议<code>File Transfer Protocol</code></li></ul><h2 id="用户数据报协议-UDP（User-Datagram-Protocol）"><a href="#用户数据报协议-UDP（User-Datagram-Protocol）" class="headerlink" title="用户数据报协议 UDP（User Datagram Protocol）"></a>用户数据报协议 UDP（User Datagram Protocol）</h2><p>UDP面向数据报，无连接，不可靠，可以一对一，一对多，多对一，多对多互相通信（组播）。</p><p>即无需确认双方状态，数据准备完毕即刻发送，也不需确认对方是否接收成功。<br><img src="/images/linux/UDP_struct.png" alt="UDP_struct"></p><h2 id="传输控制协议-TCP（Transmission-Control-Protocol）"><a href="#传输控制协议-TCP（Transmission-Control-Protocol）" class="headerlink" title="传输控制协议 TCP（Transmission Control Protocol）"></a>传输控制协议 TCP（Transmission Control Protocol）</h2><p>面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信。每一个TCP连接只能是点对点（一对一）的。<br><img src="/images/linux/TCP_struct.jpeg" alt="TCP_struct"></p><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p><img src="/images/linux/tcp_3-way_handshake.jpeg" alt="三次握手"></p><ol><li>服务器等待连接中…</li><li><code>SYN=1,Seq=x</code> - 客户端已准备就绪，询问服务器是否就绪。</li><li><code>SYN=1,Seq=y,ACK=1,ACKnum=x+1</code> - 服务端收到询问并已准备就绪，询问客户端是否就绪。</li><li><code>ACK=1,ACKnum=y+1</code> - 服务器收到确认，双方确认完成，连接建立。</li><li>开始发送数据</li></ol><p>其中，步骤1-2是第一次握手，表明客户端发送正常且服务端接收正常；2-3是第二次握手，表明服务端发送正常，客户端接收正常。此时，客户端能确认自己和服务端都能正常发送、接收，但服务端还不知道客户端的接收能力。所以有了3-4的第三次握手，服务器确定了客户端接收和发送正常。此时连接建立，后续开始发送数据。</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p><img src="/images/linux/tcp_4-way_handshake.jpeg.jpeg" alt="四次挥手"></p><ol><li><code>FIN=1,seq=x</code> - 客户端通知服务端我要断开了。</li><li><code>ACK=1,ACKnum=x+1</code> - 服务端告诉客户端，我收到了断开请求。</li><li>此时服务端不能立刻答复客户端关闭连接，因为可能还有数据在准备中，当这些数据发送完成后。</li><li><code>FIN=1,seq=y</code> - 服务端告诉客户端，你可以断开了。</li><li><code>ACK=1,ACKnum=y+1</code> - 服务端收到客户端已经断开连接。</li><li>服务端连接断开。</li></ol><p>其中，第二次握手之后，并不是立刻断开连接，需要等待服务端将缓冲区的数据发送完毕。而第四次握手之后，服务端关闭了，但客户端需要等待两个握手时间再关闭：因为若服务器未收到最后的<code>ACK</code>，会重新发起第三次握手请求，这个2次握手时间就是在等待这种可能的情况。若未收到第三次握手请求，客户端就可以正常断开了。</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api开发_认证_授权</title>
      <link href="/2020/02/27/Api%E5%BC%80%E5%8F%91-%E8%AE%A4%E8%AF%81-%E6%8E%88%E6%9D%83/"/>
      <url>/2020/02/27/Api%E5%BC%80%E5%8F%91-%E8%AE%A4%E8%AF%81-%E6%8E%88%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p>在接口开发中，第一步要解决的问题就是认证和授权。</p><h1 id="Authentication-认证"><a href="#Authentication-认证" class="headerlink" title="Authentication - 认证"></a>Authentication - 认证</h1><p>即使用某种凭证来证明身份的过程。如用户使用账号+密码，使用手机号+短信码，使用指纹识别等。</p><h1 id="Authorization-授权"><a href="#Authorization-授权" class="headerlink" title="Authorization - 授权"></a>Authorization - 授权</h1><p>将某种凭证(一般非原始认证信息，且有过期时间、使用次数、使用频率等限制)给予第三方使用的过程。如允许微信使用相册的能力，允许小程序读取微信基本信息的能力</p><h1 id="Credential-凭证"><a href="#Credential-凭证" class="headerlink" title="Credential - 凭证"></a>Credential - 凭证</h1><p>用于认证或授权的信息。如账号、密码、短信码、cookie、session、token等。</p><h2 id="Cookie-and-Session"><a href="#Cookie-and-Session" class="headerlink" title="Cookie and Session"></a>Cookie and Session</h2><p>本质上，cookie存储在客户端（一般是浏览器），session存储在服务端。<br>但session同时依赖于session-id（存储在客户端）来和客户端关联（一个请求到达服务端，依赖session-id来定位到具体的session）。因此Cookie和Session</p><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><p>用户认证成功后，由服务器签发的凭证（一般有过期时间、使用频率等限制），在今后调用api时使用。</p><h2 id="JWT-Token的一种实现方式"><a href="#JWT-Token的一种实现方式" class="headerlink" title="JWT - Token的一种实现方式"></a>JWT - Token的一种实现方式</h2><p><a href="https://tools.ietf.org/html/rfc7519">JWT规范</a><br><a href="https://jwt.io/introduction/">Auth0社区资料</a></p><h2 id="Oauth2-0-Token实现的一种方式"><a href="#Oauth2-0-Token实现的一种方式" class="headerlink" title="Oauth2.0 - Token实现的一种方式"></a>Oauth2.0 - Token实现的一种方式</h2><p>现流行的实现开放API的授权方案。<br><a href="https://oauth.net/2/">Oauth2.0社区技术资料</a></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL_事务</title>
      <link href="/2020/02/26/MySQL-%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/02/26/MySQL-%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>还未填坑……</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL_分库分表</title>
      <link href="/2020/02/26/MySQL-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
      <url>/2020/02/26/MySQL-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>还未填坑……</p><hr><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5NzMyMjUwMg==&mid=2247483970&idx=1&sn=d864b88ccd3c90878f3ddfb41e1f2220&chksm=a6da882b91ad013daf03eecf77725751abeef76fcb2d0777809c64d2ab9cfaf9c9c6987c7499&mpshare=1&scene=1&srcid=02269DRVKkj2oGIWkYLaoWsP&sharer_sharetime=1582723262925&sharer_shareid=0a5f0581869913747e54ca097f77ea2b&key=d9c35d22f9135c5ec7daa4e7e97f10aa42cbdfcab4ff49595ba842a971eb4383b4bbacaeb2a68cdabcefe2d365139a19f724e967cc3e6a4bf2d288f6e0ca9fe428a6065c8e57db3488481093eb8781fc&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=AW05tKRa8IUJCtLhkFweq3w=&pass_ticket=eYprKboj//Vkb9z2n1rVgrNb833slBE0lMIXwN27FvVBipjBM67fSOf2ZckEmBBo">MySQL 分库分表方案，总结的非常好！</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记_求职_程序员现在跳槽容易么</title>
      <link href="/2020/02/26/%E6%9D%82%E8%AE%B0-%E6%B1%82%E8%81%8C-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%8E%B0%E5%9C%A8%E8%B7%B3%E6%A7%BD%E5%AE%B9%E6%98%93%E4%B9%88/"/>
      <url>/2020/02/26/%E6%9D%82%E8%AE%B0-%E6%B1%82%E8%81%8C-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%8E%B0%E5%9C%A8%E8%B7%B3%E6%A7%BD%E5%AE%B9%E6%98%93%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>文章来源：猎聘App</p><h1 id="工作7年-的程序员，从大厂跳槽竟然没人要"><a href="#工作7年-的程序员，从大厂跳槽竟然没人要" class="headerlink" title="工作7年+的程序员，从大厂跳槽竟然没人要"></a>工作7年+的程序员，从大厂跳槽竟然没人要</h1><p>至今工作也8年了，回想起来，一时间难免感慨，时间真的过的太快了。</p><p>当初在北京的4年多，是我工作中最精彩的一段经历，这也是为何我的小说以我在北京打拼时的真实经历为背景，因为那是一段难忘而又精彩的时光。</p><p>16年偶得一个大厂的offer，因此我就毅然决然的来到了杭州，来到杭州以后，我的工作平淡了许多，或许和年龄有一定关系，也或许和杭州这个宜居的城市氛围有关。</p><p>大厂有各种小公司没有的福利和待遇优势，因此在这家公司的3年，我住进了自己的房子，也生了个可爱的儿子，也有了自己的豪车，总的来说，在老东家的这3年里，我收获了很多，不仅仅是工作上的，更是生活上的。</p><p>但是，天下没有不散的宴席，3年了，我也知道，不能再继续沉沦下去，因此我在19年，果断开启了人生第4次跳槽之路。</p><p>此时我已经过了而立之年，和当初在北京跳槽时，我明显感觉出了很大的不同。</p><p>接下来，我就和大家简单聊聊，我这次跳槽的感受，相信对于很多同学应该有些帮助和参考，特别是在杭州的同学。　</p><p style="margin:1.12em 0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;line-height:1.8;font-family:inherit;vertical-align:baseline;min-height:1em;text-align:center"><span style="margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;font-size:15px;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="margin:0px;padding:0px;border:0px;font-style:italic;font-variant:inherit;font-weight:inherit;font-size:40px;line-height:inherit;font-family:'-apple-system-font' , 'blinkmacsystemfont' , 'helvetica neue' , 'pingfang sc' , 'hiragino sans gb' , 'microsoft yahei ui' , 'microsoft yahei' , 'arial' , sans-serif;vertical-align:baseline;color:rgb( 255 , 76 , 0 );letter-spacing:0.544px">1</span></span></p><p style="margin:1.12em 0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;line-height:1.8;font-family:inherit;vertical-align:baseline;min-height:1em;text-align:center"><span style="margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;font-size:18px;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="font-weight:bolder;margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-size:inherit;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="margin:0px;padding:0px;border:0px;font:inherit;vertical-align:baseline">整体感观</span></span></span></p> <p>先谈一谈这次跳槽经历的整体感观，用一个字总结就是——难！</p><p>实话说，这在我跳槽之前是完全想象不到的，在我想来，以前在北京的时候，我啥大厂背景也没有，学校也不咋地，都能每次轻松跳槽，拿到一个理想的offer。</p><p>如今我技术肯定比以前更强了，而且还有大厂的经历，跳槽应该是手到擒来。</p><p>谁曾想，事与愿违，事实是，这一次跳槽我碰了很多壁。</p><p>有某公司谈好的最后突然变卦了，说因为我学历不够，事实上应该是HC突然被锁死了。也有和某公司HR畅聊到深夜，就为了那几千块钱工资，最后还是没谈拢。</p><p>也有某公司面试，我驱车40+公里前往，足足在门口等了2个小时，才看见面试官晃晃悠悠的来到。更有某公司HR在公开场合恶意诋毁我，最终差点影响我离职。</p><p>这些具体是什么公司，这里就不说了，总之都是一些让人十分头疼的经历。</p><p>当然了，也有一些十分真诚的公司，比如某车、某虹、某喽，虽然最终没有谈拢，但也算是为这冰冷的市场，添加了一份温暖。</p><p>总的来说，我这次跳槽一共面试了将近20家公司，其中涵盖了杭州所有大公司，以及一些中小型公司，但真正拿到offer的，只有4家，而这4家中真正有竞争力的offer，只有2家！</p><p>是的，你没有看错，只有2家！</p><p>当然了，找工作就和找老婆一样，不管多少，最终也只能选择一个，因此一个也足以了。</p><p>但这结果却和我预想的有很大差别，本来我以为从大厂出来，拿offer应该是拿到手软，然后被众多HR围着大喊“来我们这里吧”，最后我勉为其难的选择一家公司，然后对其它公司纷纷致以诚挚的歉意，充分体现我的逼格和地位。</p><p>谁曾想，最后我只能在可怜的2个offer之间稍微徘徊一下，就可以选择了，因为没有别的选择给你了。</p><p>事后，我仔细回想了下，为何这次面试会出现这样的结果，是因为自己的技术不到家吗？</p><p>我觉得应该不是，虽然我不敢说技术多强，但应该也不会太差，所以这肯定不是原因，至少不是主要的原因，因为很多公司最终没谈拢，并不是我技术不够的原因。</p><p>那到底是因为什么呢？接下来我和大家一一探讨下，如果有碰到同样问题的同学，也可以参考下。</p><p style="margin:1.12em 0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;line-height:1.8;font-family:inherit;vertical-align:baseline;min-height:1em;text-align:center"><span style="margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;font-size:15px;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="margin:0px;padding:0px;border:0px;font-style:italic;font-variant:inherit;font-weight:inherit;font-size:40px;line-height:inherit;font-family:'-apple-system-font' , 'blinkmacsystemfont' , 'helvetica neue' , 'pingfang sc' , 'hiragino sans gb' , 'microsoft yahei ui' , 'microsoft yahei' , 'arial' , sans-serif;vertical-align:baseline;color:rgb( 255 , 76 , 0 );letter-spacing:0.544px">2</span></span></p><p style="margin:1.12em 0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;line-height:1.8;font-family:inherit;vertical-align:baseline;min-height:1em;text-align:center"><span style="margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;font-size:18px;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="font-weight:bolder;margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-size:inherit;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="margin:0px;padding:0px;border:0px;font:inherit;vertical-align:baseline">市场</span></span></span></p> <p>没错，我觉得，第一个原因就是——市场。</p><p>我在北京的那几年，刚好赶上一波P2P的浪潮，当时只要是做P2P的，工资都给的贼高，而且对程序员的需求简直是供不应求。</p><p>但是随着最近P2P被整治，一大批公司倒闭，再加上互联网的发展到了一定瓶颈期，可创业的项目越来越少，因此，投资人在互联网这块都变的冷静了，资金开始大量流入到其它行业。</p><p>不仅如此，一些原来的大厂，存活起来也越来越艰难，因为很多大厂存活都是靠的一条主业务，当这个主业务不行的时候，如果没有开辟出新的战场，那就只能饮鸠止渴了。</p><p>也因此，前段时间，很多公司爆出裁员的消息，也被证实有很多是真实的。</p><p>这样一来，大量大厂的程序员涌入市场，再次加剧这种情况。</p><p>当然，市场冷却这背后还有一个原因，那就是做程序员的越来越多了，新人也越来越强了，985研究生可以说到处都是，而培训机构大批量的量产程序员，更是加剧了这种情况。</p><p>这或许也是因为，程序员这个职业经过一段时间的沉淀，逐渐打出了“入行快、工资高”的标签，因此吸引了很多年轻人入行。</p><p>你想啊，有几个职业，可以培训个一年半载，未来就可以月薪轻松上万，甚至2、3万的。</p><p>不过这也正常，中国或者说市场一直都是这样，就拿开网吧来说，第一批开网吧的，都是挣了不少钱的。</p><p>但随着越来越多的人意识到，开网吧原来这么挣钱，然后都开始开网吧的时候，网吧的生意也就越来越难做了，再加上现在大部分家庭都有电脑，让网吧的生意更是雪上加霜。</p><p>这就是聚集效应了，就像我县城里的KTV一样，如果你发现某家KTV特别火，那么不用多久，就会有N家KTV开业，迫使原来独揽风骚的你必须进步和改进，而最终活下来的，往往只有那么1、2家。</p><p>总之一句话，只有自己不断的跟进时代，才能不被丢弃，市场规律我们是无法抗衡的，学会SSH，走遍天下都不怕的时代，已经一去不复返了。</p><p>同时，如今是跳槽黄金期，我也想奉劝下各位同学，要量力而行，别出来后才发现，原来你并不是那么吃香。</p><p>当然，跳槽的脚步也不要因为畏惧就退缩，我也只是让大家跳之前，要认真了解下自己的水平和市场，而且我始终认为，时刻想着跳槽是工作当中主要的学习和进步动力。</p><p>当然了，想着跳槽不是必须要跳槽，而是说你要为跳槽时刻准备着，这样你才有动力去学习。</p><p>想一想某务员，为啥这些人被贴上了不思进取，坐吃山空的标签，虽然这有些武断了，但也确实无风不起浪。而我并不认为这些某务员都是没有上进心的，而是一种思想左右了他，那就是——这个工作我要干一辈子，我不需要跳槽。</p><p>既然不需要跳槽，我还学习干嘛？这样人就很容易懒惰，这就是人的本性，这种人人都有的惰性，大部分人都不能幸免。</p><p>如果你幸免了，也就是没想着跳槽，但依然学习动力十足，我只能说：“你当前所在的公司绝对还不超过2年！你的热乎劲还没过，待你长发及腰，我们再来看。”　　</p><p style="margin:1.12em 0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;line-height:1.8;font-family:inherit;vertical-align:baseline;min-height:1em;text-align:center"><span style="margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;font-size:15px;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="margin:0px;padding:0px;border:0px;font-style:italic;font-variant:inherit;font-weight:inherit;font-size:40px;line-height:inherit;font-family:'-apple-system-font' , 'blinkmacsystemfont' , 'helvetica neue' , 'pingfang sc' , 'hiragino sans gb' , 'microsoft yahei ui' , 'microsoft yahei' , 'arial' , sans-serif;vertical-align:baseline;color:rgb( 255 , 76 , 0 );letter-spacing:0.544px">3</span></span></p><p style="margin:1.12em 0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;line-height:1.8;font-family:inherit;vertical-align:baseline;min-height:1em;text-align:center"><span style="margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;font-size:18px;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="font-weight:bolder;margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-size:inherit;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="margin:0px;padding:0px;border:0px;font:inherit;vertical-align:baseline">天花板</span></span></span></p> <p>当初在北京跳槽的时候，我的工资还比较低，那个时候随便跳槽涨一涨，就是50%甚至更高的比例，哪怕在同一家公司不跳槽，有的时候涨薪都是20%甚至30%的在涨。</p><p>但是现在，我已经过了而立之年，工资和待遇上，已经达到了一个瓶颈，想要再保持这样的涨薪幅度，自然会难上加难。</p><p>这就像你5000涨到10000，可能很容易就翻倍了，但你想2万涨到4万翻个倍，那难度就不可同日而语了。</p><p>更何况，我现在在杭州，和北京相比，杭州的IT压根和北京就不是一个档次的，所以就更是艰难了，毕竟公司太少，大公司更少。</p><p>其实这种困境，也就是很多人常说的“中年危机”了，以前我不理解，现在多少也有点理解了这个词背后的含义。</p><p>其实就是，你的能力和待遇都到了瓶颈，当你想跳槽时，你会发现，你特么只能原地踏步，甚至倒退。更甚者，哪怕你不跳槽，也会一不小心被开，这就是“中年危机”的真实写照了。</p><p>但其实“中年危机”更可怕的，不是你找不到更好的工作，或者是随时会被开，而是心理上的那种压力，哪怕你一切都好好的，其实你也无形中承受了这种压力。</p><p>除非你可以爬过面前的这座山，看到山后面更好的风景，这种压力才会小很多。</p><p>说的通俗点，就是在你“中年危机”来临之际，甚至来临之前，你就已经爬到了更高的位置。</p><p>但毕竟，这是一小部分人，就像某大厂的高P，某大厂的高T等等，但事实上，我相信，哪怕你爬到了更高的位置，也有相同的压力等着你，只不过相对会小一点而已，因为你依旧会面临着被开和出去后找不到更好的工作的风险。</p><p>所以，很早之前，我就说过，应对“中年危机”最好的办法，就是尽快实现财务自由，这样你自然压力就小很多了。</p><p>当然了，所谓的财务自由，不是说让你挣个大几千万甚至上亿，一辈子都花不完那种才叫财务自由。</p><p>我所理解的财务自由，就是你基本上没什么债务，有固定的住所，简单的说就是你随便干点啥也能维持基本的生活，这就叫财务自由了。</p><p>至少你不会担心哪一天你拿不到高薪了，连饭都吃不起，最多是生活上节省一点而已。</p><p>聊了聊“中年危机”，我们再回到刚才的话题，当遇到天花板的时候，面试就会像我这次一样，很多公司并不是不要你，而是给不了你满意的薪水。</p><p>给的低了，你不满意，毕竟跳一次槽不容易，不涨点工资谁都会觉得不划算，而给的高了，人家又给不起，或者是不想给，最后只能是一拍两散。</p><p>这也是我这次面试这么不顺利的原因之一，有大约一半以上的公司都是这样的情况。</p><p>当然了，这或许也是大厂同学跳槽的劣势，因为大厂的工资（特别是总包算下来）高一些，所以如果不去同等级别的公司，想要保持当前的薪水甚至更进一步，难度就会大很多。</p><p>这也是为啥大厂同学跳槽相对会少一些的原因之一，不仅仅是因为公司本身不错，值得长期待下去，也有一个很重要的原因，是很多人根本就跳不出去。</p><p>因为比较高的待遇或者是股票期权，导致很多人被限制在了公司，除非你愿意舍弃一部分利益，否则就很难出去了，尤其是杭州这样的二线城市或者说准一线城市。</p><p>如果是北京的话，可能会相对好一些，毕竟北京的大厂多，能给得起工资的公司也多，所以出来以后找工作难度会低一些。</p><p>所以这再次提醒了我们，如果你觉得你目前的薪资和待遇已经到了天花板，或者接近天花板，那跳槽的时候，一定要放平心态，适当降低心里预期，否则你可能会十分的不适应这种变化。</p><p>在这里，给大家一个工资区间参考值，大家可以看下你是否处于这个区间当中，如果高过这个区间，说明你算是比较优秀的，如果低于这个区间，那说明你还仍需努力。</p><p>不过要注意，以下内容仅适用于杭州（如果是北上深的话，请在杭州的基础上加5000，如果是广州则和杭州一样），而且仅供参考，如有不符，概不负责，成年人要有自己的判断力。</p><p>在杭州，1年或以下的同学，大部分都是5K-1W的月薪，3年左右，一般都会提升到1.5W-2W左右，5年左右，一般会提升到2.5W-3W左右。</p><p>至于5年再往上，区别就比较大了，比如有的人升的快，可能7、8年的时候就年薪百万甚至更高了，但有的还停留在年薪30-40W之间，也就是和月薪3W时没啥大的变化。</p><p>说完区间以后，我们再来说说杭州的两个常见的天花板。</p><p>其实在杭州这个地方，3W（或者说年薪35W-50W）就是第一个天花板了，再提升一个档次，就是年薪大约50W-70W的这批人，这也是第二个天花板。</p><p>再提升一个档次，就是年薪大约70W以上甚至超过百万的人了，这些人就不讨论了，一般这种人跳槽都不太会考虑工资了。</p><p>因为如果考虑工资，就这些人目前的收入，往往是不需要跳槽的，或者说是不能跳槽的，因为他的收入可能有一大部分来自于股票期权，跳槽了就没了。</p><p>这两个常见的天花板是什么意思，其实就是当你年薪处于30多万，或者50多万的时候，你跳槽的时候就要格外的注意，因为这个时候你想更进一步，往往需要打破一定的天花板，也就是你要有质的提升，否则的话，你可能很难跳入下一个档次中去。</p><p>换句话说，你的工资从30W提升到50W（才60%），比你从10W提升到30W（涨了2倍）要难的多，而且甚至可能一直升不上去，这就是所谓的天花板了，它不比你从10W提升到30W，最多是快慢的问题。</p><p>从30W到50W，或者从50W到70W，可能你很长一段时间也上不去，甚至到你换行退役的时候还没达到都有可能。</p><p>所以一旦达到这个天花板的时候，跳槽时就要格外的谨慎了。</p><p>当然了，还是那句话，成年人要有自己的判断，切勿人云亦云，不要太纠结于我提到的数字，自己有没有到天花板，自己心里是要有点X数的，哪怕你当前月薪还不过万，也有可能这就是你的天花板，-_-。</p><p style="margin:1.12em 0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;line-height:1.8;font-family:inherit;vertical-align:baseline;min-height:1em;text-align:center"><span style="margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;font-size:15px;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="margin:0px;padding:0px;border:0px;font-style:italic;font-variant:inherit;font-weight:inherit;font-size:40px;line-height:inherit;font-family:'-apple-system-font' , 'blinkmacsystemfont' , 'helvetica neue' , 'pingfang sc' , 'hiragino sans gb' , 'microsoft yahei ui' , 'microsoft yahei' , 'arial' , sans-serif;vertical-align:baseline;color:rgb( 255 , 76 , 0 );letter-spacing:0.544px">4</span></span></p><p style="margin:1.12em 0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;line-height:1.8;font-family:inherit;vertical-align:baseline;min-height:1em;text-align:center"><span style="margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;font-size:18px;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="font-weight:bolder;margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-size:inherit;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="margin:0px;padding:0px;border:0px;font:inherit;vertical-align:baseline">行业限制</span></span></span></p> <p>因为行业上的限制，也是导致我这次跳槽颇为不顺利的原因之一。我之前的行业，准确的来说是云计算PaaS领域。</p><p>我刚开始跳槽的时候想的很简单，想去一个小点的公司当个基层或者中层领导，拿个高薪，舒舒服服的开始下半辈子的奋斗。</p><p>现在来看，我这个想法在当时其实有点想当然了。</p><p>为啥？</p><p>很简单，因为跨业务或者说跨行业的话，你对业务不够了解，那你就失去了一个很大的优势，尤其是对于从大厂出来的人来说，就更是如此，毕竟如果你是个小厂，你的那点业务经验人家一般不会看在眼里。</p><p>举个例子，某多招人的时候，最喜欢哪里的人？一般是某宝或者某猫的人。</p><p>因为业务类似，而你又有中国这个行业顶尖公司的经验，那么不管你的技术叼不叼，就你的业务经验，就最起码值年薪2、3十万，因为相同业务场景下所遇到的技术难点，你在老公司一般都会遇到过，或者有一些了解，这就是经验的价值所在了。</p><p>技术做的越久你就越会发现，任何一项技术，在没有经历过足够的验证之前，都是一大堆坑在等着你趟。而这些趟坑的过程，对于公司来说其实是一种损耗，如果你有过往的经验，就可以在这方面大大的减少弯路。</p><p>所以假设你进一家公司，单靠技术或其它能力本来可以拿30W年薪的，而如果刚好你有相同的行业经验，同时你之前的公司又是这个行业比较顶尖的，那或许最后你的年薪会溢出30%-50%，也就是达到40W-45W。</p><p>这点相信其实也不难理解，但我比较悲催的是，云计算这个领域的公司实在是太特么少了，特别是做PaaS的，又是在杭州的，那就更是少之又少，一个手的手指头都特么用不完，还特么能剩四个，也就是除了我的老东家以外，基本上只有一家。</p><p>这也就意味着，我跳槽除了这一家公司以外，基本上靠的就全是技术和其它综合能力，那点之前的业务经验或者行业背景，基本上没有用到，最多只能算是聊胜于无。</p><p>这也是为啥我连个小公司的领导都拿不下来，人家总不能招一个对业务啥也不知道的人来带团队吧。</p><p>　　什么？</p><p>　　你说你可以学习？</p><p>不好意思，人家招leader是来带领和引导团队的，不是让你来学习的。</p><p>或许在极度缺人的情况下，有的公司会退而求其次，但当前的市场氛围，显然很少有公司有这个闲心，而且我的云计算背景毕竟是极少数。</p><p>所以这就尴尬了，让你做开发，你不愿意，工资也提不上去，谁让你原来太高了呢，让你做领导，你对业务又不了解，没有相应的行业技术积累，哪怕你技术再厉害。</p><p>但作为一个leader，技术能力只是一方面，丰富的业务经验和该业务场景下的技术沉淀也很重要，所以这就难受了。</p><p>这也让我深刻的意识到，行业在职业生涯中后期对于程序员的重要性。事实上在很多程序员眼里，对于业务是没有什么概念的，总觉得做P2P也是做，做云计算也是做，做电商也是做，感觉都一样的。</p><p>不得不承认的是，在初期确实是无所谓的，但越到后期，就越重要。</p><p>所以我在此友情提示下，跳槽的时候，如果可能的话，还是尽可能保持自己的行业优势吧，同时记得选一个比较有前景，对口公司也比较多的行业，否则的话，要吗等你跳槽时这个行业已经垮了，要吗就像我现在这样，根本就找不到对口行业的职位。</p><p>啥行业有前景？</p><p>我只能告诉你：“这东西谁能说的好，就跟房价是涨还是跌一样。”</p><p style="margin:1.12em 0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;line-height:1.8;font-family:inherit;vertical-align:baseline;min-height:1em;text-align:center"><span style="margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;font-size:15px;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="margin:0px;padding:0px;border:0px;font-style:italic;font-variant:inherit;font-weight:inherit;font-size:40px;line-height:inherit;font-family:'-apple-system-font' , 'blinkmacsystemfont' , 'helvetica neue' , 'pingfang sc' , 'hiragino sans gb' , 'microsoft yahei ui' , 'microsoft yahei' , 'arial' , sans-serif;vertical-align:baseline;color:rgb( 255 , 76 , 0 );letter-spacing:0.544px">5</span></span></p><p style="margin:1.12em 0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;line-height:1.8;font-family:inherit;vertical-align:baseline;min-height:1em;text-align:center"><span style="margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;font-size:18px;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="font-weight:bolder;margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-size:inherit;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="margin:0px;padding:0px;border:0px;font:inherit;vertical-align:baseline">生活限制</span></span></span></p><p>　</p><p>最后一个原因，这个相对占比低一些，但也确实是原因之一，就是生活上的限制。</p><p>比如最典型的距离，这也是买房为数不多的坏处之一了吧，因为我的房子比较偏，所以在工作的选择上，就比较受限制。</p><p>就拿刚才说的，那唯一一家和我对口行业的公司来说，特么离我家里有40多公里，来回一天将近90公里的距离，这特么怎么玩。</p><p>如果是租房就不存在这个问题了，就像以前在北京租房时换工作，基本上不太会考虑距离的问题，大不了就换个房子租。</p><p>除了距离以外，还有一个限制，就是工作时间，目前我也算是上有老下有下，不太可能像年轻时那样，经常加班到晚上11、12点，甚至凌晨1、2点，因此找工作就不能找太累的。</p><p>比如杭州某公司、杭州某公司还有上海某公司这种，哈哈，自己猜吧，这些都是相对比较辛苦一些的公司，当然了，报酬也是大大滴，就看你愿不愿意拿命换钱了。</p><p>其实就算不考虑家庭，就我自己的体力来说，也不允许再这么搞了，以前还好，现在熬夜加班的话，我已经远远不如以前那么能熬了。</p><p>所以，随着生活上逐渐稳定，你的负担会越来越重，对你的限制也会越来越多，难免会对你的职业生涯产生一定的影响，但相应的，这些负担往往也是幸福的源泉。</p><p>到底孰优孰劣，个中滋味还是大家自己去体会吧。</p><p style="margin:1.12em 0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;line-height:1.8;font-family:inherit;vertical-align:baseline;min-height:1em;text-align:center"><span style="margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;font-size:15px;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="margin:0px;padding:0px;border:0px;font-style:italic;font-variant:inherit;font-weight:inherit;font-size:40px;line-height:inherit;font-family:'-apple-system-font' , 'blinkmacsystemfont' , 'helvetica neue' , 'pingfang sc' , 'hiragino sans gb' , 'microsoft yahei ui' , 'microsoft yahei' , 'arial' , sans-serif;vertical-align:baseline;color:rgb( 255 , 76 , 0 );letter-spacing:0.544px">6</span></span></p><p style="margin:1.12em 0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;line-height:1.8;font-family:inherit;vertical-align:baseline;min-height:1em;text-align:center"><span style="margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-weight:inherit;font-size:18px;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="font-weight:bolder;margin:0px;padding:0px;border:0px;font-style:inherit;font-variant:inherit;font-size:inherit;line-height:inherit;font-family:inherit;vertical-align:baseline"><span style="margin:0px;padding:0px;border:0px;font:inherit;vertical-align:baseline">跳槽后的生活</span></span></span></p> <p>虽然跳槽时各种纠结，也各种头大，但不得不说，跳槽后的生活还是十分Happy的。</p><p>薪资有了涨幅，工作有了变化，认识了一大堆新同事，学习了一大堆新知识，整个人都会处于一种积极亢奋的状态。</p><p>事实上在跳槽之后，很多人听到我跳槽后第一反应都是这样的，“啥？你跳槽了？卧槽！你为啥要跳槽？XXX那么好的公司，你走了岂不可惜？”</p><p>面对这种排比疑问句，我都不知道该咋回答，难道好公司一旦进去了就得从一而终吗？那每年从那些大厂出去的人，都是脑子抽了吗？</p><p>非也，也可能是混不下去了。</p><p>开个玩笑，其实我早就说过，公司和老婆一样，不是要找最好的，而是要找最适合的。</p><p>我在老东家呆的时间也不短了，3年说长不长，说短不短，虽然收获了很多，无论是技术上还是经济上。</p><p>但不适合就是不适合，不能单纯只看钱多少和公司的大小，就决定这份工作的好坏，更何况这次薪资还涨了，而且新东家也是一家规模颇大的公司。</p><p>其实回想起来，当初我来杭州是十分仓促和盲目的，当时我就冲着两点就来了，一个是杭州，因为房价低好落户，一个是大厂。</p><p>至于公司团队文化是否匹配，工作内容是否喜欢，行业是否有前景，以及未来行业对自己职业的影响，等等吧，我压根就没考虑过。</p><p>所以，从生活上来说，我这是一次十分成功的跳槽和换城市，但是仅仅从工作上来说，其实16年那次从北京到杭州的跳槽并不是那么的理智。</p><p>当然了，大厂所带来的光环和优势，是很多公司无法相比的，这在程序员的圈子里，也算是进北大清华进修过了。最起码吃过猪肉，也看过猪跑了，可以说程序员的人生已无憾事。</p><p>在此要特别感谢一下当初招我进来的老板，还有我的老东家，可以说，当初跳槽到杭州，以及之后在老东家的这3年，改变了我的下半生。</p><p>来杭州以后，每次我和媳妇回忆起当初在北京，挤在一个10平米的小次卧里，七八个人一起抢厕所的日子，都觉得人生真的是有趣。</p><p>谁能想到当初月薪6000都兴奋的睡不着觉的我，现在能拿着年薪XX的收入，谁又能想到当初无依无靠在北京漂着的我，如今能住上自己的房子老婆孩子热炕头，谁又能想到当初每天人挤人的站在公交车里上班的我，如今能开着自己的豪车上班。</p><p>谁又能想到，当初意气风发的我，如今已经快秃了头。</p><p>回忆总是感慨，但终归是过去了，目前我在新东家干的风生水起，未来的日子也还要不断前行。</p><p>在此，我衷心的希望所有的程序员们，能够依靠自己的努力，攀上你以前想象不到的高峰。</p><p>虽然这个高峰，可能还在某些大佬的山脚下。</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂 </tag>
            
            <tag> Banbrick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记_杂</title>
      <link href="/2020/02/26/%E6%9D%82%E8%AE%B0-%E6%9D%82/"/>
      <url>/2020/02/26/%E6%9D%82%E8%AE%B0-%E6%9D%82/</url>
      
        <content type="html"><![CDATA[<h1 id="为人性僻耽佳句，语不惊人死不休"><a href="#为人性僻耽佳句，语不惊人死不休" class="headerlink" title="为人性僻耽佳句，语不惊人死不休"></a>为人性僻耽佳句，语不惊人死不休</h1><pre class="hljs">为人性僻耽佳句，语不惊人死不休！老去诗篇浑漫兴，春来花鸟莫生愁。新添水槛供垂钓，故着浮槎替入舟。焉得思如陶谢手，令渠述作与同游。</pre><p>①“值”，正逢。“水如海势”，江水如同海水的气势。“聊”，姑且。②“为人”，这里是平生的意思。“性僻”，性情乖僻，古怪。这里实指诗人的一种举趣、追求。“耽”，爱好，沉溺于。③“老去”，即年老了。“浑”，完全，简直。“漫”，随意。④“莫”，没有。⑤ “槛”，栏杆。⑥“故着”，又设置了,“着”，读zhuó，设置。“槎”，音chá，木筏。“替”，代替。⑦“焉得”，怎么找到。“思”，才思，诗才。“陶谢”，指陶渊明、谢灵运。⑧“令渠”，让他们，“渠”，代词。“述作”，作诗述怀。<br>原诗中的“为人性僻”：杜甫自我解剖之词。漫与：相当于“随便对付”的意思，自谦之词。浮槎：木筏。陶谢：陶渊明、谢灵运。令渠：叫他们。此诗意思是：我为人情性孤僻，醉心于作诗，写出来的诗句一定要惊人，否则不肯罢休。到老来作诗还是很平庸，就不用再为春花秋鸟增添愁怀了。前不久门前修了个水槛，供凭栏垂钓之用，有时乘上木筏子也可以当做小船用。真希望能找到家陶潜和谢灵运这一类人做朋友，跟他们一起吟诗，同游山水才好呢！“语不惊人死不休”一语，后人引用为对自己写作的严格要求。</p><p>这首诗是诗人面对如大海汹涌的江水，抒发内心感受的叙怀之作。诗人站在江边，看到波涛滚滚的气势，引发了他无限的感慨。他审视了自己的创作：“为人性僻耽佳句，语不惊人死不休。”诗人自谓平生特别喜欢、刻意追求最能表情达意的诗句，然而这种追求，在别人看来简直是有些古怪，有些乖僻。但这确实就是我的态度，达不到语出惊人的地步，我是决不罢休的。这两句诗道出了杜甫诗作的特色，反映了他认真严谨的写作态度。</p><p>这两句似乎是诗人聊以自慰的，但此时此刻却像奔泻不已的江水，他又转想到随着岁月的消逝，自己也越来越老了，此时的心境，似乎失去了往日的激情，对着春天的花鸟，也没有了过去的苦恼与烦闷，所写的诗稿，不过是随随便便敷衍而成。</p><p>接下来两句，诗人的视线转向眼前景物：江边新装了一副木栏，可供我悠然垂钓，我又备了一只小木筏，可代替出入江河的小船了。这两句是对他老年心境的写照。其实杜甫是否真有如此而已的闲情雅致垂钓，并无可考，也许这只是诗人的一种无奈的自慰、自嘲。总之中间这两联，见出杜甫对自己年华老去的感慨，其中也暗含着对自己热情的减退的自责。</p><p>但杜甫毕竟是一位有时代感、有责任心的诗人。澎湃的江水似乎又激起了他高昂的创作欲望，他追思诗坛高手陶渊明、谢灵运，并想象与他们一起浮槎漫游。这既是江海游，也是诗海游，表明杜甫仍然壮心不已，追求不止，要继续写出惊人的诗作。</p><p>本诗作于上元二年（761）。杜甫时年五十岁，居于成都草堂。诗题中一个“如”字，突现了江水的海势 ，提高了江景的壮美层次，表现了江水的宽度、厚度和动态。江水如海势，已属奇观。然而诗题却偏偏曰 ：“聊短述 ”。诗题中就抑扬有致，这是诗人的一贯风格。</p><p>既然聊为短述，山语岂能平平？诗人自谓“为人性僻耽佳句，语不惊人死不休”，足见“聊短述”的良苦用心，炉火纯青的诗艺，严肃认真的写作态度和动人心弦的审美效果。</p><p>正由于杜甫艺术上的一丝不苟、勇于创新，因此老年臻于出神入化、妙手成春的极境。所谓“老去诗篇浑漫与，春来花鸟莫深愁”。仇兆鳌评杜甫“ 少年刻意求工，老则诗境渐熟，但随意付与，不须对花鸟而苦吟愁思矣 。”（《杜诗详注》卷之十）同时他还转引钱笺道：“春来花明鸟语，酌景成诗，莫须苦索，愁句不工也。若指花鸟莫须愁，岂知花鸟得佳咏，则光彩生色，正须深喜，何反深愁耶？”（《杜诗详注》卷之十）这里是说春光明媚，花香鸟语，快乐异常，因此不存在花鸟深愁的问题，“莫深愁”为杜甫自况。至于“ 浑漫与”中的“与”字，旧本曾作“兴”，清末郭曾忻解释说：“所谓漫兴，只是逐景随情，不更起炉作灶，正是真诗。”（《读杜札记》）此处强调任笔所之，自然而然。总之，首颔二联总体着眼，大处落墨，虽为短述，语实惊人，虽未直接描写江上海势，但胸中之海早已形成。它浑厚深涵，辽阔无垠，大气磅礴。心中之海，诗人采取了虚写的办法。正如金圣叹所说，此“不必于江上有涉，而实从江上悟出也。”（《杜诗解》卷二）所谓海势，其实是江，因此江上之景，亦应摄取，若完全避开江水，则海势亦无所依附，而不成其为江如海势。为此，诗人紧接首颔二联虚写海势以后，随即转入实写江水。故颈联道 ：“新添水槛供重钓，故著（着）浮槎替入舟。”此处虽写江水，但只是轻轻带过，如此触及江水、悟及海势的写法，令人玩味不尽。正如王嗣奭所说 ：“水势不易描写 ，故止咏水槛浮舟。此避实击虚之法 。”（《杜臆》卷之四）又如金圣叹所说 ：“不必于江上无涉，而实非着意江上也。”（《杜诗解》卷二）尾联诗人以一“焉”字，即巧作转折，融注新意。诗人之语，已经惊人 。若得陶渊明 、谢灵运那样的妙手，使其述作，并同游于江海之上，岂不快哉！尾联思路新奇，饶有兴味，且与首联相呼应，显示出诗人对艺术最高境界的执着追求 。“更为惊人之语也。”（《杜诗解》卷二）对诗与诗题之间的关系金圣叹先生写道：“每叹先生作诗，妙于制题。此题有此诗，则奇而尤奇者也。诗八句中，从不欲一字顾题，乃一口读去，若非此题必不能弁此诗者。题是‘江上值水如海势’七字而止，下又缀以‘聊短述’三字。读诗者，不看他所缀之三字，而谓全篇八句，乃是述江水也，值江水之势如海也。则八句现在曾有一字及江海乎？”（《杜诗解》卷二）从他评析中，可以得知：此诗诗题与诗中八句，构成了一个浑厚海涵、博大精深的整体。虽未写海，而如海势。此诗以虚带实，出奇制胜，意在言外，令人叹为观止。</p><p>注:</p><p>杜甫（712－770），字子美，自号少陵野老，汉族，祖籍襄州襄阳（今湖北襄阳），一般认为出生于巩县（今河南巩义）。盛唐时期伟大的现实主义诗人。代表作有“三吏”（《新安吏》、《石壕吏》、《潼关吏》）、“三别”（《新婚别》、《垂老别》、《无家别》）等。初唐诗人杜审言之孙。唐肃宗时，官左拾遗。后入蜀，友人严武推荐他做剑南节度府参谋，加检校工部员外郎。故后世又称他杜拾遗、杜工部。他忧国忧民，人格高尚，一生写诗1500多首，诗艺精湛，被后世尊称为“诗圣”。</p><p><code>智者乐其道，庸人乐其欲。以道制欲，则乐而不乱；以欲忘道，则惑而不乐。</code></p><p>《礼记·乐记》上说：</p><pre class="hljs">夫物之感人无穷，而人之好恶无节，则是物至而人化物也。人化物也者，灭天理而穷人欲者也。于是有悖逆诈伪之心，有淫泆作乱之事。是故，强者胁弱，众者暴寡，知者诈愚，勇者苦怯，疾病不养，老幼孤独不得其所，此大乱之道也。</pre><hr><p>“未有知而不行者。知而不行，只是未知。有如知痛，必已自痛了，方知痛。知寒，必已自寒了。知饥，必已自饥了。知行如何分得开？” - 《传习录》</p><hr><p><strong>Novices need recipes</strong></p><p><strong>Advanced beginners don’t want the big picture</strong></p><p><strong>Competents can troubleshoot</strong></p><p><strong>Proficient practitioners can self-correct</strong></p><p><strong>Experts work from intuition</strong></p><hr><p>君子不器</p><p>君子矜而不争，群而不党。</p><hr><ul><li>RD 是研发（研究与开发）</li><li>FE 前端研发</li><li>QA 是测试</li><li>UE 用户体验</li><li>OP 是运维。</li><li>UI 就是用户设计</li><li>DBA 数据库管理员</li><li>PM 产品经理</li></ul><hr><h1 id="为什么整个互联网都缺前端工程师"><a href="#为什么整个互联网都缺前端工程师" class="headerlink" title="为什么整个互联网都缺前端工程师"></a>为什么整个互联网都缺前端工程师</h1><p>原文:<a href="http://www.tuicool.com/articles/qi2eMre">http://www.tuicool.com/articles/qi2eMre</a><br><strong>原因一：</strong> 前端相对来说是一个新领域，当今的web需求要求更多的工程师供应<br>现在还有一类人是独自处理一个Web应用程序的所有问题，即”全栈工程师”，但是优秀的全栈工程师同样如大熊猫一般数量稀少。</p><p>现在，一个创业公司想要成功，几乎要覆盖一个Web应用程序的诸多技术方面：前端、后台、DBA、运营等。虽然已经有一些服务可以让企业购买登陆页 面的前端模块和组件；但是如果你想要创造一些真正的Web应用程序，除了求助前端工程师，别无他法，就像你要创立一个品牌你也绕不开请一位设计师一样。</p><p><strong>原因二：</strong> 对前端，普遍存在巨大的误解，其实前端一点也不简单</p><p>大多人都认为前端开发是一个“相对于其他模块来说更简单的领域”，在他们心中的前端工程师是这样工作的：</p><ul><li>把Photoshop文件、图片或者线框放进一个网页；</li><li>偶尔设计Photoshop文件、图片或者线框；</li><li>用JS编程，为网页制作动画、过渡效果；</li><li>用HTML和CSS编程，确定网页的内容和形式。<br>事实上，前端工程师在做的是：</li><li>在设计师和工程师之间创建可视化的语言；</li><li>用可视化的设计，定义一组代表内容、品牌和功能的组件；</li><li>为Web应用程序的公约、框架、需求、可视化的语言和规格设定底线；</li><li>定义Web应用程序的设备、浏览器、屏幕、动画的范围；</li><li>开发一个质量保证指南来确保品牌忠诚度、代码质量、产品标准；</li><li>为Web应用程序设定适当的行距、字体、标题、图标、余粮、填充等等；</li><li>为Web应用程序设定多种分辨率的图像，设备为主的实体模型，同时维护设计指南；</li><li>用account Semantic s、accessibility、SEO、schemas、microformats 标记Web应用程序；</li><li>用一种友好的，消耗小的，设备和客户端感知的方式连接API，获取内容；</li><li>开发客户端代码来显示流畅的动画、过渡、延迟加载、交互、应用工作流程，大多数时间用来考虑渐进增强和向后兼容的标准；</li><li>保证后台连接安全，采取跨地资源共享（CORS）的程序考虑，防止跨站点脚本（XSS）和跨站点请求伪造（CSRF ）；</li><li>最重要的是，尽管有严格的期限、利益相关者的要求，以及设备的限制，无论现在还是将来永远是“客户第一”。</li></ul><p>为了实现上述目标，前端工程师采用了从可视化到编程的多种工具 ，甚至有时要照顾市场、 UX 到内容tweakes等等。</p><p><strong>原因三：</strong> 大量糟糕前端工程师的存在，扰乱了市场</p><p>这或许是难以招到优秀前端工程师最明显的原因。由于前端工程师的入门门槛非常低，JS、CSS、HTML并不是很难入门掌握的语言，似乎只要花一点时间，谁都可以通过网上教程和书本学会它，前端工程师市场就是被这些浅尝辄止的家伙搞坏的。</p><p>糟糕的前端工程师是这样做事的：</p><ul><li>滥用JS库，因为他们实际上并不了JS的内部（e.g. 一切都用jQuery）；</li><li>滥用JS插件，抄别人的代码哪怕自己根本读不懂（e.g.jQuery.doParallaxPls.js）；</li><li>给Web应用程序添加CSS框架，却只用到CSS/JS的5%，没有看到任何的需求、设计或者比较和评价；</li><li>认为只要添加了CSS框架，网站就可以“有求必应”；</li><li>一边在说着“响应式 Web设计 ”，却对服务器端技术一无所知；</li><li>用CSS编程时不管预处理器、命名规范等，却用不合适的selector/ids/ Magic numbers等；</li><li>忽视表现、内存泄露（并不理解内存泄露的真正含义），不会检测代码；</li><li>不会用指标衡量一个产品，或者这种指标旨在自己的电脑、浏览器、设备有效；</li><li>忽视软件技术。</li></ul><p>要知道，入门容易精通难，计算机和软件的基础对你用JS或浏览器编程都非常重要。Web可能是最有影响力的平台和环境之一，在那里执行的程序必须被小心对待。一位优秀的前端工程师不仅要考虑Web技术和语言，并且还要了解所有不同的组件、系统和概念。</p><p>以下是优秀的前端工程师在即时面对普通的任务也会做的事情（这才是市场急需的前端）：</p><ul><li>DNS解析、使用CDN和关于multiple Hostnames as part of resources request；</li><li>HTTP Headers （Expires, Cache-Control, If-Modified-Since）；</li><li>Steve Souders的所有规则（High Performance Websites）；</li><li>如何解决PageSpeed, YSlow, Chrome Dev Tools Audit, Chrome Dev Tools Timeline显示的所有问题；</li><li>何时把任务传到服务器和客户端；</li><li>缓存，预取和负荷技术的使用；</li><li>Native JS，知道何时从头开始做，何时查找别人的代码，同时可以评估这样做的优缺点；</li><li>modern MVC Javascript libraries （e.g. AngularJS, EmberJS, ReactJS）, graphic libraries（e.g. D3 , SnapSVG）, DOM manipulation libraries （e.g. jQuery, Zepto）, lazy loading or package management libraries （e.g. RequireJS, CommonJS）, task managers （e.g. Grunt, Gulp）, package managers （e.g. Bower, Componentjs）and testing （e.g. Protractor, Selenium）的相关知识和用法；</li><li>CSS标准、modern conventions、 strategies （e.g. BEM, SMACSS, OOCSS）的知识和用法；</li><li>JS的电脑知识（内存管理，单线程的性质，垃圾收集算法，超时，范围，提升，模式）。</li></ul><p>换句话说，如果说精通HTML+CSS+JS，了解后端知识，只是60分的合格前端；那么要想成为受追捧、拿高薪的80分优秀前端，要对业务需求和、架构设计有真正的运用；而100分的顶级前端，则必须要能够兼顾技术和设计，更接近“以前端开发为主的全栈工程师”了。</p><p>市场不是缺少前端，而是缺少优秀的前端工程师</p><p>现在，前端工程师终于前所未有的在Web中占有了一席之地。随着多设备、浏览器和Web标准的演变革命，前端正在成为兼顾逻辑、性能、交互、体验的综合性岗位。</p><p>虽然现在互联网行业普遍缺少前端工程师，但是我们相信越来越多的人将会加入前端的大军。不仅是因为大多数前端工作提供的优渥薪水和办公环境，也是因为Web中的前端编程变得越来越有挑战和意义。</p><p>最后，分享一组3~4月的100offer拍卖数据，给前端们鼓鼓劲：</p><p>前端工程师人均收获8.2个面试机会，已入职的前端工程师平均薪资涨幅达39%。其中，前端offer之王共收获47个offer，最高offer薪水38k*16 ，开自某土豪电商。</p><p>加油吧，前端！</p><hr><h1 id="oo-vs-oop"><a href="#oo-vs-oop" class="headerlink" title="oo_vs_oop"></a>oo_vs_oop</h1><p>前两天不是有一个问题是“什么时候用C++而不用C”，我一直觉得问错了，难道不是“能用C++就不用C”么？那么当然就要讨论什么时候用C而不用C++啦。</p><p>一直以来都严格遵循OO的原则来进行开发（用的工具是C#和Qt），直到最近，开始接手某同事的代码，整个项目20多个小工程（代码量并不多），除了界面部分用了MFC这种不伦不类的OO以外，所有的代码都是C写的。但是模块化做的非常好。后来跟他讨论为何不用C++，他说其实没有什么特别的，就是习惯和爱好而已，后又补充：</p><p>如果不用多态的话，其实不管怎么写，不管用那种语言写，都算不上真正的OO</p><p>忽然觉得很有道理……</p><hr><h1 id="游戏服务端发展史"><a href="#游戏服务端发展史" class="headerlink" title="游戏服务端发展史"></a>游戏服务端发展史</h1><ol><li><a href="http://blog.jobbole.com/88586/">游戏服务端架构发展史（上）</a> <a href="http://www.skywind.me/blog/archives/1265">http://www.skywind.me/blog/archives/1265</a></li><li><a href="http://blog.jobbole.com/88591/">游戏服务端架构发展史（中）</a> <a href="http://www.skywind.me/blog/archives/1301">http://www.skywind.me/blog/archives/1301</a></li><li><a href="http://www.skywind.me/blog/archives/1327">游戏服务端架构发展史（下）</a></li></ol><hr><h1 id="Tag系统"><a href="#Tag系统" class="headerlink" title="Tag系统"></a>Tag系统</h1><p><strong>Tagging研究综述</strong><br><a href="http://portfolio.designbarder.com/2010/12/tagging%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/">http://portfolio.designbarder.com/2010/12/tagging%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0/</a></p><p><strong>Tag的存在主要有两重作用，一个是keyword，一个是index。</strong><br>Keyword用来用极为简单的词语来说明内容的大意，index用来在搜索时进行匹配。这里主要谈index的作用。</p><p>Tag和category的不同在于，一种是逻辑严整的划分，一种是简单直接的划分。category可以通过增加维度来将目标精确化，Tag则往往只需要一个word就能找到精确度很高的目标。</p><p>和category相比，Tag最大的优势在于它提供了一个非常快捷的找到精确目标的可能性。这具有两个方面的含义，一个是Tag本身容易识别（Tag好找），一个是Tag对应的目标具有精确性（目标准确）。</p><p>在信息总量不变的前提下，Tag的总数量和精确度是一组负相关数值。</p><p>在具有大量信息的数据平台，在大量存在的Tag数量和每一个Tag涵盖的内容数量中，就需要进行平衡，以保证Tag的高速和高效。</p><p>一方面可以给Tag增加维度，来帮助用户使用Tag。<br>比如把Tag也按照category进行分类（如豆瓣），还比如给某些Tag字体加粗，变色，变大，这也是从hot程度上进行辅助说明。</p><p>一方面可以给搜索结果增加维度来保证精确性。<br>比如在哪个channel中搜索，在哪个时段的内容中搜索。</p><p>此外还可以使用相关Tag的方法，通过二次甚至多次的搜索，（以比category更快速的方法）来最终找到目标。</p><p>Tag的使用不宜过于复杂，否则就失去了其高速高效的意义。</p><p><strong>tag对于UGC的产品是一个好的设计。</strong><br>对于视频，图片这些富媒体类型应用来说，tag最大的意义在于可以多维度地从非结构化的数据中提取出结构化的数据。而有了这些结构化的数据之后，原先对于非结构化数据难以进行的分类和挖掘有了进一步的可能，丰富了产品形态和体验，也能挖掘出更多的数据价值。</p><p><strong>tag这种设计，是<a href="http://del.icio.us开发者joshua/">http://del.icio.us开发者Joshua</a> Schachter最早采用的</strong><br>Joshua也曾经解释过，为什么他要用tag。我有一篇博文写过（ <a href="http://blog.donews.com/keso/archive/2005/01/30/262073.aspx">http://blog.donews.com/keso/archive/2005/01/30/262073.aspx</a> ），摘录如下：</p><blockquote><p>据Joshua介绍，1998年他在做一个网站时，手头有大量链接需要保存，最初这些链接是被保存在一个文件中。随着保存的内容越来越多，为了更快捷地找到某个链接，他开始在链接后面加上单词的备忘，这就是后来的标签（Tags）。</p></blockquote><blockquote><p>他说，“我希望借助电脑的帮助，把存储和取回分成两个独立的行为，因此当你给你存储的东西加上tags，你就可以更容易地取回它们。在这么做的时候，你取回其他人存储的东西也会变得更简单。tags促进并放大了这一点。”</p></blockquote><p>图书馆学者们很快发现，随着在社会化网站中tag被大量采用，它成为传统的本体论分类方式之外的一种新的分类方式，群体行为在某些情况下具有惊人的一致性，这种一致性产生了对事物的有意义的社会定义。这种新的分类方式，被称为“大众分类”（folksonomy）。</p><p>大多数对tag理解的误区在于，我们仍然用传统分类法的精确性、唯一性，来要求大众分类，这就有点像传统数学家对解模糊数学的某种抵触。“10万人参加了街头抗议”，10万？这么精确？</p><hr><h1 id="流的本质"><a href="#流的本质" class="headerlink" title="流的本质"></a>流的本质</h1><p>原文:<a href="http://www.infoq.com/cn/articles/essence-flow?utm_source=tuicool">http://www.infoq.com/cn/articles/essence-flow?utm_source=tuicool</a><br>我们希望使流程更加合理，增加生产能力</p><p>下面是我们希望实现的目标:</p><ul><li>简化我们的业务，同一时间专注于更少的事情（比如，减少在制品），以此增加生产能力，并缩短提前期</li><li>Kaizen ，持续改进流程，消除瓶颈，获得流</li><li>缩小交付增量，更快地、持续不断地为客户带来价值</li></ul><p>一个良好的流的例子——接力棒</p><p>在世界锦标赛或奥林匹克运动会中，4x100接力赛通常是一项非常有趣且激动人心的赛事。</p><p>当前的世界记录为（男子）：</p><ul><li>400米：43.18秒，由迈克尔·约翰逊于1999年8月26日在塞维利亚创造</li><li>4x100米接力赛：36.84秒，由牙买加于2012年8月11日在伦敦创造</li></ul><p>虽然迈克尔·约翰逊是有史以来最好的运动员之一，但来自牙买加的团队创造的接力赛记录比他的400米记录快了15%。为什么会这样？有两个原因：</p><ol><li>在来自牙买加的团队中，每个人都可以以最大能力跑（400米虽然不长，但要以跑100米的速度来跑是不可能的）</li><li>在接力棒交接时没有速度损失<br>因此，在这种情况下，1+1+1+1不等于4，而是大于4！我们如何将这种情况转化为一种与我们的环境相匹配的描述？</li></ol><hr><p>第一，人生那么长，不妨活得自我一点 </p><p>生活是一场视觉盛宴，任何一套单一的理念都不可能垄断社会，社会是多元价值观并行的，每个人都有不止一个选择。我们没必要把一脚踏进职场另一只脚就迈进婚姻围城当成人生模板，也没必要把活成铿锵玫瑰当成最佳答案，我们可以根据自己的喜好和选择，以自己喜欢的方式生活。小城生活环境安逸，舆论压力巨大，选项单一到必须给周围看客一个交代。大城市不仅职场选择广就业机会多，生活方式也更具包容性。 </p><p>第二，练习一个人生活的能力，增长阅历保持独立 </p><p>我不否认在大城市里生活的艰辛，加班累成狗，下班无好友，不及在小城市里朝九晚五按部就班。但是，固定模式的生活里有的没有想象的明天，一成不变的生活不断积累的结果是逐渐让整个人凝固，上进心衰竭。大城市固然忙碌，却没有时间让你空虚寂寞，反而在浮华中学会不轻易辜负那些千载难逢的喜欢，坚守该坚守的，呵护想拥有的，带着也许不能触及的梦想，消磨你的戾气，督促你成长，让你学会独立保持清醒。就脱单这件事儿而言，或许你还不明白自己喜欢什么，但一定知道自己不喜欢什么。 </p><p>至于孤独，相信你在任何一个地方，都难免会有孤独感，这样的人生必修课全凭个人修炼的火候，不分时间和地点。 </p><p>第三，随时转换跑道，生活的每一面都很美 </p><p>日本心理学家森田正马说：“每个人都藏着一个叛逆的小孩。人生重要有哪怕一次，放出自己内心那个叛逆的小孩，这样，到老的时候，我们才不会感叹，这一生，我都在为别人而活着。”身在大城市有无限任性的可能，你会计专业想转行做写手，你学设计出身想玩音乐，你做主持人腻味了想做心理咨询师……统统没有问题，培训课随时读，志同道合的人随时约，别说在小城市只要有网络一样能学到，But，很多事实践比理论更重要，你确定你找活人实践这事儿一样容易吗？至多，只能刷刷豆瓣小组看着坐标望而兴叹吧。</p><hr><h1 id="你为自己想要的生活，拼尽全力了吗"><a href="#你为自己想要的生活，拼尽全力了吗" class="headerlink" title="你为自己想要的生活，拼尽全力了吗"></a>你为自己想要的生活，拼尽全力了吗</h1><p>对自己生活现状很满意的人只有10%，而一半以上的人都对自己的生活不大满意，并且不知道如何改变。</p><p>你是否信息闭塞，害怕改变？<br>讲个小故事先。<br>二哥有个研究生同学，毕业一年多，现在在一家做硬件的外企工作。但基本去年一年都在出差，从聊天过程中可以看出，他并不喜欢现在的生活。一方面因为累，另一方面长期出差就意味着和女朋友异地。后来聊的多了，突然发现他的薪资居然和我的差不多。而他所理解的高薪，正是二哥现在的薪资待遇。过程中还聊到另一个同学，他说那位同学辞职创业去了，他认为不应该这样做。现在创业哪里那么容易，失败了怎么办云云。我问他，为何不选择互联网公司？他说我不是科班出身，互联网公司没那么好进。但事实上，他们聊天时听了下，二哥现在工作所用的哪些语言和技术，他基本全会。</p><p>回来路上二哥感慨，这位同学研究生时是学生会主席，老师同学都很喜欢他，毕业后混的不太好，感觉略可惜。我说其实他是对自己太不自信。本可以稍微努力下就够到100分，而现在却在50分线上过日子。其实这位同学也很拼，他比二哥辛苦多了，加班，熬夜，长期出差，但因为给自己的定位太低，对除自己行业外的信息都不关注，所以导致暂时只能在50分线上转来转去。</p><p>而在这50分线上，我相信他一定是一个领导，同事都喜欢的好员工。他也可以把工作做的很出色。但作为旁观者，我觉得他可以跳出来，看到更大的世界，过更好的生活。至于他认为的另一个同学不该去创业的问题，我私以为也是他信息太闭塞，他理解的创业依然停留在自己出资，放手一搏的模式，而现在的互联网+的大环境下，更多的是你有想法有技术，就会有人给你投资，或者有经济实力的人拉你一起做创业合伙人。成功了，大家都发达，失败了，你至少多了一个创业的经历，并且这个过程中，你的薪资不会比做员工的时候差，也会认识很多平时接触不到的人。从任何一个层面来说，都是好事。</p><p>这个同学的故事就让我联想到很多后台发消息给我的小伙伴。很多人都很优秀，但就是意识不到自己的优秀。原本可以拿2w的薪资非要因为自己的信息闭塞和害怕改变而拿1w。</p><p>面对自己想要的，你拼尽全力了吗？<br>讲个二哥的故事。<br>二哥第一年考研，是他爸要求的，那时候他自己并不想考。结果是混日子，成绩下来当然是没考上。接着他去找工作，发现简历投出去之后没有任何回音，那时候他慌了，于是决定不找工作，再复习一年，继续考研。</p><p>第二次考研没有任何人逼他，是他自己感到了自己的不足。于是这一年，他无心顾及其他，每天都认真看书，做卷子，不断学习，考完研头发长到没法看的地步。成绩下来，很满意，考研成功。</p><p>自身的驱动力，比任何人的逼迫和劝说都好使。想要，就努力去够。拼尽全力，自然会得到自己想要的。</p><p>羊圈or狼窝<br>我毕业后第一次感到迷茫是14年，每天坐地铁去上班都不知道为了什么。后来辞职转行，换了行业换了环境，一切都是新的，开始学新的知识和技术。一年后辞职跳槽，这次不是因为迷茫，而是因为方向太明确了。我辞职后不久，另一个同事也辞职换了工作，于是我们两个人的状态都差不多，那就是再原本工作的基础上，换了一个稍有不同的工作内容。</p><p>前不久交流过一次，我们都觉得现在的公司像狼窝，而之前的公司像羊圈。二者皆没有贬义的意思。羊圈对我们来说，是一个有着自己目标，人人都很和蔼，有亲和力，以自己最舒服的状态在工作的地方，因为舒服，所以事情的推进和发展并不会太快。狼窝则不同，员工都带着一股狼性，有着团队明确的目标，所有人各司其职，做不好是会被批的，所以事情的发展也会较快。现阶段的我们，都更喜欢狼窝的生活，因为虽然很累，收获却很多。原本一年学到的东西，这里根本不会给你那么长的时间，领导给你一个大方向，其他的都要靠自己搞定，不会的，不擅长的，都要在短时间内变得精通熟练。</p><p>我想大部分人都是在以羊圈的姿态过生活，并不能说这种姿态不好，我想等我30多岁，有了家庭和孩子，会更喜欢羊圈的生活，而目前，更需要的是在狼窝中找到自己的位置，成为狼中强者。</p><p>今天收到一条消息，有位关注者问我，“你是如何做到一直努力的？又是如何熬过最难过的时光的？为何我坚持不了多久就想要放弃？”<br>一直努力是谬贊了，因为我偶尔也偷懒。但大部分时间是在朝着自己想要的方向努力的。因为我害怕过自己不喜欢的生活。举个例子，我刚来北京两年左右，曾经因为租房跟中介闹得很不愉快，我就想过几年以后，如果还要跟中介交涉这些事情，我会不开心的。那我就需要买房。于是通过努力，去年买了过渡房。上班挤地铁，偶尔遇到孕妇，看起来都已经七八个月了，我就会想，天呐，如果我怀孕的时候，还要挤地铁，那我会不开心的。于是为了买车或者怀孕了可以在家不工作也有钱赚，便一边努力工作，一边不放弃写作出版。我就是一个害怕未来不在我计划内或掌控中的人，所以不断努力去够到想要的生活。</p><p>伸手党<br>你们身边有伸手党吗？遇到任何问题都喜欢问别人，丝毫不想自己动手动脑。其实这一定程度上是害了自己。无论是生活中，还是工作上，你去看，混的不错的人，一定都是自我驱动力很强的人。他们想要做什么事情，会通过自己达成。当然过程中也会找别人帮忙，但你要明白，资源整合和伸手党本质里是有区别的。你可以有高质量的朋友圈，遇事的时候他们可以帮你解决，但绝不可能遇事了自己吩咐下去别人帮你去执行。</p><p>经常收到一些消息，说“我想转行到互联网，你给我说说都有哪些职位，这些职位都具体负责什么吧？”我会说你去某几个互联网招聘网站，先去了解下，然后看下别人的岗位要求，工作内容，再跟自己做一下匹配，看是否喜欢，是否适合，用不了多久，又回来了，说“我看了，你说我从哪个做起呢？”，每当这个时候就会默默的火大，心想我又不了解你，我哪里知道你适合哪个。你自己都不清楚自己定位，又如何做到让一个陌生人帮你做决定呢？如果真的想转行，那百度，知乎，豆瓣，微信自媒体，那么多平台帮你了解呢！还有人会说“我现在的生活很无聊，但不知道自己的兴趣在哪里，你说我该学些什么呢？学英语怎么样。”我觉得这类人也是因为圈子太小，圈子里的人要么没有什么喜好，要么都人云亦云的去学自己原本不大感兴趣的英语了。还是那句话，多接触，多交朋友，你只有见识的多了，才能发现自己喜欢什么。就好像一个小孩子，你不带他去认识这个世界，去了解那些兴趣班，去接触其他小朋友，每天宅家里，他怎么知道自己会喜欢什么呢？</p><p>接触的人中，有一类和这些人是反面。他们会在看完一篇文章后说：感谢你让我又多知道一个兼职渠道，我百度了下，已经找到三家有合作意向的公司了；你文中提到的某个点对我太有用了，我知道下一步该如何做了；除了你说的那个网站，我还有想要分享给你的类似网站。这类人，有很多是很早前就认识的，过段时间你会发现，他们的生活是越来越好的。并且这部分人，确实也有很多成为了不错的朋友，因为是一类人，他们有跟你类似的经历和谈资，这就是吸引力法则，于是圈子就越来越大了。</p><p>很多人不知道如何去了解一个新鲜事物。我是在遇到一个自己没接触过，又很好奇的事情后，会打开n个相关网页，看上一通。看完后还有问题，再去找相关的人问，这时候你就不再是一个伸手党了，因为能自己了解的东西，你都了解过了，此时提出的问题，一定是你经过思考后的，别人也乐得一答。</p><p>长期的坚持，会成为一种习惯。<br>很多人说你是如何做到每天推送消息，每天读书写字的。刘同说过，“一件事只要你坚持得足够久，“坚持”就会慢慢变成“习惯”。原本需要费力去驱动的事情就成了家常便饭，原本下定决心才能开始的事情也变得理所当然。”我非常认同这句话。其实人都有犯懒的时候，推送文章这件事，我是因为想到有这么多关注者等着我，就会立马动力满满，所以无论回家多晚，我一定会坚持发。而写作，其实也有一个痛苦的坚持过程。去年接了一本书，8w字，根据交稿日期算了下，每天至少更新2000字，开始的前三天，说实话每天都有种“想死”的感觉，每天早上一睁眼，第一反应是今天又欠编辑2000字。那种感觉，真的是希望某天不要醒来，这样就可以不写字。但有意义么？接了就要完成。于是坚持了一天，两天，三天，到第四天，突然发现，写作这件事，成为习惯了。如果没写完，自己会很自觉的不看电视剧，写完了，会感觉全身筋骨都舒服。现在读书写文就变成习惯了，所以毫无压力了。</p><p>与其抱怨，不如趁早把事解决<br>很多人遇到问题的时候喜欢抱怨，打电话和所有能扯上关系的人去煲电话粥，说自己过的如何糟糕，工作压力如何大，领导如何难搞。我觉得还是不够忙。</p><p>曾经自己也喜欢遇到点小事就抱怨，入职新公司后，压力也很大，突然发现自己变了，不再跟很多人闲聊，当然，还是不断会有人找我问问题，但我都说抽空回复，也不会跟任何人抱怨，因为根本没时间。这件事是你的，你就得在规定时间内完成。所以大脑快速运转的都是如何解决，而非抱怨。</p><p>如果你的生活目前很糟糕，一时半会改变不了，那不如把他当成一种人生经历，当成生活考验你的一种方式，去想办法解决；如果你的工作压力很大，问题很多，不妨把他当成魔鬼训练营，因为如果连这些问题都能解决，那你一定是强者，未来跳槽，你一定会有更多的谈资和加分项。</p><p>不必理会哪些不喜欢你的人<br>写文章最初，微博大号转发我的文章，会特别在意哪些评论。负面评论会让我不开心好久。现在不了，有人评论你，只能说明你出现在他的视野内了。而出现在他的视野内，我就已经很成功了。所以不必想要所有人都喜欢你，毕竟这世界上还有很多喜欢动动嘴就发泄自己对生活不满的人。“如果你坚信你的做法显而易见是对的，那就不要去向误会的人解释了。因为他们针对的根本就不是你的做法，而是你的人。所以，你唯一要做的就是表面微笑，但心里别把他们当自己人。”无论是工作，生活，还是对自己的兴趣爱好，都是如此。与你共勉。</p><p>如果你不喜欢现在的生活，就立马做出改变。你身边一定有很多朋友，师长，去跟他们聊，聊你的困惑和迷茫，但一定要事先经过自己的思考，因为如果连你都无法描述你对生活的不满意，那别人也无法帮你走出泥潭。别人可以帮你指路，但走的人，只能是你自己。不要浑浑噩噩，不知所以的过生活，那样会让你几年后发现与同龄人的差距越来越大，你会变得不喜欢自己，对生活也失去信心。想要过上自己想要的生活，就首先要用十二分的真心和努力去对待现在的生活。 </p><hr><h1 id="博客资源"><a href="#博客资源" class="headerlink" title="博客资源"></a>博客资源</h1><ul><li>C/C++</li><li><a href="http://www.skywind.me/">Skywind Inside | 写自己的代码，让别人猜去吧 </a></li><li>PHP</li><li><strong>(重要)</strong> <a href="http://www.walu.cc/">walu’s wiki</a>|<a href="http://www.walu.cc/phpbook/">PHP扩展开发及内核应用</a> / <a href="http://www.walu.cc/phpbook/preface.md">目录入口</a></li><li><a href="http://blog.csdn.net/newjueqi/article/category/1743543">App 后端</a></li><li>Mysql</li><li>Redis</li><li><a href="http://objectrocket.com/blog/how-to">http://objectrocket.com/blog/how-to</a></li><li>Linux</li><li><a href="https://www.digitalocean.com/community/users/manicas">Mitchell Anicas Technical Writer @ DigitalOcean</a></li><li>Javascript/Html/Css</li><li><a href="http://blog.eood.cn/">互联网技术和架构</a></li><li><a href="http://www.cnblogs.com/yuzhongwusan/archive/2011/11/29/2267568.html">触摸屏网站开发系列（一）-ios web App应用程序（ios meta）</a></li><li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">Flexbox</a></li><li><a href="https://dev.opera.com/articles/advanced-cross-browser-flexbox/#fallbacks">Advanced Cross-Browser Flexbox</a></li><li>R</li><li>Python</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂记 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql_索引</title>
      <link href="/2020/02/24/Mysql-%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/02/24/Mysql-%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h1 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h1><blockquote><p>Indexes are used to find rows with specific column values quickly.</p></blockquote><span id="more"></span><p><img src="/images/mysql/explain_eg01.png" alt="explain_eg01"></p><blockquote><ul><li>id (query id) - 查询执行的顺序</li></ul></blockquote><ul><li>select_type (type of statement) - 查询的类型<ol><li><code>SIMPLE</code>，简单查询，不使用UNION或子查询等。</li><li><code>PRIMARY</code>，子查询中的最外层查询。</li><li><code>UNION</code>，UNION中的第二个或后面的select查询。</li><li><code>SUBQUERY</code>，子查询中的第一个select，结果不依赖于外部查询。</li><li><code>DEPENDENT SUBQUERY</code>，子查询中的第一个select，结果依赖于外部查询。</li><li><code>DERIVED</code>，派生表的select,from子句的子查询。</li></ol></li><li>table (table referenced) - 使用的表名，可能是表的别名。</li><li>type (join type) - 连接的类型<ol><li><code>ALL</code> - Full Table Scan，全表查询</li><li><code>index</code> - Full Index Scan，只遍历索引树。</li><li><code>range</code> - 只检索给定范围的行且使用索引。</li><li><code>ref</code> - 连接匹配条件，即哪些列或常量被用于查找索引列上的值。</li><li><code>eq_ref</code> - 类似ref，区别是使用的索引是唯一索引，对于每个索引值表中只有一条记录匹配。</li><li><code>const</code>、<code>system</code> - 当mysql对查询某部分优化并转换为一个常量时，使用这些类型访问。例如将主键置于where条件中，MySQL就能将该查询转换为一个常量。system是const的特例，当查询表中只有一行记录时。</li><li><code>NULL</code> - 优化后甚至不需要访问表或索引，如取最小值可通过单独索引完成查找。</li></ol></li><li>possible_keys (which keys could have been used) - 可能使用到的索引</li><li>key (key that was used) - 实际使用到的索引，若没有任何索引则显示为null</li><li>key_len (length of used key) - (实际使用的)索引的长度<ol><li>表示索引中使用的字节数（通过定义得到的理论值）</li></ol></li><li>ref (columns compared to index) - 列与索引的比较，表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</li><li><strong>rows</strong> (amount of rows searched) - 扫描的行数</li><li><strong>Extra</strong> (additional information) - 额外的信息<ol><li><code>Using index</code> - 使用了索引覆盖。</li><li><code>Using where</code> - 不用读取表中的数据，只通过索引就能完成查询。即通常所说的<code>索引覆盖</code>。</li><li><code>Using filesort</code> - 当含有<code>order by</code>操作，且无法通过索引完成排序。</li><li><code>Using join buffer</code> - 连接条件没有使用索引，且需要连接缓冲区来存储中间结果。通常是一个需要优化的信号。</li><li><code>Impossible where</code> - where语句可能导致没有符合条件的行。</li><li><code>Select tables optimized away</code> - 仅通过使用索引，优化器可能仅从聚合函数结果中返回一行。如MIN/MAX/MyISAM引擎中的Count(*)</li><li><code>No tables used</code> - Query语句中使用from dual（即空表）或不含任何from子句</li></ol></li></ul><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><p>explain FORMAT=JSON select xxx from yyy where zzz;<br><a href="/2020/02/24/Mysql-%E7%B4%A2%E5%BC%95/#%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95%E7%9A%84%E7%B4%A2%E5%BC%95%E8%A6%86%E7%9B%96">查看用例</a></p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>用以高效查询数据的数据结构。</p><h1 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h1><p>底层数据结构是哈希表，只能用于等值查询，在碰撞场景下效率低，无法利用索引完成排序，没有最左匹配特性。</p><h1 id="B-树索引-Innodb"><a href="#B-树索引-Innodb" class="headerlink" title="B+树索引 - Innodb"></a>B+树索引 - Innodb</h1><p>底层数据结构是多路平衡查询树，节点天然有序，额外的适用于范围查询。<br><a href="/2020/02/27/MySQL-B-Tree%E7%B4%A2%E5%BC%95/">详细讨论参考另一篇文章</a></p><h2 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h2><p>通常就是主键索引。索引所在的页储存了数据行。</p><h2 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h2><p>除聚簇索引之外其他的索引都称为非聚簇索引。索引所在的页只存储了主键值，若需要其他数据需要回表查询。</p><h2 id="联合索引的索引覆盖"><a href="#联合索引的索引覆盖" class="headerlink" title="联合索引的索引覆盖"></a>联合索引的索引覆盖</h2><p>创建测试数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Create</span> <span class="hljs-keyword">Table</span>: <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `teacher` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  `age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>,<br>  `subject` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  `salary` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `idx_name` (`name`),<br>  KEY `idx_name_subject_salary` (`name`,`subject`,`salary`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `teacher` <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">10101</span>,<span class="hljs-string">&#x27;Srinivasan&#x27;</span>,<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;Comp. Sci.&#x27;</span>,<span class="hljs-number">65000</span>),<br>(<span class="hljs-number">12121</span>,<span class="hljs-string">&#x27;Wu&#x27;</span>,<span class="hljs-number">26</span>,<span class="hljs-string">&#x27;Finance&#x27;</span>,<span class="hljs-number">90000</span>),<br>(<span class="hljs-number">15151</span>,<span class="hljs-string">&#x27;Mozart&#x27;</span>,<span class="hljs-number">50</span>,<span class="hljs-string">&#x27;Music&#x27;</span>,<span class="hljs-number">40000</span>),<br>(<span class="hljs-number">22222</span>,<span class="hljs-string">&#x27;Einstein&#x27;</span>,<span class="hljs-number">76</span>,<span class="hljs-string">&#x27;Physics&#x27;</span>,<span class="hljs-number">95000</span>),<br>(<span class="hljs-number">32343</span>,<span class="hljs-string">&#x27;El Said&#x27;</span>,<span class="hljs-number">35</span>,<span class="hljs-string">&#x27;History&#x27;</span>,<span class="hljs-number">80000</span>),<br>(<span class="hljs-number">33456</span>,<span class="hljs-string">&#x27;Gold&#x27;</span>,<span class="hljs-number">49</span>,<span class="hljs-string">&#x27;Physics&#x27;</span>,<span class="hljs-number">87000</span>),<br>(<span class="hljs-number">45565</span>,<span class="hljs-string">&#x27;Katz&#x27;</span>,<span class="hljs-number">42</span>,<span class="hljs-string">&#x27;Comp. Sci.&#x27;</span>,<span class="hljs-number">75000</span>),<br>(<span class="hljs-number">58583</span>,<span class="hljs-string">&#x27;Califieri&#x27;</span>,<span class="hljs-number">38</span>,<span class="hljs-string">&#x27;History&#x27;</span>,<span class="hljs-number">60000</span>),<br>(<span class="hljs-number">76543</span>,<span class="hljs-string">&#x27;Singh&#x27;</span>,<span class="hljs-number">33</span>,<span class="hljs-string">&#x27;Finance&#x27;</span>,<span class="hljs-number">80000</span>),<br>(<span class="hljs-number">76766</span>,<span class="hljs-string">&#x27;Crick&#x27;</span>,<span class="hljs-number">46</span>,<span class="hljs-string">&#x27;Biology&#x27;</span>,<span class="hljs-number">72000</span>),<br>(<span class="hljs-number">83821</span>,<span class="hljs-string">&#x27;Brandt&#x27;</span>,<span class="hljs-number">29</span>,<span class="hljs-string">&#x27;Comp. Sci.&#x27;</span>,<span class="hljs-number">92000</span>),<br>(<span class="hljs-number">98345</span>,<span class="hljs-string">&#x27;Kim&#x27;</span>,<span class="hljs-number">31</span>,<span class="hljs-string">&#x27;Elec. Eng.&#x27;</span>,<span class="hljs-number">80000</span>);<br></code></pre></td></tr></table></figure><p><code>explain FORMAT=JSON select subject,salary from teacher where name=&quot;Mozart&quot;;</code><br>输出:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query_block&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;select_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;table&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;table_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;teacher&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;access_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ref&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;possible_keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;idx_name&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;idx_name_subject_salary&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;idx_name_subject_salary&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;key_length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;130&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;used_key_parts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;const&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;rows&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filtered&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;attached_condition&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;teacher.`name` = &#x27;Mozart&#x27;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;using_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span> <span class="hljs-comment">//索引覆盖</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>Using index (JSON property: using_index)</p><p>The column information is retrieved from the table using only information in the index tree without having to do an additional seek to read the actual row.</p></blockquote><ul><li>索引如何加速排序</li><li>Mysql的ICP（Index Condition Pushdown Optimization）</li><li>索引的存储和缓存</li><li>索引区分度和索引长度</li><li>…</li></ul><h2 id="联合索引的最左匹配原则"><a href="#联合索引的最左匹配原则" class="headerlink" title="联合索引的最左匹配原则"></a>联合索引的最左匹配原则</h2><table><tr><th>假设索引idx_a_b_c(`a`,`b`,`c`)</th><th>索引是否使用</th></tr><tr><td>where a=3</td><td></td></tr><tr><td>where a=3 and b=4</td><td></td></tr><tr><td>where a=3 and b=4 and c=5</td><td></td></tr><tr><td>where c=5 and a=3 and b=4</td><td></td></tr><tr><td>where b=4 / where b=4 and c=5 /<br>where c=5</td><td></td></tr><tr><td>where a=3 and c=5</td><td></td></tr><tr><td>where a=3 and b&gt;4 and c=5</td><td></td></tr><tr><td>where a is null and b is not null</td><td></td></tr><tr><td>where a &lt;&gt; 3 and b=4</td><td></td></tr><tr><td>where a^3&gt;0</td><td></td></tr><tr><td>where a=3 and b like 'k%' and c=5</td><td></td></tr><tr><td>where a=3 and b like '%k%' and c=5</td><td></td></tr><tr><td>where a=3 and b like 'k%k%' and c=5</td><td></td></tr></table><h2 id="索引下推-Index-Condition-Pushdown-Optimization"><a href="#索引下推-Index-Condition-Pushdown-Optimization" class="headerlink" title="索引下推 - Index Condition Pushdown Optimization"></a>索引下推 - Index Condition Pushdown Optimization</h2><h2 id="索引失效场景"><a href="#索引失效场景" class="headerlink" title="索引失效场景"></a>索引失效场景</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&mid=2650777604&idx=1&sn=9a0cfd88cfe15e9f198a7be02e2db3f6&chksm=f3f91d91c48e9487f0f815a77e3ab35e2bd7172e5e4a06deff7ea6d819748283e6e6db78f9d0&mpshare=1&scene=1&srcid=0226IIHf7SrQUneNI0PUIVBL&sharer_sharetime=1582723108055&sharer_shareid=0a5f0581869913747e54ca097f77ea2b&key=e6296972ac076826e6bb923456fb1df47326c43fe252e5b370eb168cb3ea72f9b988f65af9d04dfa654dac6a14bd6967cb08ce845ee7dd30a255d230ed38975133d7d9dd10f3a01fb011d037222eb5e2&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=AQthZutP+xc63SO0tW7U5NY=&pass_ticket=eYprKboj//Vkb9z2n1rVgrNb833slBE0lMIXwN27FvVBipjBM67fSOf2ZckEmBBo">不看后悔的腾讯面试题：SQL语句为什么执行的很慢？</a></p><p>参考资料：</p><ol><li><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-index-types.html">15.6.2.1 Clustered and Secondary Indexes</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-indexes.html">8.3.1 How MySQL Uses Indexes</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/index-btree-hash.html">8.3.9 Comparison of B-Tree and Hash Indexes</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/multiple-column-indexes.html">8.3.6 Multiple-Column Indexes</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_covering_index">covering index</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247486057&idx=1&sn=eec75a0f6f2c408c8188658011c38e07&chksm=ebd74b68dca0c27e90096f0017ba5479774ae7643f2cecd72b011823df1411ab1659ea889b37&mpshare=1&scene=1&srcid=0227wKqrRDn5WWOWC5hOZnrW&sharer_sharetime=1582784840625&sharer_shareid=0a5f0581869913747e54ca097f77ea2b&key=e1d18effe01e13c45e831bca7ce32424fbdfcd17afd7bd8529258d0dbbde26ef9685b7359cbad4b5df760219307def5f806daf7c611d12fe08d4f7b5ffe113045975d784908d381965b74a306162d71d&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=ARKOykk77XHXzE9b6n4W5k0=&pass_ticket=LfdlJsZTmXBQdrVYQljTmpWvFMzoeQx6Wi9ewOu4ScxuKyysIBvhLO/8k6ZGN7MK">Mysql索引简明教程</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法_二叉树</title>
      <link href="/2020/02/19/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2020/02/19/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>（最大）二叉堆是一个维护着最大堆属性的完全二叉树。<br>最大堆用来实现高效的优先级队列<code>PQ</code>(Priority Queue)。</p><span id="more"></span><p>为集中精力讨论二叉堆本身，本教学中的最大二叉堆中不包含相同的数值。</p><p>完全二叉树的定义：除最下层，其它层组成满二叉树（每个节点上都有值），而最下层的节点都靠左排列不留空隙。</p><p>最大二叉堆属性：每个节点的父节点(除了根节点)，都比该节点大。</p><p>优先级队列：</p><ol><li><code>Enqueue(x)</code>，将新元素<code>x</code>放入队列(按照某种次序)</li><li><code>y = Dequeue()</code>，将序列中优先级最大的值返回；若存在相同优先级的值，则返回最先插入的值，即退化到<code>FIFO</code></li></ol><p>最大二叉堆的高度 &lt;= <code>log N</code>(二分)</p><p>完全二叉树可以高效的存储为数组，因为展开为数组之后，各节点之间没有空隙。为简化遍历操作，我们假设数组下标从1开始。</p><p><img src="/images/ds/1_based_compact_array.png" alt="1_based_compact_array"></p><ol><li><code>parent(i) = i&gt;&gt;1</code>，例如8号节点的父节点为4号则<code>parent(8) = 8&gt;&gt;1 = 4</code></li><li><code>left(i) = i&lt;&lt;1</code></li><li><code>right(i) = (i&lt;&lt;1) + 1</code></li></ol><p>本教学中会介绍一下（最大）二叉堆的操作：</p><ol><li>Insert(v) <code>O(log N)</code></li><li>ExtractMax() <code>O(log N)</code></li><li>Create(A) <code>O(N log N)</code>版本</li><li>Create(A) <code>O(N)</code>版本</li><li>HeapSort() <code>O(N log N)</code></li></ol><h3 id="Inset-v"><a href="#Inset-v" class="headerlink" title="Inset(v)"></a>Inset(v)</h3><p><img src="/images/ds/BHT_BubbleUp.gif" alt="BHT_BubbleUp"><br>插入操作只能在最末尾的位置进行，这是为来保证二叉树的完全二叉树属性。但此时也可能会破坏最大堆属性，因此插入点可能需要向上移动。这个操作称之为<code>ShitUp</code>或<code>BubbleUp</code>或<code>IncreaseKey</code>。</p><h3 id="ExtractMax"><a href="#ExtractMax" class="headerlink" title="ExtractMax"></a>ExtractMax</h3><p>删除堆顶数据，然后将最末尾数据移动到堆顶，此时会破坏最大堆结构，因此需要向下调整。称之为<code>ShiftDown</code>或<code>BubbleDown</code>或<code>Heapify</code>操作。<br>在向下调整时，总是和较大的子节点交换。</p><h3 id="PQ-优先级队列"><a href="#PQ-优先级队列" class="headerlink" title="PQ - 优先级队列"></a>PQ - 优先级队列</h3><p>到此，有了<code>Insert(v)</code>和<code>ExtractMax()</code>操作，我们实现了优先级队列。</p><h3 id="前中后序遍历"><a href="#前中后序遍历" class="headerlink" title="前中后序遍历"></a>前中后序遍历</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;github.com/straysh/basis_go/datastructure&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    n1 := &amp;datastructure.BTNode&#123;Data: <span class="hljs-number">81</span>&#125;<br>    n2 := &amp;datastructure.BTNode&#123;Data: <span class="hljs-number">80</span>&#125;<br>    n3 := &amp;datastructure.BTNode&#123;Data: <span class="hljs-number">64</span>&#125;<br>    n4 := &amp;datastructure.BTNode&#123;Data: <span class="hljs-number">59</span>&#125;<br>    n5 := &amp;datastructure.BTNode&#123;Data: <span class="hljs-number">67</span>&#125;<br>    n6 := &amp;datastructure.BTNode&#123;Data: <span class="hljs-number">48</span>&#125;<br>    n7 := &amp;datastructure.BTNode&#123;Data: <span class="hljs-number">57</span>&#125;<br>    n8 := &amp;datastructure.BTNode&#123;Data: <span class="hljs-number">35</span>&#125;<br>    n9 := &amp;datastructure.BTNode&#123;Data: <span class="hljs-number">29</span>&#125;<br>    n10 := &amp;datastructure.BTNode&#123;Data: <span class="hljs-number">30</span>&#125;<br>    n11 := &amp;datastructure.BTNode&#123;Data: <span class="hljs-number">46</span>&#125;<br><br>    n1.Left = n2; n1.Right = n3<br>    n2.Left = n4; n2.Right = n5<br>    n3.Left = n6; n3.Right = n7<br>    n4.Left = n8; n4.Right = n9<br>    n5.Left = n10;n5.Right = n11<br><br>    <span class="hljs-comment">//前序遍历</span><br>    preOrder(n1)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/ds/bt_eg01.png" alt="bt_eg01"></p><h4 id="递归法-前序遍历"><a href="#递归法-前序遍历" class="headerlink" title="递归法 - 前序遍历"></a>递归法 - 前序遍历</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(node *datastructure.BTNode)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> node==<span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;%d &quot;</span>, node.Data)<br>    preOrder(node.Left)<br>    preOrder(node.Right)<br>&#125;<br><span class="hljs-comment">//输出: 81 80 59 35 29 67 30 46 64 48 57</span><br></code></pre></td></tr></table></figure><h4 id="递归法-中序遍历"><a href="#递归法-中序遍历" class="headerlink" title="递归法 - 中序遍历"></a>递归法 - 中序遍历</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inOrder</span><span class="hljs-params">(node *datastructure.BTNode)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> node==<span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    inOrder(node.Left)<br>    fmt.Printf(<span class="hljs-string">&quot;%d &quot;</span>, node.Data)<br>    inOrder(node.Right)<br>&#125;<br><span class="hljs-comment">//输出: 35 59 29 80 30 67 46 81 48 64 57</span><br></code></pre></td></tr></table></figure><h4 id="递归法-后序遍历"><a href="#递归法-后序遍历" class="headerlink" title="递归法 - 后序遍历"></a>递归法 - 后序遍历</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">postOrder</span><span class="hljs-params">(node *datastructure.BTNode)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> node==<span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    postOrder(node.Left)<br>    postOrder(node.Right)<br>    fmt.Printf(<span class="hljs-string">&quot;%d &quot;</span>, node.Data)<br>&#125;<br><span class="hljs-comment">//输出: 35 29 59 30 46 67 80 48 57 64 81</span><br></code></pre></td></tr></table></figure><h4 id="深度优先-DSF-前序遍历"><a href="#深度优先-DSF-前序遍历" class="headerlink" title="深度优先(DSF) - 前序遍历"></a>深度优先(DSF) - 前序遍历</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dsf</span><span class="hljs-params">(node *datastructure.BTNode)</span></span> &#123;<br>    stack := datastructure.NewStackBT(<span class="hljs-number">11</span>)<br>    stack.Push(node)<br><br>    <span class="hljs-keyword">for</span> ;stack.Size() != <span class="hljs-number">0</span>; &#123;<br>        item := stack.Pop()<br>        fmt.Printf(<span class="hljs-string">&quot;%d &quot;</span>, item.Data)<br>        <span class="hljs-keyword">if</span> item.Right!=<span class="hljs-literal">nil</span> &#123;<br>            stack.Push(item.Right)<br>        &#125;<br>        <span class="hljs-keyword">if</span> item.Left!=<span class="hljs-literal">nil</span>&#123;<br>            stack.Push(item.Left)<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出: 81 80 59 35 29 67 30 46 64 48 57</span><br></code></pre></td></tr></table></figure><h4 id="深度优先-DSF-中序遍历"><a href="#深度优先-DSF-中序遍历" class="headerlink" title="深度优先(DSF) - 中序遍历"></a>深度优先(DSF) - 中序遍历</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dsfInOrder</span><span class="hljs-params">(node *datastructure.BTNode)</span></span> &#123;<br>    stack := datastructure.NewStackBT(<span class="hljs-number">11</span>)<br>    p := node<br><br>    <span class="hljs-keyword">for</span> ;p!=<span class="hljs-literal">nil</span>; &#123;<br>        <span class="hljs-keyword">if</span> p.Left != <span class="hljs-literal">nil</span> &#123;<br>            stack.Push(p)<br>            p = p.Left<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            fmt.Printf(<span class="hljs-string">&quot;%d &quot;</span>, p.Data)<br>            p = p.Right<br>            <span class="hljs-keyword">for</span> ;p==<span class="hljs-literal">nil</span> &amp;&amp; stack.Size()&gt;<span class="hljs-number">0</span>; &#123;<br>                p = stack.Pop()<br>                fmt.Printf(<span class="hljs-string">&quot;%d &quot;</span>, p.Data)<br>                p = p.Right<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>输出: <span class="hljs-number">35</span> <span class="hljs-number">59</span> <span class="hljs-number">29</span> <span class="hljs-number">80</span> <span class="hljs-number">30</span> <span class="hljs-number">67</span> <span class="hljs-number">46</span> <span class="hljs-number">81</span> <span class="hljs-number">48</span> <span class="hljs-number">64</span> <span class="hljs-number">57</span><br></code></pre></td></tr></table></figure><h4 id="深度优先-DSF-后序遍历"><a href="#深度优先-DSF-后序遍历" class="headerlink" title="深度优先(DSF) - 后序遍历"></a>深度优先(DSF) - 后序遍历</h4><p>//todo</p><h4 id="广度优先-BSF-按层遍历"><a href="#广度优先-BSF-按层遍历" class="headerlink" title="广度优先(BSF) - 按层遍历"></a>广度优先(BSF) - 按层遍历</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bsf</span><span class="hljs-params">(node *datastructure.BTNode)</span></span> &#123;<br>    queue := datastructure.NewQueueBT(<span class="hljs-number">11</span>)<br>    queue.Enqueue(node)<br><br>    <span class="hljs-keyword">for</span> ;queue.Size()&gt;<span class="hljs-number">0</span>; &#123;<br>        p := queue.Dequeue()<br>        fmt.Printf(<span class="hljs-string">&quot;%d &quot;</span>, p.Data)<br><br>        <span class="hljs-keyword">if</span> p.Left!=<span class="hljs-literal">nil</span> &#123;<br>            queue.Enqueue(p.Left)<br>        &#125;<br>        <span class="hljs-keyword">if</span> p.Right!=<span class="hljs-literal">nil</span> &#123;<br>            queue.Enqueue(p.Right)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="求树的高度"><a href="#求树的高度" class="headerlink" title="求树的高度"></a>求树的高度</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">btHeight</span><span class="hljs-params">(node *datastructure.BTNode)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> max(btHeight(node.Left), btHeight(node.Right)) + <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Golang </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法_位掩码</title>
      <link href="/2020/02/18/%E7%AE%97%E6%B3%95-%E4%BD%8D%E6%8E%A9%E7%A0%81/"/>
      <url>/2020/02/18/%E7%AE%97%E6%B3%95-%E4%BD%8D%E6%8E%A9%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><code>bitmask</code>提供了一种高效的操作小规模布尔值的方式。<br>通过位操作，布尔位标志可以很容易且快速的检测、取正、取反。例如[旅行售货员问题]。</p><p>约定：</p><ol><li>数值S &lt;= 32767(2<sup>15</sup>-1)</li><li>置位, 按索引将i位值为1.索引从0开始，但是从左右边向左数。</li><li>取位，按索引检查i位是否是1。</li><li>反转位，将i位置值反转。</li><li>清除位，将位置i置0。</li><li>最低有效位(LSB)，快速检测最低位是是1的位置。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Golang </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>草稿_go语法</title>
      <link href="/2020/02/14/%E8%8D%89%E7%A8%BF-go%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/02/14/%E8%8D%89%E7%A8%BF-go%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li>布尔型:只能取<code>false</code>或<code>true</code>．例<code>var b bool = true</code>.</li><li>数字类型:<ol><li>int - 整型</li><li>float32/float64 - 浮点型</li><li>原生支持复数</li></ol></li><li>字符串类型</li><li>派生类型<ol><li>指针类型</li><li>数组类型</li><li>切片类型</li><li>结构类型 <code>struct</code></li><li><code>channel</code>类型</li><li>函数类型</li><li>接口类型<code>interface</code></li><li><code>map</code>类型</li></ol></li></ul><h2 id="go语法中一些特殊的数字类型"><a href="#go语法中一些特殊的数字类型" class="headerlink" title="go语法中一些特殊的数字类型"></a><code>go</code>语法中一些特殊的数字类型</h2><table><tr><th>类型</th><th>长度</th></tr><tr><td>byte</td><td>类似 `uint8`</td></tr><tr><td>rune</td><td>类似 `int32`</td></tr><tr><td>uint32</td><td>或 64位</td></tr><tr><td>int</td><td>取决于操作系统</td></tr><tr><td>uintptr</td><td>无符号整型,用于存放一个指针</td></tr></table><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p><code>go</code>中字符串类型是只读的.采用<code>UTF-8</code>编码.每个<code>字符</code>对应一个<code>rune</code>类型.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-type">string</span>转<span class="hljs-type">int</span>:     <span class="hljs-type">int</span>, err   := strconv.Atoi(<span class="hljs-type">string</span>) <span class="hljs-comment">// anscii to int</span><br><span class="hljs-type">string</span>转<span class="hljs-type">int64</span>:   <span class="hljs-type">int64</span>, err := strconv.ParseInt(<span class="hljs-type">string</span>, <span class="hljs-number">10</span>, <span class="hljs-number">64</span>)<br><span class="hljs-type">int</span>转<span class="hljs-type">string</span>:     <span class="hljs-type">string</span>     := strconv.Itoa(<span class="hljs-type">int</span>)<br><span class="hljs-type">int64</span>转<span class="hljs-type">string</span>:   <span class="hljs-type">string</span>     := strconv.FormatInt(<span class="hljs-type">int64</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>使用<code>range</code>关键字迭代字符串时,每次得到一个字符,<code>rune</code>类型,循环的索引值是字节为单位的偏移量.该<code>rune</code>类型的字符被称为代码点.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs golang">str := <span class="hljs-string">&quot;go语言&quot;</span><br><br><span class="hljs-keyword">for</span> idx, char := <span class="hljs-keyword">range</span> str &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;%d:%#U\n&quot;</span>, idx, char)<br>&#125;<br>UTF<span class="hljs-number">-8</span>中,一个英文字符是<span class="hljs-number">1</span>字节,一个中文字符是<span class="hljs-number">3</span>字节,输出:<br><span class="hljs-number">0</span>:U+<span class="hljs-number">0067</span> <span class="hljs-string">&#x27;g&#x27;</span><br><span class="hljs-number">1</span>:U+<span class="hljs-number">006</span>F <span class="hljs-string">&#x27;o&#x27;</span><br><span class="hljs-number">2</span>:U+<span class="hljs-number">8</span>BED <span class="hljs-string">&#x27;语&#x27;</span><br><span class="hljs-number">5</span>:U+<span class="hljs-number">8</span>A00 <span class="hljs-string">&#x27;言&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="变量及声明"><a href="#变量及声明" class="headerlink" title="变量及声明"></a>变量及声明</h1><p>当一个变量被<code>var</code>声明之后,系统自动赋予它零值:</p><ol><li><code>bool</code>为<code>false</code></li><li>整型为 <code>0</code></li><li>浮点型为<code>0.0</code></li><li>字符串为空<code>&quot;&quot;</code></li><li>派生类型均为<code>nil</code></li></ol><p>如果你想交换两个变量的值,则可以简单的使用:<br><code>a,b = b,a</code></p><h2 id="nil值"><a href="#nil值" class="headerlink" title="nil值"></a><code>nil</code>值</h2><p>语法错误:未指定类型 <code>var    x    =    nil    //    错误 </code></p><p>给一个<code>nil</code>指的<code>slice</code>添加元素是合法的,但<code>map</code>不行.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> m <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br>m[<span class="hljs-string">&quot;one&quot;</span>] = <span class="hljs-number">1</span> <span class="hljs-comment">// 错误</span><br></code></pre></td></tr></table></figure><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><ol><li><p>运算符<code>+</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs golang">str := <span class="hljs-string">&quot;go&quot;</span> + <span class="hljs-string">&quot;语&quot;</span> + <span class="hljs-string">&quot;言&quot;</span> <span class="hljs-comment">// 输出 &quot;go语言&quot;</span><br></code></pre></td></tr></table></figure><p>由于字符串是只读的,因此会产生很对碎片化的无用字符串,等待垃圾回收,性能较差.</p></li><li><p>fmt.Sprintf()<br>内部使用[]byte实现,不像运算符会产生很多临时字符串,但内部逻辑复杂,很多判断,且为了兼容数据类型使用了<code>interface</code>,性能一般</p></li><li><p>strings.Join()<br>会计算最终字符串的大小,先申请合适大小的内存,在逐个字节的填入,为了构造这个数组,性能一般.</p></li><li><p>bytes.Buffer</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> buf bytes.Buffer<br>buf.WriteString(<span class="hljs-string">&quot;go&quot;</span>)<br>buf.WriteString(<span class="hljs-string">&quot;语&quot;</span>)<br>buf.WriteString(<span class="hljs-string">&quot;言&quot;</span>)<br><br>fmt.Print(buffe.String())<br></code></pre></td></tr></table></figure><p>比较理想.内部实现对内存增长有优化,若能预估最终长度,可以使用buffer.Grow()来设置capacity.</p></li><li><p>string.Builder</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> bs strings.Builder<br>bs.WriteString(<span class="hljs-string">&quot;go&quot;</span>)<br>bs.WriteString(<span class="hljs-string">&quot;语&quot;</span>)<br>bs.WriteString(<span class="hljs-string">&quot;言&quot;</span>)<br><br>fmt.Print(bs.String())<br></code></pre></td></tr></table></figure><p>比较理想.内部使用slice来保存和管理内容,slice指向底层的数组.同样提供了Grow()来设置容量.但<code>strings.Builder</code>是非线程安全的,性能上和<code>bytes.Buffer</code>相差无几.</p></li></ol><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>类型 + 长度 定义一个数组类型.<br>所以<code>[5]int</code>和<code>[10]int</code>是两个不同的类型.</p><p>注:特殊的,我们可以使用<code>[10]interface&#123;&#125;</code>来定一个存放任意类型数据的数组,但使用值时需要先做类型判断.</p><h2 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h2><ol><li><p><code>var</code>关键字<br><code>var arr1 [5]int</code> arr1的类型是<code>[5]int</code></p></li><li><p><code>new</code>关键字<br><code>var arr1 = new([5]int)</code> arr1的类型是 <code>*[5]int</code></p></li><li><p>其他</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> arrAge = [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">18</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">35</span>&#125;<br><span class="hljs-keyword">var</span> arrLazy = [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br><span class="hljs-keyword">var</span> arKeyValue = [<span class="hljs-number">5</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Chris&quot;</span>, <span class="hljs-number">4</span>:<span class="hljs-string">&quot;Ron&quot;</span>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p>切片的底层是一个数组,自身包含:①对数组的引用 ②起始偏移量 ③中止偏移量 ④切片容量<br>可以理解为切片是对数组的一个动态窗口.</p><p>有点<br>(多个)切片可以引用同一个数组,因此不需要额外的内存空间,比直接使用数组高效,因此<code>go</code>中更多的使用切片.</p><p>注:切片本身就是一个引用类型, 指向切片的指针没有意义.类似指向<code>interface</code>的指针也没有意义.</p><h2 id="声明切片"><a href="#声明切片" class="headerlink" title="声明切片"></a>声明切片</h2><p><code>var slice1 []int</code>只需要指定类型,而不能指定长度.(指定了长度就是数组了!!!)<br>一个切片在未初始化前,值是<code>nil</code>,长度是<code>0</code>.</p><p>初始化切片的操作:<br><code>var slice1 []int = arr1[start:end]</code> 包含<code>start</code>索引,不包含<code>end</code>索引.即slice1包含arr1[start..end-1]的元素.</p><p><code>var slice2 = []int&#123;1,2,3&#125;</code>也可以初始化切片.切片将指向底层创建的一个匿名数组.<br>注:这里的<code>var slice2</code>是<code>var slice2 []int</code>的简写.</p><p>作为数据源的数组还未定义时,可以使用<code>make</code>关键字创建切片:<br><code>var slice2 = make([]int, 5)</code>第二参数表示切片的长度,同样这里将切片类型<code>var slice2 []int</code>省略了,简写作<code>var slice2</code>.<br>更常用的,简写为<code>slice2 := make([]int, 5)</code>.</p><h2 id="make关键字创建切片的完整语法"><a href="#make关键字创建切片的完整语法" class="headerlink" title="make关键字创建切片的完整语法"></a><code>make</code>关键字创建切片的完整语法</h2><p><code>make([]int, 10, 50)</code>,第三个参数<code>50</code>指定了底层数组的大小,第二个参数<code>10</code>指定了切片的初始长度.</p><p>从数组或切片中生成一个新的切片:<br><code>a[low : high : max]</code></p><p>例如:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs golang">a := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>b := a[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>:<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>这里的切片b的长度是3-1=2,容量是5-1=4. <code>1</code>, <code>3</code>, <code>5</code>都是索引.</p><h3 id="切片重组-reslice"><a href="#切片重组-reslice" class="headerlink" title="切片重组(reslice)"></a>切片重组(reslice)</h3><p><code>slice1    :=    make([]type,    start_length,    capacity)</code></p><p><code>start_length</code>是切片的初始长度,<code>capacity</code>是底层数组的大小也是切片的容量.</p><p>改变切片长度的操作称之为切片重组,但切片重组时不能超过底层数组的容量.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> slice1 []<span class="hljs-type">int</span> = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>)<br>slice2 := slice1[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>]<br><br>fmt.Println(slice2)<br><span class="hljs-comment">// panic: runtime error: slice bounds out of range [:6] with capacity 5</span><br></code></pre></td></tr></table></figure><h3 id="切片扩容"><a href="#切片扩容" class="headerlink" title="切片扩容"></a>切片扩容</h3><p><code>func    append(s[]T,    x    ...T)    []T</code>当使用<code>append</code>函数时,可能会引发切片扩容,扩容后的切片将指向一个新的底层数组,跟之前的底层数组不再有关联.</p><h2 id="字典map"><a href="#字典map" class="headerlink" title="字典map"></a>字典<code>map</code></h2><p>声明语法:<code>var map1 map[string]int</code></p><p>初始化语法: <code>var map2 = make(map[string]int, 10)</code></p><p>对值为<code>nil</code>的切片<code>append</code>是合法的(触发了切片扩容),但对值为<code>nil</code>的map赋值是非法的.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> s []<span class="hljs-type">int</span><br>s = <span class="hljs-built_in">append</span>(s, <span class="hljs-number">2</span>) <span class="hljs-comment">//合法</span><br><br><span class="hljs-keyword">var</span> m <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br>m[<span class="hljs-string">&quot;one&quot;</span>] = <span class="hljs-number">1</span> <span class="hljs-comment">// 非法</span><br></code></pre></td></tr></table></figure><h3 id="访问map的元素"><a href="#访问map的元素" class="headerlink" title="访问map的元素"></a>访问map的元素</h3><p>下标访问: <code>val = aMap[key]</code><br>判断下标是否存在:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">if</span> val,ok := aMap[<span class="hljs-string">&quot;dummy&quot;</span>]; !ok &#123;<br>    fmt.Println(<span class="hljs-string">&quot;key dummy not exists!&quot;</span>)<br>&#125;<br><br>fmt.Printf(<span class="hljs-string">&quot;value:%v\n&quot;</span>, value)<br></code></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 测试 map1 == nil</span><br><span class="hljs-keyword">var</span> map1 <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span> <span class="hljs-comment">// true</span><br>map1 := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;&#125; <span class="hljs-comment">//false</span><br>map1 := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;one&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;two&quot;</span>:<span class="hljs-number">2</span>&#125; <span class="hljs-comment">//false</span><br>map1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>) <span class="hljs-comment">//false</span><br>map1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">10</span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="删除key"><a href="#删除key" class="headerlink" title="删除key"></a>删除key</h3><p><code>delete(map1, &quot;key&quot;)</code>.若key不存在也不会报错.</p><h2 id="go语法陷阱"><a href="#go语法陷阱" class="headerlink" title="go语法陷阱"></a><code>go</code>语法陷阱</h2><p><code>range</code>循环中生成的值是真实集合的拷贝,它不是原有元素的引用.更新这些值并不会修改原来得值.使用这些值的地址并不会得到原有数据的指针.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs golang">a := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> a &#123;<br>    v *= <span class="hljs-number">2</span><br>&#125;<br><br>fmt.Println(a)<br>输出: [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a><code>defer</code></h2><ul><li>规则一 当<code>defer</code>被声明时,其参数就会被实时解析</li><li>规则二 <code>defer</code>执行顺序为先进后出,即栈<code>LIFO</code> </li><li>规则三 <code>defer</code>可以读取有名返回值,即可以改变有返回参数的值(不建议如此增加代码复杂度)</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>普通带函数名的函数</li><li>匿名函数或者<code>lambda</code>函数</li><li>方法(methods)</li></ul><p>函数可以作为类型使用<br><code>type addFunc func(int, int) int</code> 这里不需要函数体.<br>函数是一等值(<code>first-class value</code>):它们可以赋值给变量:<br><code>add := addFunc</code></p><h3 id="go默认使用值传递来传递形参"><a href="#go默认使用值传递来传递形参" class="headerlink" title="go默认使用值传递来传递形参."></a><code>go</code>默认使用值传递来传递形参.</h3><p>函数调用时,若希望在函数内改变原来的数据,则可以传递数据的指针到函数.</p><p>切片/字典/接口/通道(slice/map/interface/channel)模式使用引用传递(不需显示指出指针)</p><table><tr><th>名称</th><th>说明</th></tr><tr><td>close</td><td>用于关闭`channel`</td></tr><tr><td>len、cap</td><td>返回某个类型的长度/数量(字符串、数组、切片、map和channel)；<br>返回某个类型的容量(只能用于切片、map)</td></tr><tr><td>new、make</td><td>用于分配内存：<br>1. `new`用于值类型和用户定义类型，如自定义结构体.`new(T)`分配类型为T的零值并返回其地址，即指向类型T的指针.<br>其也可以被用于基本类型:`v := new(int)`.<br><br>2. `make`用于内置引用类型，如切片、map、channel.`make(T)`返回类型T的初始化后的值，因此它比`new`进行更多的工作.<br>二者都是内存的分配(堆上)，但`make`只用于slice、map、channel的初始化(非零值)；而`new`用于类型的内存分配，并且内存置为零.</td></tr><tr><td>copy、append</td><td>`copy`复制切片，`append`添加元素到切片</td></tr><tr><td>panic、recover</td><td>用于错误处理机制</td></tr></table><h3 id="递归与回调"><a href="#递归与回调" class="headerlink" title="递归与回调"></a>递归与回调</h3><p>使用递归函数常常遇到栈溢出的错误,一般使用惰性求值的技术解决.在<code>go</code>中可以使用<code>channel</code>和<code>gorutine</code>.</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    add := addNumber(<span class="hljs-number">5</span>)<br>    add(<span class="hljs-number">1</span>)<br>    add(<span class="hljs-number">1</span>)<br>    add(<span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addNumber</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span> &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;%p, %d\n&quot;</span>, &amp;x, x)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(y <span class="hljs-type">int</span>)</span></span> &#123;<br>        k := x + y<br>        x = k<br>        y = k<br>        fmt.Printf(<span class="hljs-string">&quot;%p, %d\n&quot;</span>, &amp;x, x)<br>        fmt.Printf(<span class="hljs-string">&quot;%p, %d\n&quot;</span>, &amp;y, y)<br>    &#125;<br>&#125;<br>输出:<br><span class="hljs-number">0xc0000aa010</span>, <span class="hljs-number">5</span><br><span class="hljs-number">0xc0000aa010</span>, <span class="hljs-number">6</span><br><span class="hljs-number">0xc0000aa030</span>, <span class="hljs-number">6</span><br><span class="hljs-number">0xc0000aa010</span>, <span class="hljs-number">7</span><br><span class="hljs-number">0xc0000aa048</span>, <span class="hljs-number">7</span><br><span class="hljs-number">0xc0000aa010</span>, <span class="hljs-number">8</span><br><span class="hljs-number">0xc0000aa060</span>, <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h2 id="type关键字"><a href="#type关键字" class="headerlink" title="type关键字"></a><code>type</code>关键字</h2><p>复习:<code>go</code>语言中的基本数据类型:布尔值、数值（整数、浮点数、复数）、字符串.<br>另有一些基于上述基本类型衍生的：byte、uintptr、rune、error等</p><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><p><code>type IZ int</code>然后可以使用<code>var a IZ = 5</code><br>变量<code>a</code>拥有底层类型<code>int</code>，类型<code>IZ</code>和<code>int</code>之间也可以显示的转换.<br>例如：将<code>IZ</code>类型转换成<code>int</code>类型：<code>b := int(a)</code>.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">type</span> IZ <span class="hljs-type">int</span><br><br>    <span class="hljs-keyword">var</span> a IZ = <span class="hljs-number">5</span><br>    b := <span class="hljs-type">int</span>(a)<br><br>    fmt.Printf(<span class="hljs-string">&quot;a&#x27;s type:%T\n&quot;</span>, a)<br>    fmt.Printf(<span class="hljs-string">&quot;b&#x27;s type:%T\n&quot;</span>, b)<br>&#125;<br>输出：<br>a<span class="hljs-string">&#x27;s type:main.IZ</span><br><span class="hljs-string">b&#x27;</span>s <span class="hljs-keyword">type</span>:<span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><p>可以看出来，类型<code>IZ</code>和类型<code>int</code>是两个不同的类型.</p><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p><code>type IZ int</code>语法中，新类型<code>IZ</code>无法访问原类型<code>int</code>的方法.<br>此时使用别名语法:<code>type IZ = int</code>.</p><p>常用的类型：</p><ul><li>类型可以是基本类型, 如:bool、int、float、string;</li><li>结构化的(复合类型), 如:struct、array、slice、map、channel;</li><li>只描述类型的行为的, 如:interface;</li></ul><p>结构化的类型没有真正的值,使用<code>nil</code>作为零值.<br><strong>注意</strong>在<code>go</code>语言中不存在类型继承.</p><h2 id="结构体struct"><a href="#结构体struct" class="headerlink" title="结构体struct"></a>结构体<code>struct</code></h2><p>结构体所包含的数据在内存中是连续块存在的.</p><h2 id="接口interfce"><a href="#接口interfce" class="headerlink" title="接口interfce"></a>接口<code>interfce</code></h2><p>接口中包含若干只有定义而没有实现的函数.<br>结构体不需要显示的声明自己实现了某接口.相反,只要结构体实现了某接口的所有函数,即可以认为结构体实现了该接口.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs goalng">// 接口B定义在包b中<br>package b<br>type B interface&#123;<br>    print()<br>&#125;<br><br>// 结构体A定义在包a中<br>package a<br>type A struct&#123;<br>    name string<br>&#125;<br>func (a *A) print() &#123;<br>    fmt.Println(&quot;aaa&quot;)<br>&#125;<br>// 在语法上不需显示的指出A实现了接B,即没有`implement`语法<br>// A的方法`print`与接口`B`的`print`有相同的函数签名,即认为结构体A实现了接口B<br>// 即时接口`B`和结构体`A`分别在两个不同的包里定义<br>import &quot;path/to/b&quot;<br>var x B = A&#123;&quot;straysh&quot;&#125; // 合法<br>x.print()<br></code></pre></td></tr></table></figure><h3 id="接口可以嵌套接口-但不能嵌套结构体"><a href="#接口可以嵌套接口-但不能嵌套结构体" class="headerlink" title="接口可以嵌套接口,但不能嵌套结构体."></a>接口可以嵌套接口,但不能嵌套结构体.</h3><p>嵌套接口时,多个不同的接口可以有包含相同签名的函数<code>go 1.14</code>实现.</p><h3 id="接口类型变量的类型转换"><a href="#接口类型变量的类型转换" class="headerlink" title="接口类型变量的类型转换"></a>接口类型变量的类型转换</h3><p><code>v := a.(T)</code> 没有断言的强制类型转换,可能触发<code>panic</code>:invalid type assertion<br>正确的做法是:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">if</span> val,ok := a.(T);!ok &#123;<br>   <span class="hljs-comment">// handle with error</span><br>&#125;<br><span class="hljs-comment">// handle with val</span><br></code></pre></td></tr></table></figure><p>当<code>a</code>可能含有多种可能的类型时:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> a <span class="hljs-keyword">interface</span>&#123;&#125;<br><br><span class="hljs-keyword">switch</span> a.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *Square:<br>    <span class="hljs-comment">//</span><br><span class="hljs-keyword">case</span> *Circle:<br>    <span class="hljs-comment">//</span><br><span class="hljs-keyword">case</span> <span class="hljs-literal">nil</span>:<br>    <span class="hljs-comment">//</span><br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">//</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试一个值是否实现了某接口"><a href="#测试一个值是否实现了某接口" class="headerlink" title="测试一个值是否实现了某接口"></a>测试一个值是否实现了某接口</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> B <span class="hljs-keyword">interface</span>&#123;<br>    <span class="hljs-built_in">print</span>()<br>&#125;<br><br><span class="hljs-keyword">if</span> val,ok := a.(B); !ok &#123;<br>    <span class="hljs-comment">// handle with error</span><br>&#125;<br><span class="hljs-comment">// handle with val</span><br></code></pre></td></tr></table></figure><h3 id="接收器"><a href="#接收器" class="headerlink" title="接收器"></a>接收器</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> A <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *A)</span></span> dummy()&#123;<br>    fmt.Println(<span class="hljs-string">&quot;aaaa&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a A)</span></span> foo()&#123;<br>    fmt.Println(<span class="hljs-string">&quot;foo...&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>对于一个接结构体<code>T</code>, 不论变量是<code>T类型</code>还是<code>*T类型</code>,都可以调动值方法或指针方法.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs golang">a1 := &amp;A&#123;&#125;<br><br>a1.dummy()<br>a1.foo()<br><br>a2 := A&#123;&#125;<br>a2.dummy()<br>a2.foo()<br>输出:<br>dummy...<br>foo...<br>dummy...<br>foo...<br></code></pre></td></tr></table></figure><p>但若变量是一个接口类型</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> Intf <span class="hljs-keyword">interface</span> &#123;<br>    M1()<br>    M2()<br>&#125;<br><span class="hljs-keyword">type</span> T <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t T)</span></span> M1()&#123;<br>    t.Name = <span class="hljs-string">&quot;name1&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *T)</span></span> M2()&#123;<br>    t.Name = <span class="hljs-string">&quot;name2&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接口类型的变量无法调用指针接收器的函数:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> t1 T = T&#123;<span class="hljs-string">&quot;T1&quot;</span>&#125; <span class="hljs-comment">// 正确</span><br>t1.M1()<br>t1.M2()<br><br><span class="hljs-keyword">var</span> t2 Intf = T&#123;<span class="hljs-string">&quot;T2&quot;</span>&#125; <span class="hljs-comment">//语法错误</span><br>t2.M1()<br>t2.M2()<br>输出:<br>cannot use composite literal (<span class="hljs-keyword">type</span> T) as <span class="hljs-keyword">type</span> Intf in assignment:<br>    T does not implement Intf (M2 method has pointer receiver)<br></code></pre></td></tr></table></figure><ul><li>何时使用值类型接收器<ol><li>接收器本身就是引用类型(map、func、channel).</li><li>接收器是切片，且该方法不会触发切片重组或扩容.</li><li>接收器是一个小数组或原生的结构体类型且没有可修改的字段或指针，又或接收器是基本数据类型(bool、int、float、string)</li></ol></li><li>何时使用指针类型<ol><li>若方法需要修改接收器,则必须是指针类型.</li><li>若接收器包含<code>sync.Mutex</code>或包含了锁的结构体,则必须是指针类型,以避免拷贝.</li><li>若接收器是一个大结构体或大数组,为性能考量,需要只用指针类型.</li><li>若接收器是结构体、数组、切片,blablabla…,使用指针类型.</li></ol></li></ul><h3 id="嵌套结构体中方法提升"><a href="#嵌套结构体中方法提升" class="headerlink" title="嵌套结构体中方法提升"></a>嵌套结构体中方法提升</h3><table><tr><th></th><th>S(T)</th><th>S(*T)</th></tr><tr><td>S包含T的方法集</td><td>Yes</td><td>Yes</td></tr><tr><td>S包含*T的方法集</td><td>No</td><td>Yes</td></tr><tr><td>*S包含T的方法集</td><td>Yes</td><td>Yes</td></tr><tr><td>*S包含*T的方法集</td><td>Yes</td><td>Yes</td></tr></table><p>当变量类型本身就是引用类型是,上述方法集约束是强约束.<br>否则,<code>go</code>有语法糖会自动转换.</p><hr><p>挖坑待读</p><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMzc4Mzk1Mw==&mid=2649840966&idx=1&sn=44037e2e27f29943c8f5ea648bb2b768&chksm=8398bbb8b4ef32ae47cf5206b7736b47a820acf54fcc18e64f0aaba129a88a6c0173e71731c9&scene=126&sessionid=1583042919&key=6ee24c58972fa441eb99d6da75b107ea5da7d9b9535a30e926d89c9cb4f435d7cf0585f16cd82c707a10c384b3ca3c00b51c0f69916185c75ca419a0b26b70c2b8cf00521ffbc1196e6844360bb14382&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=Abx0W8IBZJU29981q8LqhnE=&pass_ticket=H9KugKX66caf/O6hk1fW3TFdlTbKusIswgbiLVUQZcdxYhvcZNoDNBQ7FB7khUoW">图解Go语言内存分配</a></li><li><a href="https://qcrao91.gitbook.io/go/">码农桃花源</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMzc4Mzk1Mw==&mid=2649840965&idx=1&sn=f75d4d2dbd1f74e5cbe3e84d9b2c226e&chksm=8398bbbbb4ef32ad41021c84a198edf28ac85ca7925146de31d839838d50347a34a3fed23fff&scene=126&sessionid=1583042919&key=8b9241dd6b6217d753bd4cd8168ed7eeb802f2265a9c2b7dc62e2597c4f3eb0395949dae9a15b45d2e2e954691a55ada720e40b1cedc41b70e4fa0415c6edf951dc279a9b1fba471dd98abc64505ed38&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=ASYUZZ8JYgloPz7H3SwYdMY=&pass_ticket=H9KugKX66caf/O6hk1fW3TFdlTbKusIswgbiLVUQZcdxYhvcZNoDNBQ7FB7khUoW">为什么遍历 Go map 是无序的？</a><br><code>for range map</code> 启动时会随机选择map的起始位置<code>fastrand()</code></li><li>Golang垃圾回收</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMjk0ODI0OA==&mid=2247483727&idx=1&sn=abe1e6896cb398bde2517b469d07afa0&scene=45#wechat_redirect">图解Golang的GC算法</a></li><li><a href="https://www.zhihu.com/question/326191221/answer/721062767">为什么golang的gc不用stw？</a><br><img src="/images/golang/gc_algorithm_phases.jpg" alt="gc_algorithm_phases"></li><li><strong><a href="http://legendtkl.com/2017/04/28/golang-gc/">Golang 垃圾回收剖析</a></strong></li><li><a href="https://zhuanlan.zhihu.com/p/29892487">Go 语言的实现为何使用Plan 9的汇编器?</a></li><li>Golang调度器</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMzc4Mzk1Mw==&mid=2649840949&idx=1&sn=9bf2e2181c2a95e80d2de5393fa22551&chksm=8398bbcbb4ef32ddfad04efd5e6c8adf4321fb83a6b0b84b8e0384a31a5e18aa488cacd5dfb1&scene=126&sessionid=1583042991&key=d9c35d22f9135c5ec8a1822db1301a5470b9fdc87056eec856e887f0e65087fffc2c922fd4075801a370b872b5d2400cfdcded968054a1371f993bf0ad078693782e807201d3063cd4fc9bdd14db1caa&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=AZ10h6LQmdk8VJ/mS7LaI5Q=&pass_ticket=H9KugKX66caf/O6hk1fW3TFdlTbKusIswgbiLVUQZcdxYhvcZNoDNBQ7FB7khUoW">Go 语言调度（一）: 系统调度</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMzc4Mzk1Mw==&mid=2649840961&idx=1&sn=0176123660b248a922f388c4e876e97c&chksm=8398bbbfb4ef32a98d6f6f7f444b5e0e30e93aa919c081521b2a4cdc540c4e20703231973af3&scene=126&sessionid=1583042964&key=8b9241dd6b6217d70f6171eb87abe943acf5ca408bf363c85136882842a82c1a996c3fd0ba5eb49fc3579e8520d85212b68627f1ab9c941aa3fd1baa04a04b3d82f9e7f4d276bee1bafe1079b8b1f97b&ascene=1&uin=MTA4MTU0ODIyMg==&devicetype=Windows+7&version=6208006f&lang=zh_CN&exportkey=AS4FbvfA5oNLHUsx/YvDJis=&pass_ticket=H9KugKX66caf/O6hk1fW3TFdlTbKusIswgbiLVUQZcdxYhvcZNoDNBQ7FB7khUoW">Go调度器系列（2）宏观看调度器</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法_非基于比较的排序算法</title>
      <link href="/2020/02/14/%E7%AE%97%E6%B3%95-%E9%9D%9E%E5%9F%BA%E4%BA%8E%E6%AF%94%E8%BE%83%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2020/02/14/%E7%AE%97%E6%B3%95-%E9%9D%9E%E5%9F%BA%E4%BA%8E%E6%AF%94%E8%BE%83%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="非基于比较的排序算法-O-N"><a href="#非基于比较的排序算法-O-N" class="headerlink" title="非基于比较的排序算法 - O(N)"></a>非基于比较的排序算法 - O(N)</h3><ol><li>计数排序</li><li>基数排序</li></ol><p>由于不比较元素对，它们比基于比较的排序最优解<code>O(N log N)</code>还要快。</p><span id="more"></span><p>众所周知（本教学中未证明），基于比较的排序算法，最快也是<code>O(N log N)</code>。因此，任何最快情况下复杂度是<code>O(N log N)</code>的算法，例如归并排序，被认为是最佳的。</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>假设：待排序序列是少量整型数值，我们统计各个数值出现的次数，然后迭代数值范围来输出正序的数组。</p><p>例如，下例中所有数均在[1..9]中，我们先计算1出现的次数，2出现的次数…9出现的次数，然后迭代1-9并按出现次数x打印数值。<br><img src="/images/ds/Sorting_COU.gif" alt="Sorting_COU"></p><p>统计数值频率是<code>O(N)</code>，打印正序数列是<code>O(N+K)</code>，其中k是数值取值范围。当k较小时，即<code>O(N)</code>。</p><p>若k极大，则受内存限制统计频率将不可行。</p><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>假设：待排序的元素是大范围但小数值的整数，我们可以在基数排序中利用计数排序的思想来达到线性的时间复杂度。</p><p>在基数排序中，我们将每个元素看到是包含<code>w</code>位的字符串（不足<code>w</code>位的元素，左侧补零）。</p><p>从最低位（最右侧）到最高位（最左侧），逐位按计数排序方法将数据源排序，知道最高位排序完成，则正序。</p><p><img src="/images/ds/Sorting_RAD.gif" alt="Sorting_RAD"></p><p>我们只需要<code>O(w * (N+K))</code>，本例中<code>w=4,K=10</code>。</p><h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h3><p>排序算法的特点不仅仅是比较、非比较、递归、迭代的区别，<br>下面讨论一下原地排序/非原地排序，稳定排序/非稳定排序。</p><h3 id="原地排序"><a href="#原地排序" class="headerlink" title="原地排序"></a>原地排序</h3><p>原地排序指的是在排序时，只需要有限额外内存的排序算法。即可以有少量，有数的额外变量，但不能有不确定的变量数特别是这个数的大小依赖与数据源的大小N。</p><p>归并排序在子步骤合并阶段需要额外的空间，不是原地排序算法。</p><ul><li>冒泡、选择、插入是原地排序</li><li>快速排序，是原地排序</li><li>归并排序，不是原地排序</li><li>计数排序，不是原地排序</li><li>基数排序，不是原地排序</li></ul><h3 id="稳定排序"><a href="#稳定排序" class="headerlink" title="稳定排序"></a>稳定排序</h3><p>当排序完成之后，值相同的元素的相对为止保持不变的算法，称之为稳定排序算法。</p><!--more--><p>讨论：有哪些稳定排序算法？</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Golang </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法_稳定排序算法</title>
      <link href="/2020/02/13/%E7%AE%97%E6%B3%95-%E7%A8%B3%E5%AE%9A%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2020/02/13/%E7%AE%97%E6%B3%95-%E7%A8%B3%E5%AE%9A%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="稳定排序算法"><a href="#稳定排序算法" class="headerlink" title="稳定排序算法"></a>稳定排序算法</h3><p>当排序完成之后，值相同的元素的相对为止保持不变的算法，称之为稳定排序算法。</p><span id="more"></span><p>讨论：有哪些稳定排序算法？</p><ul><li>冒泡</li><li>选择</li><li>插入</li><li>归并</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Golang </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法_排序_基于比较的排序</title>
      <link href="/2020/02/12/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%9F%BA%E4%BA%8E%E6%AF%94%E8%BE%83%E7%9A%84%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/02/12/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%9F%BA%E4%BA%8E%E6%AF%94%E8%BE%83%E7%9A%84%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="基于比较的算法-复杂度O-N²"><a href="#基于比较的算法-复杂度O-N²" class="headerlink" title="基于比较的算法 复杂度O(N²)"></a>基于比较的算法 复杂度<code>O(N²)</code></h3><p>我们讨论三种基于比较的算法：</p><ol><li>冒泡</li><li>选择</li><li>插入</li></ol><p>因为这些算法需要比较两个元素以决定是否交换位置，故称基于比较的算法。</p><p>这三种算法最容易实现，但不是最高效的。其时间复杂度是<code>O(N²)</code>。</p><span id="more"></span><h3 id="冒泡算法"><a href="#冒泡算法" class="headerlink" title="冒泡算法"></a>冒泡算法</h3><p>给定数组N个元素，冒泡算法会：</p><ol><li>比较一对邻近的元素(a,b)。</li><li>当这对元素无序时，交换他们。（此是当a&gt;b时）。</li><li>重复步骤1，步骤2直到数组尾。</li><li>此时，最大元素会是最后一个元素。然后令N=N-1，并重复步骤1直到N=1。</li></ol><p><code>[29, 10, 14, 37, 14]</code>，冒泡的动画示意如下：<br><img src="/images/ds/Sorting_BUB.gif" alt="Sorting_BUB"></p><h3 id="冒泡排序的分析"><a href="#冒泡排序的分析" class="headerlink" title="冒泡排序的分析"></a>冒泡排序的分析</h3><p><code>比较</code>和<code>交换</code>需要常量时间，我们取<code>c</code>。</p><p>标准冒泡算法中有两层循环。<br>外层循环需要迭代N次。<br>但内层循环迭代的次数会越来越少：</p><ol><li>当i=0, N-1次迭代 - 比较和(可能的)交换 </li><li>当i=1，N-2次迭代</li><li>当i=2，N-3次迭代<br>…</li><li>当N=N-2，1次迭代</li><li>当N=N-1，0次迭代</li></ol><p>因此总共需要的迭代次数= <code>(N-1) + (N-2) + ... + 1 + 0 = N*(N-1)/2</code>。</p><p>总共花费的时间 = <code>c * N*(N-1)/2 = O(N²)</code>。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BUB</span><span class="hljs-params">(a []<span class="hljs-type">int</span>)</span></span> &#123;<br>    N := <span class="hljs-built_in">len</span>(a)<br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; N; i++ &#123;<br>        allSorted := <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; N-i<span class="hljs-number">-1</span>; j++ &#123;<br>            <span class="hljs-keyword">if</span> a[j] &gt; a[j+<span class="hljs-number">1</span>] &#123;<br>                a[j],a[j+<span class="hljs-number">1</span>] = a[j+<span class="hljs-number">1</span>],a[j]<br>                allSorted = <span class="hljs-literal">false</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> allSorted &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="冒泡改进-提前终止"><a href="#冒泡改进-提前终止" class="headerlink" title="冒泡改进 - 提前终止"></a>冒泡改进 - 提前终止</h3><p>冒泡排序并不高效，因为它是<code>O(N²)</code>的时间复杂度。</p><p>但若能提前终止(多余的)冒泡进程，时间复杂度可以提高到<code>O(1)</code>。</p><p>例：<code>[3, 6, 11, 25, 39]</code>。改进方法很简单：若内层循环没有发生交换，那么整个序列已经是正序的，此时可以终止冒泡进程。</p><p>讨论：这个改进让冒泡排序在一般情况下更快了，但无法改变其时间复杂度<code>O(N²)</code>的时间，为啥？</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>令数组大小为N，L=0，选择排序步骤如下：</p><ol><li>找到元素[L .. N-1]中最小元素X的位置。</li><li>将X元素和位置L的元素交换。</li><li>L++，并重复步骤1。</li></ol><p><img src="/images/ds/Sorting_SEL.gif" alt="Sorting_SEL"></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SEL</span><span class="hljs-params">(a []<span class="hljs-type">int</span>)</span></span> &#123;<br>    N := <span class="hljs-built_in">len</span>(a)<br><br>    <span class="hljs-keyword">for</span> L := <span class="hljs-number">0</span>; L &lt; N<span class="hljs-number">-1</span>; L++ &#123;<br>        X := minElements(a, L)<br>        a[X],a[L] = a[L],a[X]<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">minElements</span><span class="hljs-params">(a []<span class="hljs-type">int</span>, offset <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    min := offset<br>    <span class="hljs-keyword">for</span> i:=offset;i&lt;<span class="hljs-built_in">len</span>(a);i++&#123;<br>        <span class="hljs-keyword">if</span> a[i] &lt; a[min] &#123;<br>            min = i<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> min<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，也可以更改算法为找最大数并交换。</p><p>时间复杂度和冒泡是一样的<code>O(N²)</code>。</p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序有点像给手上的扑克牌排序的过程。<br><img src="/images/ds/inserting_sort_example.png" alt="inserting_sort_example"></p><ol><li>手上拿第一张牌。</li><li>拿到下一张牌，在目前有序的牌中找到正确的位置并插入新牌。</li><li>重复上述步骤直到所有牌结束。<br><img src="/images/ds/Sorting_INS.gif" alt="Sorting_INS"></li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">INS</span><span class="hljs-params">(a []<span class="hljs-type">int</span>)</span></span> &#123;<br>    N := <span class="hljs-built_in">len</span>(a)<br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; N; i++ &#123;<br>        <span class="hljs-keyword">for</span> j := i; j &gt; <span class="hljs-number">0</span>; j-- &#123;<br>            <span class="hljs-keyword">if</span> a[j] &lt; a[j<span class="hljs-number">-1</span>] &#123;<br>                a[j],a[j<span class="hljs-number">-1</span>] = a[j<span class="hljs-number">-1</span>],a[j]<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">INS</span><span class="hljs-params">(a []<span class="hljs-type">int</span>)</span></span> &#123;<br>    N := <span class="hljs-built_in">len</span>(a)<br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; N; i++ &#123; <span class="hljs-comment">// O(N)</span><br>        x := a[i]   <span class="hljs-comment">// 带插入的牌</span><br>        j := i - <span class="hljs-number">1</span>  <span class="hljs-comment">// 正序部分的最高索引</span><br>        <span class="hljs-keyword">for</span> ; j &gt;= <span class="hljs-number">0</span> &amp;&amp; a[j] &gt; x; j-- &#123;  <span class="hljs-comment">//最好O(1)，最坏O(N)</span><br>            a[j+<span class="hljs-number">1</span>] = a[j]  <span class="hljs-comment">// 给x腾出空间</span><br>        &#125;<br>        a[j+<span class="hljs-number">1</span>] = x <span class="hljs-comment">// j+1是要插入的位置</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分析插入排序"><a href="#分析插入排序" class="headerlink" title="分析插入排序"></a>分析插入排序</h3><p>外层循坏需要N-1次迭代。</p><p>但内层循环的次数：</p><ol><li>最好的情况下，只需要一次比较<code>a[j] &gt; x</code>就能确定是正序的，因此是<code>O(1)</code>。</li><li>最坏的情况下，数组是逆序的，这样每次迭代<code>a[j] &gt; x</code>都是true，每次都需要迭代整个内层循环，时间复杂度是<code>O(N)</code>。</li></ol><p>因此，最好情况是<code>O(1)</code>，最坏情况是<code>O(N²)</code>。</p><h3 id="基于比较的-O-N-log-N-的排序"><a href="#基于比较的-O-N-log-N-的排序" class="headerlink" title="基于比较的 O(N log N) 的排序"></a>基于比较的 <code>O(N log N)</code> 的排序</h3><ol><li>归并排序</li><li>快速排序 和 随机快速排序</li></ol><p>这些算法通常使用递归实现，采用分治思想， 归并排序和随机快速排序都是<code>O(N log N)</code>。</p><p>快速排序的非随机版本是<code>O(N²)</code>的。</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>令数组大小为N，归并排序步骤如下：</p><ol><li>将两个元素合并到一个正序的（仅含这两个元素）数组中。</li><li>将两个上述数组合并到一个正序的（现在含有四个元素）数组中。</li><li>最终：将两个各含有N/2的数组合并到一个数组中，则数组正序。</li></ol><p>这仅是一个概要，我们还需要讨论更多细节才能应用归并排序</p><h3 id="归并排序中复杂度O-N-的子步骤"><a href="#归并排序中复杂度O-N-的子步骤" class="headerlink" title="归并排序中复杂度O(N)的子步骤"></a>归并排序中复杂度<code>O(N)</code>的子步骤</h3><p>我们将归并排序拆开讨论，先讨论复杂度为<code>O(N)</code>的子步骤。</p><p>令数组A大小为N<sub>1</sub>，数组B大小为N<sub>2</sub>，我们很容易将之合并为一个正序的大小N=N<sub>1</sub>+N<sub>2</sub>的数组</p><p>只需要比较数组的第一个元素，将较小的数组元素全部放到另一个数组之前。这个<code>O(N)</code>的操作需要额外的数组来存储数据。</p><p><img src="/images/ds/Sorting_MER.gif" alt="Sorting_MER"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> high)</span> </span>&#123;<br>  <span class="hljs-comment">// subarray1 = a[low..mid], subarray2 = a[mid+1..high], both sorted</span><br>  <span class="hljs-type">int</span> N = high-low+<span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> b[N]; <span class="hljs-comment">// discuss: why do we need a temporary array b?</span><br>  <span class="hljs-type">int</span> left = low, right = mid+<span class="hljs-number">1</span>, bIdx = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (left &lt;= mid &amp;&amp; right &lt;= high) <span class="hljs-comment">// the merging</span><br>    b[bIdx++] = (a[left] &lt;= a[right]) ? a[left++] : a[right++];<br>  <span class="hljs-keyword">while</span> (left &lt;= mid) b[bIdx++] = a[left++]; <span class="hljs-comment">// leftover, if any</span><br>  <span class="hljs-keyword">while</span> (right &lt;= high) b[bIdx++] = a[right++]; <span class="hljs-comment">// leftover, if any</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; N; k++) a[low+k] = b[k]; <span class="hljs-comment">// copy back</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Golang实现：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">merge</span><span class="hljs-params">(a []<span class="hljs-type">int</span>, low, mid, high <span class="hljs-type">int</span>)</span></span> &#123;<br>    N := high - low + <span class="hljs-number">1</span><br>    left := low<br>    right := mid + <span class="hljs-number">1</span><br>    idx := <span class="hljs-number">0</span><br>    b := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, N, N)<br>    <span class="hljs-keyword">for</span> ; left &lt;= mid &amp;&amp; right &lt;= high; &#123;<br>        <span class="hljs-keyword">if</span> a[left] &lt;= a[right] &#123;<br>            b[idx] = a[left]<br>            left = left + <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            b[idx] = a[right]<br>            right = right + <span class="hljs-number">1</span><br>        &#125;<br>        idx = idx + <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> left &lt;= mid &#123;<br>        b[idx] = a[left]<br>        left = left + <span class="hljs-number">1</span><br>        idx = idx + <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> right &lt;= high &#123;<br>        b[idx] = a[right]<br>        right = right + <span class="hljs-number">1</span><br>        idx = idx + <span class="hljs-number">1</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; N; i++ &#123;<br>        a[low+i] = b[i]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分治思想"><a href="#分治思想" class="headerlink" title="分治思想"></a>分治思想</h3><p>分治法 - Divide and Conquer简写作<code>D&amp;C</code>。</p><ol><li>Divide step：将一个问题分解成小的问题，然后递归的解决小的问题。</li><li>Conquer step：将解决了的小问题合并起来，还原为原始问题的解。</li></ol><h3 id="归并算法的分治思想"><a href="#归并算法的分治思想" class="headerlink" title="归并算法的分治思想"></a>归并算法的分治思想</h3><p>归并算法是分治的一个应用。</p><p>divide step：将数组分为两半，然后递归的对两个数组分派归并排序。</p><p>conquer step：<a href="http://localhost:5000/2020/02/12/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%9F%BA%E4%BA%8E%E6%AF%94%E8%BE%83%E7%9A%84%E6%8E%92%E5%BA%8F/#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E4%B8%AD%E5%A4%8D%E6%9D%82%E5%BA%A6O-N-%E7%9A%84%E5%AD%90%E6%AD%A5%E9%AA%A4">将结果集合并成解</a>，这一步骤的工作量最大。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> </span>&#123;<br>  <span class="hljs-comment">// the array to be sorted is a[low..high]</span><br>  <span class="hljs-keyword">if</span> (low &lt; high) &#123; <span class="hljs-comment">// base case: low &gt;= high (0 or 1 item)</span><br>    <span class="hljs-type">int</span> mid = (low+high) / <span class="hljs-number">2</span>;    <br>    <span class="hljs-built_in">mergeSort</span>(a, low  , mid ); <span class="hljs-comment">// divide into two halves</span><br>    <span class="hljs-built_in">mergeSort</span>(a, mid+<span class="hljs-number">1</span>, high); <span class="hljs-comment">// then recursively sort them</span><br>    <span class="hljs-built_in">merge</span>(a, low, mid, high); <span class="hljs-comment">// conquer: the merge subroutine</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Golang实现：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MER</span><span class="hljs-params">(a []<span class="hljs-type">int</span>, low, high <span class="hljs-type">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> low &lt; high &#123;<br>        mid := (low + high) / <span class="hljs-number">2</span><br>        MER(a, low, mid)<br>        MER(a, mid+<span class="hljs-number">1</span>, high)<br>        merge(a, low, mid, high)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并排序时间复杂度分析"><a href="#归并排序时间复杂度分析" class="headerlink" title="归并排序时间复杂度分析"></a>归并排序时间复杂度分析</h3><p>归并排序中<code>merge</code>的复杂度是<code>O(N)</code>的，那么<code>merge</code>执行的次数决定了最终的时间复杂度。<br><img src="/images/ds/merge.png" alt="merge"></p><p>可以看到<code>k=lg N</code>，忽略常数，我们记归并排序的时间复杂度为<code>O(N log N)</code>。</p><h3 id="归并排序的优缺点"><a href="#归并排序的优缺点" class="headerlink" title="归并排序的优缺点"></a>归并排序的优缺点</h3><p>首先，最重要的一点是，归并排序的时间复杂度稳定的是<code>O(N log N)</code>，不受数据源的影响。没有任何的测试用例，不论数据源的大小，都不能是归并排序的时间超过<code>O(N log N)</code>。</p><p>目前为止，我们讨论过的算法中，归并排序是最适合处理大规模数据的算法。</p><p><a href="/2020/02/13/%E7%AE%97%E6%B3%95-%E7%A8%B3%E5%AE%9A%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/">归并排序是稳定排序算法，为啥？</a></p><p>当然，归并排序也有其劣势。</p><ol><li>从头开始实现归并排序并不是很容易。</li><li>在合并阶段，需要额外的存储空间。因此内存利用率不高，也不是原地排序算法。</li></ol><p><a href="https://en.wikipedia.org/wiki/Merge_sort#Variants">对归并排序的优化你可以参考这里</a></p><h3 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h3><p>快速排序也是分治法的应用。</p><p>Divide step：选择一个元素p，即<code>pivot</code>。<br>将数组a[i..j]分为三个部分：a[i..m-1], a[m], a[m=1..j]。<br>a[i..m-1]包含比p小的元素。<br>a[m]即<code>pivot</code>，m是p在数据源a中的索引。<br>a[m+1..j]包含了大于等于p的元素。<br>然后递归的重复上述步骤。</p><p>Conquer step：额，啥也不用做…</p><p>与归并排序对比，你会发现它的<code>D&amp;C</code>步骤刚好相反。</p><h3 id="分析快速排序"><a href="#分析快速排序" class="headerlink" title="分析快速排序"></a>分析快速排序</h3><p>还是查分开讨论，先讨论复杂度为<code>O(N)</code>的子步骤。</p><p>为了分割a[i..j]，我们先找到一个<code>pivot</code>p = a[i]。<br>剩下的a[i+1..j]将被分割为三个部分：</p><ol><li>S1=a[i+1..m]，元素都 &lt; P。</li><li>S2=a[m+1..k-1]，元素都 ≥ p。</li><li>未知部分 = a[k..j]，其他元素待分配到S1 或 S2。</li></ol><p>讨论：为什么选择p=a[i]，有没有其他选择？<br>硬核讨论：若每次都将==p的元素放在S2里合适吗？</p><p>起初，S1和S2都是空的，所有的元素除了p=<code>pivot</code>都在未知区域中。<br>对于每一个在位置区域的元素a[k]，将a[k]与p比较：</p><ol><li>a[k] ≥ p，将a[k]放入S2。</li><li>a[k] &lt; p，将a[k]放入S1。<br>最后交换a[i]和a[m]，即将p放在S1和S2的中间。<br><img src="/images/ds/partition1.png" alt="partition1"><br><img src="/images/ds/partition2.png" alt="partition2"><br>代码如下：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> </span>&#123;<br>  <span class="hljs-type">int</span> p = a[i]; <span class="hljs-comment">// p is the pivot</span><br>  <span class="hljs-type">int</span> m = i; <span class="hljs-comment">// S1 and S2 are initially empty</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i+<span class="hljs-number">1</span>; k &lt;= j; k++) &#123; <span class="hljs-comment">// explore the unknown region</span><br>    <span class="hljs-keyword">if</span> (a[k] &lt; p) &#123; <span class="hljs-comment">// case 2</span><br>      m++;<br>      <span class="hljs-built_in">swap</span>(a[k], a[m]); <span class="hljs-comment">// C++ STL algorithm std::swap</span><br>    &#125; <span class="hljs-comment">// notice that we do nothing in case 1: a[k] &gt;= p</span><br>  &#125;<br>  <span class="hljs-built_in">swap</span>(a[i], a[m]); <span class="hljs-comment">// final step, swap pivot with a[m]</span><br>  <span class="hljs-keyword">return</span> m; <span class="hljs-comment">// return the index of pivot</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (low &lt; high) &#123;<br>    <span class="hljs-type">int</span> m = <span class="hljs-built_in">partition</span>(a, low, high); <span class="hljs-comment">// O(N)</span><br>    <span class="hljs-comment">// a[low..high] ~&gt; a[low..m–1], pivot, a[m+1..high]</span><br>    <span class="hljs-built_in">quickSort</span>(a, low, m<span class="hljs-number">-1</span>); <span class="hljs-comment">// recursively sort left subarray</span><br>    <span class="hljs-comment">// a[m] = pivot is already sorted after partition</span><br>    <span class="hljs-built_in">quickSort</span>(a, m+<span class="hljs-number">1</span>, high); <span class="hljs-comment">// then sort right subarray</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>Golang实现：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">QUI</span><span class="hljs-params">(a []<span class="hljs-type">int</span>, low, high <span class="hljs-type">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> low &lt; high &#123;<br>        pivot := partition(a, low, high)<br>        QUI(a, low, pivot<span class="hljs-number">-1</span>)<br>        QUI(a, pivot+<span class="hljs-number">1</span>, high)<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">partition</span><span class="hljs-params">(a []<span class="hljs-type">int</span>, i, j <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    p := a[i]<br>    m := i<br><br>    <span class="hljs-keyword">for</span> k := i + <span class="hljs-number">1</span>; k &lt;= j; k++ &#123;<br>        <span class="hljs-keyword">if</span> a[k] &lt; p &#123;<br>            m++<br>            a[k],a[m] = a[m],a[k]<br>        &#125;<br>    &#125;<br>    a[i],a[m] = a[m],a[i]<br>    <span class="hljs-keyword">return</span> m<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速排序的时间复杂度分析"><a href="#快速排序的时间复杂度分析" class="headerlink" title="快速排序的时间复杂度分析"></a>快速排序的时间复杂度分析</h3><p><code>partition</code>操作只有一个循环，复杂度是<code>O(N)</code>。</p><p>那么快速排序的时间复杂度取决于<code>partition</code>执行的次数。</p><p>最坏情况下，当数据源是升序的，经过一轮后，S1是空的，S2包含除了<code>pivot</code>外其他元素。<br><img src="/images/ds/qsort_worstcase.png" alt="qsort_worstcase"><br>一共需要N轮循环，所以时间复杂度是<code>O(N²)</code>。</p><p>而最好情况下，每一次<code>pivot</code>都将数据源分割为两半，一共需要<code>log N</code>次。<br>因此复杂度是<code>O(N log N)</code>。</p><h3 id="随机快速排序-O-N-log-N"><a href="#随机快速排序-O-N-log-N" class="headerlink" title="随机快速排序 - O(N log N)"></a>随机快速排序 - O(N log N)</h3><p>It will take about 1 hour lecture to properly explain why this randomized version of Quick Sort has expected time complexity of O(N log N) on any input array of N elements.</p><p>In this e-Lecture, we will assume that it is true.</p><p>If you need non formal explanation: Just imagine that on randomized version of Quick Sort that randomizes the pivot selection, we will not always get extremely bad split of 0 (empty), 1 (pivot), and N-1 other items. This combination of lucky (half-pivot-half), somewhat lucky, somewhat unlucky, and extremely unlucky (empty, pivot, the rest) yields an average time complexity of O(N log N).</p><p>Discussion: Actually the phrase “any input array” above is not fully true. There is actually a way to make the randomized version of Quick Sort as currently presented in this VisuAlgo page still runs in O(N2). How?</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Golang </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法_排序_开篇</title>
      <link href="/2020/02/12/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%BC%80%E7%AF%87/"/>
      <url>/2020/02/12/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E5%BC%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="排序问题和排序算法"><a href="#排序问题和排序算法" class="headerlink" title="排序问题和排序算法"></a>排序问题和排序算法</h3><p>排序是一个经典的重排元素顺序的问题（其元素可以是整型、浮点型、字符串等可比较的类型）。可以重排为递增序列、非递减序列<sup>1</sup>，递减序列，非递增序列<sup>2</sup>。</p><p>排序算法非常多，各有优势与其限制。</p><p>排序通常是大学计算机学科中，介绍算法思想的入门问题。</p><p>不失一般性的，假定在本教学中我们只以非递减顺序排序整型，元素无需排重。</p><span id="more"></span><p>冒泡排序的演示<br><img src="/images/ds/Sorting_BUB.gif" alt="Sorting_BUB"></p><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>排序问题有大量的算法方案，都提现了计算机思想：</p><ol><li><code>比较</code>和<code>非比较</code>的底层策略。</li><li>迭代和递归的实现。</li><li>分治思想</li><li>最好/最差/平均时间复杂度分析。</li><li><a href="2020/02/12/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95">随机算法</a></li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>当数组A（整型数组）被排序后，许多问题都变得很容易：</p><ol><li>在A中查找值<code>v</code>。</li><li>在（静态）数组A中查找最大/最小，第k大/小值。</li><li>测试唯一性并删除A中重复的值。</li><li>查找A中值<code>v</code>的个数。</li><li>计算A与另一个已排序数组B的交集/并集。</li><li>在A中找到一对数(x,y)，x∈A且y∈A，满足 <code>x*y=z</code>，等等。</li></ol><h3 id="算法的缩写"><a href="#算法的缩写" class="headerlink" title="算法的缩写"></a>算法的缩写</h3><ol><li>基于比较的算法</li><li>BUB - Bubble Sort 冒泡排序</li><li>SEL - Selection Sort 选择排序</li><li>INS - Insertion Sort 插入排序</li><li>MER - Merge Sort(递归实现) 归并排序</li><li>QUI - Quick Sort(递归实现) 快速排序</li><li>R-Q - Random Quick Sort(递归实现) 随机快速排序</li><li>非比较排序</li><li>COU - Counting Sort 计数排序</li><li>RAD - Radix Sort 基数排序</li></ol><p>—OU<br>名词解释</p><ol><li>非递减序列</li><li>非递增序列<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1,2,3,4,5       递增序列   - 无重复元素<br>1,2,2,3,4,4,5,5 非递减序列 - 有重复元素<br>5,4,3,2,1       递减序列   - 无重复元素<br>5,4,4,3,2,2,1   非递增序列 - 有重复元素<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Golang </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_队列_总结</title>
      <link href="/2020/02/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97-%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>①链表 ②栈 ③队列 ④双向链表 ⑤双端队列</p><p>这物种结构的插入操作都是相同的，而查找/插入/移除有些微差别。</p><ul><li>栈，只能从头/栈顶执行peek/push/pop操作，都是严格受限的。</li><li>队列，只能从队首peek，从队尾push，从队首pop。</li><li>双端队列，只能从两端peek/enqueue/dequeue，而不能从中间操作。</li></ul><p>顺序链表和双向链表没有上述限制。</p><span id="more"></span><h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h3><p>下面对链表做一些深入的讨论：</p><ol><li>若不存储尾指针</li><li>若使用<code>dummy head</code></li><li>若<code>tail</code>元素指向<code>head</code>元素</li></ol><h3 id="标准实现"><a href="#标准实现" class="headerlink" title="标准实现"></a>标准实现</h3><p>todo…</p><h3 id="在线练习"><a href="#在线练习" class="headerlink" title="在线练习"></a>在线练习</h3><p><a href="https://visualgo.net/training?diff=Medium&n=7&tl=0&module=list">在线练习</a><br><a href="https://uva.onlinejudge.org/external/119/11988.pdf">UVa 11988 - Broken Keyboard (a.k.a. Beiju Text)</a><br><a href="https://open.kattis.com/problems/backspace">Kattis - backspace</a><br><a href="https://open.kattis.com/problems/integerlists">Kattis - integerlists</a></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Golang </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_双端队列</title>
      <link href="/2020/02/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
      <url>/2020/02/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>双端队列——Double-ended queue缩写deque，读作deck。其元素只能两端添加或删除，即只能从头部/尾部添加或删除。</p><span id="more"></span><p>在本教学中，<code>Deque</code>基本上算是一个受限的双向链表，只能做如下操作：</p><ol><li>查找头/尾元素(peek front/back)。</li><li>插入头部/尾部</li><li>从头部/尾部移除元素</li></ol><p>所有操作都是<code>O(1)</code>。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>Deque有一些高级应用，如<code>finding the shortest paths 0/1-weighted graph using modified BFS, on some sliding window techniques, etc</code></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Golang </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_双向链表</title>
      <link href="/2020/02/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/02/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>双向链表和顺序链表99%都是相同的。主要的区别是：每个节点包含两个指针，<code>next</code>指针指向后一个元素（若存在）即a<sub>j</sub>指向a<sub>j+1</sub>，另一个<code>prev</code>指针指向前一个元素，即a<sub>j</sub>指向a<sub>j-1</sub>（若存在）。</p><p><code>prev</code>指针是的双向链表能够反向遍历，但同时也增加了内存的消耗。它解决了顺序链表中移除尾元素的低效问题。</p><span id="more"></span><p>注意：在本教学中，双向链表（以及之后的双端队列）的边界是无方向的。</p><h3 id="Remove-i-At-Tail-i-N-1-复习"><a href="#Remove-i-At-Tail-i-N-1-复习" class="headerlink" title="Remove(i) - At Tail(i = N-1) 复习"></a>Remove(i) - At Tail(i = N-1) 复习</h3><p>顺序链表最大的问题是尾元素的移除，即时我们有指向尾元素的指针，因为我们需要将<code>tail</code>指针指向尾元素的前一个。</p><p>有了双向链表的反向能力，我可以直接找到前一个元素：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">Vertex* temp = tail; <span class="hljs-comment">// remember tail item</span><br>tail = tail-&gt;prev; <span class="hljs-comment">// the key step to achieve O(1) performance :O</span><br>tail-&gt;next = null; <span class="hljs-comment">// remove this dangling reference</span><br><span class="hljs-keyword">delete</span> temp; <span class="hljs-comment">// remove the old tail</span><br></code></pre></td></tr></table></figure><p><img src="/images/ds/DLL_remove_tail.gif" alt="DLL_remove_tail"><br>example DLL <code>[22 (head)&lt;-&gt;2&lt;-&gt;77&lt;-&gt;6&lt;-&gt;43&lt;-&gt;76&lt;-&gt;89 (tail)]</code></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol><li><code>insertHead(50)</code> - </li><li><code>insertTail(10)</code></li><li><code>insert(3,4)</code></li><li><code>removeHead()</code></li><li><code>remove(5)</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Golang </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_队列</title>
      <link href="/2020/02/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/"/>
      <url>/2020/02/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>队列这种ADT中，元素是<code>有序</code>的，主要操作有<code>enqueue</code>入队和<code>dequeue</code>出队。</p><p>即<code>Fist-In-First-Out</code>(FIFO)。最下进入队列的元素，会最后出队列。<br><img src="/images/ds/queue_illustration.png" alt="queue_illustration"></p><span id="more"></span><h3 id="数组实现队列问题-（一）"><a href="#数组实现队列问题-（一）" class="headerlink" title="数组实现队列问题 （一）"></a>数组实现队列问题 （一）</h3><p>若使用紧凑数组来实现队列，a<sub>0</sub>表示第一个元素,a<sub>N-1</sub>表示最后一个元素，那么在执行<code>dequeue</code>出队操作是会有严重的性能问题。</p><p>因为对数组而言，在尾部添加元素是<code>O(1)</code>，但在头部移除元素是<code>O(N)</code>（需要向逐个左移动剩余所有元素）。</p><h3 id="数组实现队列问题-（二）"><a href="#数组实现队列问题-（二）" class="headerlink" title="数组实现队列问题 （二）"></a>数组实现队列问题 （二）</h3><p>另种数组实现队列的方式，记录两个索引：<code>front</code>记录最左元素索引，当<code>dequeue</code>出队时递增，和<code>back</code>记录最右元素索引，当<code>enqueue</code>入队时递增。</p><p>假设数组容量是8，当前如下：<code>[2,4,1,7,-,-,-,-]</code>，其<code>front</code>=0，<code>back</code>=3。</p><p>若执行<code>dequeue()</code>，则变为<code>[-,4,1,7,-,-,-,-]</code>，其中<code>front</code>=1，<code>back</code>=3。</p><p>若再执行<code>enqueue(5)</code>，则变为<code>[-,4,1,7,5,-,-,-]</code>，其中<code>front</code>=1，<code>back</code>=4。</p><h3 id="数组实现队列问题-（三）"><a href="#数组实现队列问题-（三）" class="headerlink" title="数组实现队列问题 （三）"></a>数组实现队列问题 （三）</h3><p>多次执行出入队之后，我们得到<code>[-,-,-,-,-,6,2,3]</code>，其<code>front</code>=5,<code>back</code>=7。尽管左端有许多空穴，但我们已经不能再执行入队操作了。</p><p>若我们允许<code>front</code>和<code>back</code>移动到M-1时绕回到索引0，这种高效循环数组又可以利用剩余的空间了。</p><p>例：</p><ol><li><code>enqueue</code> → [8 , -,-,-,-,6,2,3] <code>front</code>=5,<code>back</code>=0</li></ol><h3 id="数组实现队列问题-（四）"><a href="#数组实现队列问题-（四）" class="headerlink" title="数组实现队列问题 （四）"></a>数组实现队列问题 （四）</h3><p><code>Yet, this does not solve the main problem of array implementation: The items of the array are stored in contiguous manner in computer memory.</code></p><p>假设，经过若干操作我们得到<code>[8,10,11,12,13,6,2,3]</code>，<code>front</code>=5，<code>back</code>=4。此时无法再执行入队操作。</p><p>那么，我们会生成一个更大的数组（扩容），使M=2*8=16，但由于要拷贝旧数组到新数组，其时间复杂度是<code>O(N)</code>。<br><code>[6,2,3,8,10,11,12,13,-,-,-,-,-,-,-,-,]</code>，front = 0, and back = 7</p><h3 id="链表的实现"><a href="#链表的实现" class="headerlink" title="链表的实现"></a>链表的实现</h3><p>在队列中，我们只需要两个参数，一个用作插入（入队），一个用作移除（出队）</p><p><a href="/2020/02/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%A6%82%E8%A7%88">插入尾部之后和从头部移除</a>在顺序链表中非常快，是<code>O(1)</code>。我们使用链表中的<code>head/tail</code>来替换<code>front/back</code>，由于链表中的元素不需要连续存储它的大小可以随时增大缩小。</p><h3 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h3><p>队列能解决很多实际问题。</p><p>在<a href=""><code>宽度优先搜索</code></a>中有非常重要的应用。</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Golang </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_栈</title>
      <link href="/2020/02/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
      <url>/2020/02/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>Stack栈是一种数据结构，它要求只能从顶部增加元素即<code>push</code>，只能从顶部移除元素即<code>pop</code>。亦即<code>Last-In-First-out</code>(LIFO)。<br><img src="/images/ds/stack_illustration.png" alt="stack_illustration"></p><span id="more"></span><h3 id="The-Design-Choice-栈的设计宗旨"><a href="#The-Design-Choice-栈的设计宗旨" class="headerlink" title="The Design Choice 栈的设计宗旨"></a>The Design Choice 栈的设计宗旨</h3><p>在多数实现中，包括本教学中，栈是使用<code>受保护的</code>链表（连续的）来实现的，我们只能在顶部访问元素，<code>push</code>元素到顶部（头部插入），从头部<code>pop</code>元素出来（头部移除）。所有操作都是<code>O(1)</code>的。</p><div style="display:flex;flex-direction: row;"><div style="display:inline-block;width:98%;margin-right:1em;"><img src="/images/ds/Stack_insert_6.gif" alt="Stack_insert_6" /></div><div style="display:inline-block;width:98%;"><img src="/images/ds/Stack_remove_head.gif" alt="Stack_remove_head" /></div></div><p>讨论：能否使用变长数组来实现高效的栈结构？</p><h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3><p>教科书上，栈有一些典型的应用：</p><ol><li>Bracket Matching 括号匹配。</li><li>Postfix Calculator 后缀计算器？</li><li>A few other interesting applications that are not shown for pedagogical purposes.</li></ol><h3 id="Bracket-Matching-括号匹配问题"><a href="#Bracket-Matching-括号匹配问题" class="headerlink" title="Bracket Matching 括号匹配问题"></a>Bracket Matching 括号匹配问题</h3><p>数学表达式可以很复杂，例如：{[x+2]^(2+5)-2}*(y+5)。</p><p>括号匹配问题是检查表达式中的括号是不是成对的，<code>(</code>和<code>)</code>，<code>[</code>和<code>]</code>，<code>&#123;</code>和<code>&#125;</code>。</p><p><a href="https://gist.github.com/straysh/92546c0d2e8659b5579ff7b6fe4286ff">Golang实现</a>：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkBracketMatching</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    stack := NewStack()<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(input); i++ &#123;<br>        c := fmt.Sprintf(<span class="hljs-string">&quot;%c&quot;</span>, input[i])<br>        <span class="hljs-keyword">switch</span> c &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;&#123;&quot;</span>:<br>            stack.Push(c)<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;)&quot;</span>:<br>            <span class="hljs-keyword">if</span> stack.Pop() != <span class="hljs-string">&quot;(&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;]&quot;</span>:<br>            <span class="hljs-keyword">if</span> stack.Pop() != <span class="hljs-string">&quot;[&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;&#125;&quot;</span>:<br>            <span class="hljs-keyword">if</span> stack.Pop() != <span class="hljs-string">&quot;&#123;&quot;</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> stack.size == <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Calculating-Postfix-Expression-后缀表达式的计算"><a href="#Calculating-Postfix-Expression-后缀表达式的计算" class="headerlink" title="Calculating Postfix Expression 后缀表达式的计算"></a>Calculating Postfix Expression 后缀表达式的计算</h3><p>后缀表达式用数学语言描述格式如下：<code>data1 data2 op</code>，与之对应的是更易理解中缀表达式：<code>data1 op data2</code>。</p><p>例：表达式<code>2 3 + 4 *</code> = <code>(2+3) * 4</code>。</p><p>在后缀表达式中，我们不需要括号辅助。</p><p>Golang实现：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">postfixExpression</span><span class="hljs-params">()</span></span> &#123;<br>    input := <span class="hljs-string">&quot;2 3 + 4 *&quot;</span><br>    stack := NewStack()<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(input) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br>        c := fmt.Sprintf(<span class="hljs-string">&quot;%c&quot;</span>, input[i])<br>        <span class="hljs-keyword">if</span> c != <span class="hljs-string">&quot; &quot;</span> &#123;<br>            stack.Push(c)<br>        &#125;<br>    &#125;<br><br>    fmt.Println(stack)<br>    <span class="hljs-keyword">for</span> ; stack.size &gt; <span class="hljs-number">1</span>; &#123;<br>        data1 := stack.Pop()<br>        data2 := stack.Pop()<br>        d1, _ := strconv.Atoi(data1)<br>        d2, _ := strconv.Atoi(data2)<br>        op := stack.Pop()<br><br>        temp := <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> op == <span class="hljs-string">&quot;+&quot;</span> &#123;<br>            temp = d1 + d2<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> op == <span class="hljs-string">&quot;-&quot;</span> &#123;<br>            temp = d1 - d2<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> op == <span class="hljs-string">&quot;*&quot;</span> &#123;<br>            temp = d1 * d2<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> op == <span class="hljs-string">&quot;/&quot;</span> &#123;<br>            temp = d1 / d2<br>        &#125;<br>        stack.Push(strconv.Itoa(temp))<br>    &#125;<br><br>    fmt.Printf(<span class="hljs-string">&quot;result:%s&quot;</span>, stack.Pop())<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Golang </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_链表</title>
      <link href="/2020/02/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/02/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LL-Stack-Queue-DLL-Deque"><a href="#LL-Stack-Queue-DLL-Deque" class="headerlink" title="LL,Stack,Queue,DLL,Deque"></a>LL,Stack,Queue,DLL,Deque</h2><p>链表（Linked List）是一种数据结构，它由一组<code>节点</code>组成，它们作为一个整体表示一个序列。最简单的情形下，每一个节点由一个值<code>data</code>和指向下序列中一节点的引用<code>link</code>组成。</p><p>在链表中查找数77<br><img src="/images/ds/LL_Search_77.gif" alt="search_77"></p><p>链表及其变体是用来实现列表（List）、栈（Stack）、Queue（队列）、Deque ADTs<sup>1</sup>（双端队列）的底层数据结构。<br><code>Linked List and its variations are used as underlying data structure to implement List, Stack, Queue, and Deque ADTs</code></p><p>下面我们会讨论链表（只包含一个<code>next</code>指针）和它的两个变体：Stack和Queue，还会讨论Doubly Linked List（DLL）（双向链表）（包含<code>next</code>指针和<code>previous</code>指针），及其变体：Deque。</p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>链表这个数据结构通常会在大学本科阶段学习，有以下几个原因：</p><ol><li>它是一个简单的线性数据结构。</li><li>作为一个抽象数据类型的列表，它有一系列的应用，例如学生列表，事件列表，任职列表等等（尽管有其他更多高级数据结构能做到同样(甚至更好)）或者作为栈/队列/双端队列的抽象数据类型。</li><li>它有一些有趣的边界用例，指出了数据结构的良好实现的必要。</li><li>它包含多种自定义的选项，因此特别适合使用<code>OOP Programming</code>面向对象编程来实现。</li></ol><span id="more"></span><h3 id="List-ADT"><a href="#List-ADT" class="headerlink" title="List ADT"></a>List ADT</h3><p>List（列表）是一个有序数据序列 {a<sub>0</sub>, a<sub>1</sub>, …, a<sub>N-2</sub>, a<sub>N-1</sub>}<br>通常的List ADT（列表抽象数据类型）的操作有：<br>0. <code>get(i)</code> - 或许是个简单的操作，返回 a<sub>i</sub>（基于0的索引）。</p><ol><li><code>search(v)</code> - 判断值<code>v</code>在列表中存在(并返回其位置/索引) 或不存在（通常返回索引-1）</li><li><code>insert(i,v)</code> - 在列表的位置/索引<code>i</code>处插入值<code>v</code>，即将从位置[i+1 .. N-1]的元素均向右移动一个位置来生成一个空穴存放值<code>v</code>。</li><li><code>remove(i)</code> - 将列表中位置<code>i</code>的值移除。即将位置[i+1 .. N-1]的元素均向左移动一个位置来消除空穴。</li></ol><blockquote><p>讨论：若我们需要在列表中移除值<code>v</code>呢？</p></blockquote><h3 id="数组的实现-Part-1"><a href="#数组的实现-Part-1" class="headerlink" title="数组的实现 - Part 1"></a>数组的实现 - Part 1</h3><p>（紧凑的）Array（数组）是实现List ADT的一个良好候选方式，因为它是处理数据集合的简单结构。</p><p>当我们说紧凑数组，我们指的是没有空穴的数组，举例：假设数组中有N个元素（数组的容量是M， M ≥ N），那么只有位置[0,N-1]被占用，其他位置[N, M-1]都是空的。<br><img src="/images/ds/compactarray_illustration.png" alt="compacarray_illustration"></p><h3 id="数组的实现-Part-2"><a href="#数组的实现-Part-2" class="headerlink" title="数组的实现 - Part 2"></a>数组的实现 - Part 2</h3><p>紧凑数组命名为A，下标范围[0 .. N-1]填充了数据。</p><ol><li><code>get(i)</code>返回元素<code>A[i]</code>。当数组是非紧凑的，这个简单的操作也会无必要的复杂。(This simple operation will be unnecessarily complicated if the array is not compact.)</li><li><code>search(v)</code>我们逐项的遍历索引<code>i</code>（i∈[0 .. N-1]），检查A[i]==v。因为若值<code>v</code>存在，那么它的索引必将落在[0 .. N-1]中。</li><li><code>insert(i,v)</code>我们将元素∈[i .. N-1]集合，顺序移动到∈[i+1 .. N]（向右移动）并设置<code>A[i] = v</code>。既要将<code>v</code>插入正确的索引<code>i</code>，还要确保数组是紧凑的。</li><li><code>remove(i)</code>我们将元素∈[i+1 .. N-1]集合，顺序移动到∈[i .. N-2]（向左移动）将旧的<code>A[i]</code>覆盖掉。即能保持紧凑。</li></ol><h3 id="Time-Complexity-Summary-时间复杂性概要"><a href="#Time-Complexity-Summary-时间复杂性概要" class="headerlink" title="Time Complexity Summary 时间复杂性概要"></a>Time Complexity Summary 时间复杂性概要</h3><ol><li><code>get(i)</code>非常快： 只需要一次查询，是<code>O(1)</code>。</li><li><code>search(v)</code><ul><li>最好的情况，值<code>v</code>是第一个元素，即<code>O(1)</code>。</li><li>最坏的情况，值<code>v</code>不存在，我们需要<code>O(N)</code>复杂度的扫描才能确定这个实事。</li></ul></li><li><code>insert(i,v)</code><ul><li>最好的情况，<code>i == N</code>，不需要移动元素，即<code>O(1)</code>。</li><li>最坏的情况，<code>i == 0</code>，需要移动N个元素，即<code>O(N)</code>。</li></ul></li><li><code>remove(i)</code><ul><li>最好的情况，<code>i == N-1</code>，不需要移动元素，即<code>O(1)</code>。</li><li>最坏的情况，<code>i == 0</code>，需要移动N个元素，即<code>O(N)</code>。</li></ul></li></ol><h3 id="Fixed-Space-Issue-固定空间问题"><a href="#Fixed-Space-Issue-固定空间问题" class="headerlink" title="Fixed Space Issue 固定空间问题"></a>Fixed Space Issue 固定空间问题</h3><p>紧凑数组的容量M不是无限的，它是一个有限的数值。那么这就有一个问题，在许多的应用中无法提前预知<code>最大</code>的容量需要多大。</p><ul><li>若M过大，则未使用的空间浪费了。</li><li>若M过小，则没有足够的空间来存储（数组会越界）。</li></ul><h3 id="Variable-Space-变长空间"><a href="#Variable-Space-变长空间" class="headerlink" title="Variable Space 变长空间"></a>Variable Space 变长空间</h3><p>解决方案：让M动态可变。那么当数组满了，我们生成一个更大的新数组（通常是2倍的原容量）并将旧数据移动到新数组中。那么，容量将不再成为限制，或者说只受限于计算机的内存容量（通常都很大）。<br><code>However, the classic array-based issues of space wastage and copying/shifting items overhead are still problematic.</code><br>然而，经典数组问题诸如空间浪费，复制、移动元素仍然是课题。（？没译好）</p><h3 id="Observations-思考"><a href="#Observations-思考" class="headerlink" title="Observations 思考"></a>Observations 思考</h3><p>对于已知可能最大元素数量的固定大小M的集合，数组已经是基于<code>List ADT</code>实现的合理的最佳数据结构。</p><p>对于容量为M的动态集合，由于频繁的插入、删除操作，简单的数组是一个糟糕的数据结构。<br><code>where dynamic operations such as insert/remove are common, a simple array is actually a poor choice of data structure.</code></p><h2 id="Linked-List-链表"><a href="#Linked-List-链表" class="headerlink" title="Linked List 链表"></a>Linked List 链表</h2><p>现在我们介绍链表这个数据结构。它使用<code>指针</code>来允许元素在内存中非连续存储（这是与数组的本质区别）。元素的索引从<code>0</code>到<code>N-1</code>，使用元素i的指针来访问下一个元素i+1。<br><img src="/images/ds/ll_illustration.png" alt="ll_illustration"></p><h3 id="链表的C-实现"><a href="#链表的C-实现" class="headerlink" title="链表的C++实现"></a>链表的C++实现</h3><p>其基本形式，链表的一个单一节点包含如下结构：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Vertex</span> &#123; <span class="hljs-comment">// we can use either C struct or C++/Java class</span><br>  <span class="hljs-type">int</span> item; <span class="hljs-comment">// the data is stored here, an integer in this example</span><br>  Vertex* next; <span class="hljs-comment">// this pointer tells us where is the next vertex</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>Golang的实现</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> Node <span class="hljs-keyword">struct</span> &#123;<br>    Item <span class="hljs-type">int</span><br>    next *Node<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Linked-List-Additional-Data"><a href="#Linked-List-Additional-Data" class="headerlink" title="Linked List,Additional Data"></a>Linked List,Additional Data</h3><p>链表这个数据结构中，还有几个额外的数据。我们使用默认的链表<code>[22 (head)-&gt;2-&gt;77-&gt;6-&gt;43-&gt;76-&gt;89 (tail)]</code>来说明。</p><ol><li><code>头节点</code>指针指向a<sub>0</sub> - 它的值是22，没有谁指向头结点的。</li><li><code>尾节点</code>指针指向a<sub>N-1</sub> - 它是a<sub>6</sub> = 89，尾节点之后没有其他元素。</li></ol><p>就这些，我们仅仅增加了两个额外的变量。</p><h3 id="Variations-变化"><a href="#Variations-变化" class="headerlink" title="Variations 变化"></a>Variations 变化</h3><p>注意在大学课本中对如何实现链表有各种细微的区别。如是否使用尾节点，是否使用循环结构，是否使用dummy head元素。<a href="/fbc">discuss here</a></p><p>这里，我们实现的教学版本（有尾节点非循环结构，没有dummy head）可能与你所学的不是100%相同，但其核心思想是一样的。</p><p>在本教学中，每一个节点包含整型值item，但很容易更换为其他类型。</p><h3 id="Get-i-Much-Slower-than-Array-比数组慢很多"><a href="#Get-i-Much-Slower-than-Array-比数组慢很多" class="headerlink" title="Get(i) - Much Slower than Array 比数组慢很多"></a>Get(i) - Much Slower than Array 比数组慢很多</h3><p>由于我们保存了头尾节点的指针，除了头（索引0）尾（索引N-1）节点，其他节点需要列表顺序遍历来查找。</p><p>我们看一个简单的C++实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Vertex* <span class="hljs-title">Get</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123; <span class="hljs-comment">// returns the vertex</span><br>  Vertex* ptr = head; <span class="hljs-comment">// we have to start from head</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; i; k++) <span class="hljs-comment">// advance forward i time(s)</span><br>    ptr = ptr-&gt;next; <span class="hljs-comment">// the pointers are pointing to the higher index</span><br>  <span class="hljs-keyword">return</span> ptr;<br>&#125;<br></code></pre></td></tr></table></figure><p>当i≤N-2时，其时间复杂度是<code>O(N)</code>。<a href="/2020/02/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/#Time-Complexity-Summary-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E6%80%A7%E6%A6%82%E8%A6%81">与数组的<code>O(1)</code>做一个比较。</a></p><p>Golang实现</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ll *LL)</span></span> Get(i <span class="hljs-type">int</span>) *Node &#123;<br>    node := ll.head<br>    <span class="hljs-keyword">for</span> k:=<span class="hljs-number">0</span>;k&lt;i;k++ &#123;<br>        node = node.next<br>    &#125;<br>    <span class="hljs-keyword">return</span> node<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Search-v-Not-Better-than-Array-不比数组优"><a href="#Search-v-Not-Better-than-Array-不比数组优" class="headerlink" title="Search(v) - Not Better than Array 不比数组优"></a>Search(v) - Not Better than Array 不比数组优</h3><p>由于我们只有头尾节点的引用，另指针总是指向右侧（高位），我们只能从头结点开始，通过<code>next</code>指针顺序遍历。</p><p>例：<code> [22 (head)-&gt;2-&gt;77-&gt;6-&gt;43-&gt;76-&gt;89 (tail)</code></p><p>在索引2处找到元素77<br><img src="/images/ds/LL_Search_77.gif" alt="search_77"></p><p>在列表中未找到，然而这只有在遍历完N个节点后才能确定，因此它是最坏的时间复杂度<code>O(N)</code>。<br><img src="/images/ds/LL_Search_7.gif" alt="search_7"></p><h3 id="Insertion-Four-Cases-插入的四种情况"><a href="#Insertion-Four-Cases-插入的四种情况" class="headerlink" title="Insertion - Four Cases 插入的四种情况"></a>Insertion - Four Cases 插入的四种情况</h3><p>链表的插入比数组有更多的边界条件。</p><p>大多数同学只有在它们写的链表代码失败时才能意识到所有的边界条件。</p><p>在这里，我们直接给出所有的边界。</p><p>对于插入<code>insert(i,v)</code>，有四种边界情况：</p><ol><li>插入链表头，i == 0。</li><li>空链表（和上面的1相同）。</li><li>插入尾节点之后。i == N。</li><li>其他位置 i∈[1 .. N-1]。</li></ol><h3 id="Insert-i-v-头部插入-i-0"><a href="#Insert-i-v-头部插入-i-0" class="headerlink" title="Insert(i,v) - 头部插入(i==0)"></a>Insert(i,v) - 头部插入(i==0)</h3><p>头部插入简单高效，<code>O(1)</code><br>C++实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">Vertex* vtx = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Vertex</span>(); <span class="hljs-comment">// create new vertex vtx from item v</span><br>vtx-&gt;item = v;<br>vtx-&gt;next = head; <span class="hljs-comment">// link this new vertex to the (old) head vertex</span><br>head = vtx; <span class="hljs-comment">// the new vertex becomes the new head</span><br></code></pre></td></tr></table></figure><p><code>insert(0, 50)</code>的动画：<br><img src="/images/ds/LL_Insert_0_50.gif" alt="LL_Insert_0_50"></p><p>Golang实现：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Golang">node := &amp;Node&#123;&#125;<br>node.Item = v<br>node.next = ll.head<br>ll.head = node<br></code></pre></td></tr></table></figure><p>讨论：在数组的头部插入会发生啥？</p><h3 id="Insert-i-v-插入一个空列表"><a href="#Insert-i-v-插入一个空列表" class="headerlink" title="Insert(i,v) - 插入一个空列表"></a>Insert(i,v) - 插入一个空列表</h3><p>空结构是一个常见的边界条件，若无何时的测试它常常导致不可预期的崩溃。向空结构中插入新元素是合法的。幸运的是，实现的伪代码和向i==0插入是一样的，因此直接使用上面的代码即可。</p><h3 id="Insert-i-v-i∈-1-N-1"><a href="#Insert-i-v-i∈-1-N-1" class="headerlink" title="Insert(i,v) - i∈[1 .. N-1]"></a>Insert(i,v) - i∈[1 .. N-1]</h3><p>结合<code>Get(i)</code>的代码，我们可以实现向列表中间插入元素：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">Vertex* pre = <span class="hljs-built_in">Get</span>(i<span class="hljs-number">-1</span>); <span class="hljs-comment">// traverse to (i-1)-th vertex, O(N)</span><br>aft = pre-&gt;next; <span class="hljs-comment">// aft cannot be null, think about it</span><br>Vertex* vtx = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Vertex</span>(); <span class="hljs-comment">// create new vertex</span><br>vtx-&gt;item = v;<br>vtx-&gt;next = aft; <span class="hljs-comment">// link this</span><br>pre-&gt;next = vtx; <span class="hljs-comment">// and this</span><br></code></pre></td></tr></table></figure><p>Golang实现：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs golang">pre  := ll.Get(i<span class="hljs-number">-1</span>)<br>aft  := pre.next<br>node := &amp;Node&#123;&#125;<br>node.Item = v<br>node.next = aft<br>pre.next  = node<br></code></pre></td></tr></table></figure><p>常规插入：<br><img src="/images/ds/LL_Insert_3_44.gif" alt="LL_Insert_3_44"></p><p>边界条件，向尾节点插入<br><img src="/images/ds/LL_Insert_6_55.gif" alt="LL_Insert_6_55"></p><p>因需要遍历列表，该操作的时间复杂度是<code>O(N)</code>。</p><h3 id="Insert-i-v-Beyond-the-Tail-i-N-插入尾节点之后"><a href="#Insert-i-v-Beyond-the-Tail-i-N-插入尾节点之后" class="headerlink" title="Insert(i,v) - Beyond the Tail,i == N 插入尾节点之后"></a>Insert(i,v) - Beyond the Tail,i == N 插入尾节点之后</h3><p>由于尾节点的存在，插入尾节点之后也是<code>O(1)</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">Vertex* vtx = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Vertex</span>(); <span class="hljs-comment">// this is also a C++ code</span><br>vtx-&gt;item = v; <span class="hljs-comment">// create new vertex vtx from item v</span><br>tail-&gt;next = vtx; <span class="hljs-comment">// just link this, as tail is the i = (N-1)-th item</span><br>tail = vtx; <span class="hljs-comment">// now update the tail pointer</span><br></code></pre></td></tr></table></figure><p>Golang实现:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang">node := &amp;Node&#123;&#125;<br>node.Item = v<br>tail.next = node<br>tail = node<br></code></pre></td></tr></table></figure><p>讨论：在数组的尾部之后插入会发生啥？</p><h3 id="Removal-Three-Cases-移除的三种条件"><a href="#Removal-Three-Cases-移除的三种条件" class="headerlink" title="Removal - Three Cases 移除的三种条件"></a>Removal - Three Cases 移除的三种条件</h3><p>移除操作<code>remove(i)</code>，根据<code>i</code>的值有三种可能性：</p><ol><li>i == 0，移除头元素，只影响<code>head</code>指针。</li><li>i == N-1，移除尾元素，只影响<code>tail</code>指针。</li><li>i ∈ [1 .. N-2]，其他位置。</li></ol><p>讨论：对比上面的插入场景。从空结构中移除操作是否合法？</p><h3 id="Remove-i-At-Head-i-0-移除头元素"><a href="#Remove-i-At-Head-i-0-移除头元素" class="headerlink" title="Remove(i) - At Head(i == 0) 移除头元素"></a>Remove(i) - At Head(i == 0) 移除头元素</h3><p>非常简单，直接上代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// avoid crashing when SLL is empty</span><br>Vertex* temp = head; <span class="hljs-comment">// so we can delete it later</span><br>head = head-&gt;next; <span class="hljs-comment">// book keeping, update the head pointer</span><br><span class="hljs-keyword">delete</span> temp; <span class="hljs-comment">// which is the old head</span><br></code></pre></td></tr></table></figure><p>Golang实现：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">if</span> ll.head == <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br>head := ll.head.next<br>ll.head = head<br><br><span class="hljs-keyword">return</span> head<br></code></pre></td></tr></table></figure><p>讨论：对于数组，移除头元素会发生啥？</p><h3 id="Remove-i-i-∈-1-N-2"><a href="#Remove-i-i-∈-1-N-2" class="headerlink" title="Remove(i) - i ∈ [1 .. N-2]"></a>Remove(i) - i ∈ [1 .. N-2]</h3><p>借用<code>Get(i)</code>的代码，很容易实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">Vertex* pre = <span class="hljs-built_in">Get</span>(i<span class="hljs-number">-1</span>); <span class="hljs-comment">// traverse to (i-1)-th vertex, O(N)</span><br>Vertex* del = pre-&gt;next, aft = del-&gt;next;<br>pre-&gt;next = aft; <span class="hljs-comment">// bypass del</span><br><span class="hljs-keyword">delete</span> del;<br></code></pre></td></tr></table></figure><p>Golang实现：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang">prev := ll.Get(i<span class="hljs-number">-1</span>)<br>elem := prev.next<br>prev.next = elem.next<br><br><span class="hljs-keyword">return</span> elem<br></code></pre></td></tr></table></figure><p>由于需要遍历列表，其时间复杂度<code>O(N)</code>。</p><h3 id="Remove-i-At-Tail-i-N-1-Part-1-移除尾元素-1"><a href="#Remove-i-At-Tail-i-N-1-Part-1-移除尾元素-1" class="headerlink" title="Remove(i) - At Tail(i == N-1) - Part 1 移除尾元素(1)"></a>Remove(i) - At Tail(i == N-1) - Part 1 移除尾元素(1)</h3><p>假设列表非空，我们可以如下实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">Vertex* pre = head;<br>temp = head-&gt;next;<br><span class="hljs-keyword">while</span> (temp-&gt;next != null) <span class="hljs-comment">// while my neighbor is not the tail</span><br>  pre = pre-&gt;next, temp = temp-&gt;next;<br>pre-&gt;next = null; <span class="hljs-comment">// alternatively: pre = Get(N-2), temp = Get(N-1)</span><br><span class="hljs-keyword">delete</span> temp; <span class="hljs-comment">// temp = (old) tail</span><br>tail = pre; <span class="hljs-comment">// update tail pointer</span><br></code></pre></td></tr></table></figure><p>Golang实现：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golang">pre := ll.head<br>temp := pre.next<br><br><span class="hljs-keyword">for</span> ;temp.next != <span class="hljs-literal">nil</span>; &#123;<br>  pre = temp<br>  temp = temp.next<br>&#125;<br><br>ll.head = pre<br>pre.next = <span class="hljs-literal">nil</span><br><br><span class="hljs-keyword">return</span> temp<br></code></pre></td></tr></table></figure><p>循环调用上述步骤，我们将从尾部逐项移除元素，直到只剩下一个元素（head == tail），此时我们再执行移除头元素的方法。注：从空结构中移除是非法的，所以当链表欧为空时，停止。</p><h3 id="Remove-i-At-Tail-i-N-1-Part-2-移除尾元素-2"><a href="#Remove-i-At-Tail-i-N-1-Part-2-移除尾元素-2" class="headerlink" title="Remove(i) - At Tail(i == N-1) - Part 2 移除尾元素(2)"></a>Remove(i) - At Tail(i == N-1) - Part 2 移除尾元素(2)</h3><p>实际上，若我们维护了一个变量N来记录链表的大小，我们可以通过顺序遍历<code>Get(i)</code>来实现移除尾元素：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">Vertex* pre = <span class="hljs-built_in">Get</span>(N<span class="hljs-number">-2</span>); <span class="hljs-comment">// go to one index just before tail, O(N)</span><br>pre-&gt;next = null;<br><span class="hljs-keyword">delete</span> tail;<br>tail = pre; <span class="hljs-comment">// we have access to old tail</span><br></code></pre></td></tr></table></figure><p>Golang实现：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs golang">prev := ll.Get(N<span class="hljs-number">-2</span>)<br>temp := prev.next<br><br>ll.tail = prev<br>prev.next = <span class="hljs-literal">nil</span><br><br><span class="hljs-keyword">return</span> temp<br></code></pre></td></tr></table></figure><p>注意这个操作的时间复杂度是<code>O(N)</code>，为了插入到尾元素之后能正常进行，需要将<code>tail</code>指针从N-1移动到N-2。这种不高效的做法在后面Doubly Linked List（双向链表）中解决。</p><p>讨论：对数组移除尾元素会发生啥？</p><h3 id="时间复杂度概览"><a href="#时间复杂度概览" class="headerlink" title="时间复杂度概览"></a>时间复杂度概览</h3><ol><li><code>get(i)</code>很慢，是<code>O(N)</code>。在链表中，我们需要从头元素开始顺序遍历</li><li><code>search(v)</code><ul><li>最好情况下，命中头元素，<code>O(1)</code>。</li><li>最坏情况下，未找到，需要顺利遍历整个列表，是<code>O(N)</code>。</li></ul></li><li><code>insert(i,v)</code><ul><li>最好情况下，插入头部，<code>O(1)</code>。或插入尾元素之后（有tail指针）也是<code>O(1)</code>。</li><li>最坏情况下，插入N-2位置，我们需要顺序遍历找到元素N-2（tail的前一个元素），是<code>O(N)</code>。</li></ul></li><li><code>remove(i)</code><ul><li>最好情况下，移除头元素，<code>O(1)</code>。</li><li>最坏情况下，移除尾元素，为了更新<code>tail</code>指针需要顺序遍历整个链表，是<code>O(N)</code>。</li></ul></li></ol><h3 id="链表的应用场景"><a href="#链表的应用场景" class="headerlink" title="链表的应用场景"></a>链表的应用场景</h3><p>单纯的线性表（顺序表）很少有应用场景，因为紧凑数组（可变长的）能做得更好。</p><p>但，链表的一个基础特性是允许元素（在内存中）非连续存储。因此是<code>Stack</code>栈和<code>Queue</code>队列的完美基础。</p><hr><p>名词解释：</p><ol><li><a href="https://en.wikipedia.org/wiki/Abstract_data_type">ADT</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Golang </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>log15_Readme[译]</title>
      <link href="/2020/02/10/log15-Readme-%E8%AF%91/"/>
      <url>/2020/02/10/log15-Readme-%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p><code>log15</code>包提供了一种固执且简洁的最佳实践工具包(both human and machine readable)。它是仿造标准库<code>io</code>和<code>net/http</code>构建的。</p><p>这个包强制仅记录<code>key/value</code>对。键必须是字符串。值可以是任何类型。默认的输出格式是<code>logfmt</code>，也可以选择使用<code>JSON</code>格式。例如:<br><code>log.Info(&quot;page accessed&quot;， &quot;path&quot;， r.URL。Path， &quot;user_id&quot;， user.id)</code><br>输出一行记录如下:<br><code>lvl=info t=2014-05-02T16:07:23-0700 msg=&quot;page accessed&quot; path=/org/71/profile user_id=9</code></p><span id="more"></span><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>首先需要引入库文件：<br><code>import log &quot;github.com/inconshreveable/log15&quot;</code><br>然后可以开始使用了：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    log.Info(<span class="hljs-string">&quot;Program starting&quot;</span>, <span class="hljs-string">&quot;args&quot;</span>, os.Args)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="惯例"><a href="#惯例" class="headerlink" title="惯例"></a>惯例</h3><p>记录对人有意义的信息是常见且良好的实践，传递给日志函数的第一个参数<em>隐式</em>的对应键<code>msg</code>。</p><p>另外，消息的<code>level</code>值会自动使用键<code>lvl</code>，而当前时间戳会使用键<code>t</code>。</p><p>可以使用任何额外的键值对作为上下文提供给日志函数。<code>log15</code> allows you to favor terseness， ordering， and speed over safety。这种折中对日志函数是合理的。不需要显示的指明键值对，<code>log15</code>理解它们在变长参数列表中的含义:<br><code>log.Warn(&quot;size out of bounds&quot;， &quot;low&quot;， lowBound， &quot;high&quot;， highBound， &quot;val&quot;， val)</code><br>若你非常关注类型的安全性，你可以传入一个<code>log.Ctx</code>:<br><code>log.Warn(&quot;size out of bounds&quot;， log.Ctx&#123;&quot;low&quot;: lowBound， &quot;high&quot;: highBound， &quot;val&quot;: val&#125;)</code></p><h3 id="上下文logger"><a href="#上下文logger" class="headerlink" title="上下文logger"></a>上下文<code>logger</code></h3><p>常常需要添加一个上下文到日志中以便跟踪其操作。例如网络请求。能够很容易的创建一个携带上下文的日志，输出的每行日志都将自动包含该上下文信息：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang">requestlogger := log.New(<span class="hljs-string">&quot;path&quot;</span>, r.URL.Path)<br><br><span class="hljs-comment">// later</span><br>requestlogger.Debug(<span class="hljs-string">&quot;db txn commit&quot;</span>, <span class="hljs-string">&quot;duration&quot;</span>, txnTimer.Finish())<br></code></pre></td></tr></table></figure><p>该日志输出如下：<br><code>lvl=dbug t=2014-05-02T16:07:23-0700 path=/repo/12/add_hook msg=&quot;db txn commit&quot; duration=0.12</code></p><h3 id="Handlers"><a href="#Handlers" class="headerlink" title="Handlers"></a><code>Handlers</code></h3><p><code>Handler</code>接口定义的日志输出到哪，以及如何格式化。<code>Handler</code>接口受<code>net/http</code>句柄接口启发：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> Handler <span class="hljs-keyword">interface</span> &#123;<br>    Log(r *Record) <span class="hljs-type">error</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Handlers</code>会过滤并格式化日志记录行，或转发到其他<code>Handlers</code>。该包<code>ethereum/go-ethereum/log</code>实现了几个常用的日志模式，用以创建可扩展、自定义的日志结构。</p><p>以下例子展示了打印<code>logfmt</code>格式到标准输出的句柄:<br><code>handler := log.StreamHandler(os.Stdout, log.LogfmtFormat())</code></p><p>这是一个指向其他两个句柄的句柄。一个句柄仅仅将rpc包的记录以<code>logfmt</code>格式打印到标准输出上。另一个以<code>JSON</code>格式打印<code>Error</code>级别（及以上）记录到文件<code>/var/log/service.json</code>：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang">handler := log.MultiHandler(<br>    log.LvlFilterHandler(log.LvlError, log.Must.FileHandler(<span class="hljs-string">&quot;/var/log/service.json&quot;</span>, log.JSONFormat())),<br>    log.MatchFilterHandler(<span class="hljs-string">&quot;pkg&quot;</span>, <span class="hljs-string">&quot;app/rpc&quot;</span> log.StdoutHandler())<br>)<br></code></pre></td></tr></table></figure><h3 id="记录文件名和行号"><a href="#记录文件名和行号" class="headerlink" title="记录文件名和行号"></a>记录文件名和行号</h3><p>该包（<code>ethereum/go-ethereum/log</code>）实现了三种句柄，用以记录<code>debugging</code>信息到上下文。<code>CallerFileHandler</code>，<code>CallerFuncHandler</code>，<code>CallerStackHandler</code>。下例记录了文件和行号：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang">h := log.CallerFileHandler(log.StdoutHandler)<br>log.Root().SetHandler(h)<br>...<br>log.Error(<span class="hljs-string">&quot;open file&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br></code></pre></td></tr></table></figure><p>输出如下：<br><code>lvl=eror t=2014-05-02T16:07:23-0700 msg=&quot;open file&quot; err=&quot;file not found&quot; caller=data.go:42</code></p><p>下例记录了调用栈信息：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang">h := log.CallerStackHandler(<span class="hljs-string">&quot;%+v&quot;</span>, log.StdoutHandler)<br>log.Root().SetHandler(h)<br>...<br>log.Error(<span class="hljs-string">&quot;open file&quot;</span>, <span class="hljs-string">&quot;err&quot;</span>, err)<br></code></pre></td></tr></table></figure><p>输出如下：<br><code>lvl=eror t=2014-05-02T16:07:23-0700 msg=&quot;open file&quot; err=&quot;file not found&quot; stack=&quot;[pkg/data.go:42 pkg/cmd/main.go]&quot;</code><br><code>%+v</code>参数指示句柄记录源文件相对编译时GOPATH的路径。详细参考<code>github.com/go-stack/stack</code>包的实现。</p><h3 id="自定义Handlers"><a href="#自定义Handlers" class="headerlink" title="自定义Handlers"></a>自定义<code>Handlers</code></h3><p><code>Hnalder</code>句柄如此的简单，通常不需要自定义句柄。接下里，我们创建一个写入句柄A的句柄，但它写入失败时，会携带写入失败的错误信息重新写入另一个句柄B。在依靠网络socket记录日志，但失败时希望将之写入磁盘时这很有用。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> BackupHandler <span class="hljs-keyword">struct</span> &#123;<br>    Primary Handler<br>    Secondary Handler<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *BackupHandler)</span></span> Log (r *Record) <span class="hljs-type">error</span> &#123;<br>    err := h.Primary.Log(r)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        r.Ctx = <span class="hljs-built_in">append</span>(ctx, <span class="hljs-string">&quot;primary_err&quot;</span>, err)<br>        <span class="hljs-keyword">return</span> h.Secondary.Log(r)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>该模式非常有用，因此该包实现了一个经典的版本<code>FailoverHandler</code>。</p><h3 id="记录重开销的操作"><a href="#记录重开销的操作" class="headerlink" title="记录重开销的操作"></a>记录重开销的操作</h3><p>有时，需要记录一些需要非常重的计算才能得到的值，但当你的日志级别不够时，你不希望做这个计算。</p><p>该包提供了一个简单的模式来标记一个希望惰性计算的操作，仅在当它即将被写入时计算，因此在其他上级句柄中不会触发计算。你需要使用<code>log.Lazy</code>包装一个无参的函数。例如：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">factorRSAKey</span><span class="hljs-params">()</span></span> (factors []<span class="hljs-type">int</span>) &#123;<br>    <span class="hljs-comment">// return the factors of a very large number</span><br>&#125;<br><br>log.Debug(<span class="hljs-string">&quot;factors&quot;</span>, log.Lazy&#123;factorRSAKey&#125;)<br></code></pre></td></tr></table></figure><p>若该信息未被打印（如错误的日志级别），factorRSAKey不会被计算。</p><h3 id="动态的context值"><a href="#动态的context值" class="headerlink" title="动态的context值"></a>动态的<code>context</code>值</h3><p><code>log.Lazy</code>模式也可用于上下文参数中，假设一个游戏中含有<code>Player</code>对象：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> Player <span class="hljs-keyword">struct</span> &#123;<br>  name <span class="hljs-type">string</span><br>  alive <span class="hljs-type">bool</span><br>  log.Logger<br>&#125;<br></code></pre></td></tr></table></figure><p>你总希望打印出玩家的名字自己它是否活着，因此你会这样创建player对象：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs golang">p := &amp;Player&#123;name: <span class="hljs-string">&quot;straysh&quot;</span>, alive: <span class="hljs-literal">true</span>&#125;<br>p.Logger = log.New(<span class="hljs-string">&quot;name&quot;</span>, p.name, <span class="hljs-string">&quot;alive&quot;</span>, p.alive)<br></code></pre></td></tr></table></figure><p>此时，即时玩家已经死了，日志句柄仍然会打印活着，因为日志上下文是在创建时被初始化的。使用<code>log.Lazy</code>包装，我们可以<code>defer</code>计算玩家是否活着的函数，因此日志行会反射出玩家当前的状态而无论何时调用日志函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">p := &amp;Player&#123;name: &quot;straysh&quot;, alive: true&#125;<br>isAlive := func bool &#123;return p.alive&#125;<br>player.Logger = log.New(&quot;name&quot;, p.name, &quot;alive&quot;: log.Lazy(isAlive))<br></code></pre></td></tr></table></figure><h3 id="终端格式"><a href="#终端格式" class="headerlink" title="终端格式"></a>终端格式</h3><p>若<code>log15</code>检测到输出是终端，会配置默认句柄（即log.StdoutHanlder）并使用<code>TerminalFormat</code>格式。该格式更好的适配了终端输出，包括不同级别的颜色。</p><h3 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h3><p>因为<code>log15</code>允许你绕过类型系统，有几种方法可以使你指定无效参数到日志函数中。例如，给无参函数<code>log.Lazy</code>传一个参数，或给键传一个非字符串的值。由于日志库是一个典型的报告错误的技术，日志函数返回错误将会非常麻烦。相反，<code>log15</code>在处理错误时保证：</p><ul><li>任何包含<code>error</code>的日志行，在打印正常日志信息时，也会打印出错误信息</li><li>任何包含<code>error</code>的日志行，会包含一个键<code>LOG15_ERROR</code>，可以方便的检测是否传递了一个无效的值。</li></ul><p>理解了这一点，你可能会有这样的疑惑：为什么<code>Handler</code>接口在它的<code>Log</code>函数里会返回一个<code>error</code>。<code>Handlers</code>只有在尝试写入外部源失败时，被鼓励返回<code>errors</code>，如<code>syslog</code>无响应。这样能允许诸如<code>FailoverHandler</code>在这些失败后能协作。</p><h3 id="作为library使用"><a href="#作为library使用" class="headerlink" title="作为library使用"></a>作为<code>library</code>使用</h3><p><code>log15</code>更适合被包装成自己的日志库。其最佳实践是默认关闭所有的输出方式，而使用一个公用用的<code>Logger</code>实例，并提供配置方法。如：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> yourlib<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/inconshreveable/log15&quot;</span><br><br><span class="hljs-keyword">var</span> Log = log.New()<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>  Log.SetHanlder(log.DiscardHandler())<br>&#125;<br></code></pre></td></tr></table></figure><p>库的使用者，可能这样使用它：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/inconshreveable/log15&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;example.com/yourlib&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  handler := <span class="hljs-comment">// custom handler setup</span><br>  yourlib.Log.Sethandler(handler)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="绑定上下文的最佳实践"><a href="#绑定上下文的最佳实践" class="headerlink" title="绑定上下文的最佳实践"></a>绑定上下文的最佳实践</h3><p>假设我在开发一个浏览器：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> Tab <span class="hljs-keyword">struct</span> &#123;<br>    url <span class="hljs-type">string</span><br>    render *RenderingContext<br>    <span class="hljs-comment">// ...</span><br><br>    Logger<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewTab</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> *Tab &#123;<br>    <span class="hljs-keyword">return</span> &amp;Tab &#123;<br>        <span class="hljs-comment">// ...</span><br>        url: url,<br><br>        Logger: log.New(<span class="hljs-string">&quot;url&quot;</span>, url),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当常见一个tab页时，我将url作为上下文绑定到logger上，这样可以很容易在日志中跟踪它。此时，不管我对该tab进行何操作，都会使用合成的logger自动记录tab标题：<br><code>tab.Debug(&quot;moved position&quot;, &quot;idx&quot;, tab.idx)</code></p><p>这有一个问题，若tab的url值改变了？我们可以使用<code>log.Lazy</code>确保总是记录了当前的url，但如此就无法记录该tab完整的生命周期。</p><p>我们可以使用一个随机的十六进制数来，这叫做<code>surrogate keys</code>:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">import</span> logext <span class="hljs-string">&quot;github.com/inconshreveable/log15/ext&quot;</span><br><br>t := &amp;Tab &#123;<br>    <span class="hljs-comment">// ...</span><br>    url: url,<br>&#125;<br><br>t.Logger = log.New(<span class="hljs-string">&quot;id&quot;</span>, logext.RandId(<span class="hljs-number">8</span>), <span class="hljs-string">&quot;url&quot;</span>, log.Lazy&#123;t.getUrl&#125;)<br><span class="hljs-keyword">return</span> t<br></code></pre></td></tr></table></figure><p>这样，我们就有了对应该tab的唯一的标识，同时我们记录下了日志函数调用时的url值。</p><h3 id="Must"><a href="#Must" class="headerlink" title="Must"></a><code>Must</code></h3><p>有一组<code>Must</code>句柄，它们在发生错误时并不返回错误信息而是直接<code>panic</code>。例如：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs golang">log.Must.FileHandler(<span class="hljs-string">&quot;/path&quot;</span>, log.JSONFormat)<br>log.Must.NetHandler(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:1234&quot;</span>, log.JSONFormat)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gorm FAQs</title>
      <link href="/2019/12/04/2019-gorm-FAQs/"/>
      <url>/2019/12/04/2019-gorm-FAQs/</url>
      
        <content type="html"><![CDATA[<h1 id="BeforeUpdate执行成功-但updated-at仍是时间字符串-写入数据库错误"><a href="#BeforeUpdate执行成功-但updated-at仍是时间字符串-写入数据库错误" class="headerlink" title="BeforeUpdate执行成功,但updated_at仍是时间字符串,写入数据库错误"></a>BeforeUpdate执行成功,但updated_at仍是时间字符串,写入数据库错误</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">(/app/Golang/blog/models/tag.go:75) <br>[2019-12-04 23:27:41]  Error 1265: Data truncated for column &#x27;updated_at&#x27; at row 1 <br><br>(/app/Golang/blog/models/tag.go:75) <br>[2019-12-04 23:27:41]  [0.39ms]  UPDATE `blog_tag` SET `name` = &#x27;杂谈&#x27;, `updated_at` = &#x27;2019-12-04 23:27:41&#x27;  WHERE (id=2)<br></code></pre></td></tr></table></figure><p>问题的根源在<code>GoPath/pkg/mod/github.com/jinzhu/gorm@v1.9.11/callback_update.go</code>的<code>ini</code>函数中:<br><code>gorm:update_time_stamp</code> 在 <code>gorm:before_update</code> 后执行了.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang">DefaultCallback.Update().Register(<span class="hljs-string">&quot;gorm:assign_updating_attributes&quot;</span>, assignUpdatingAttributesCallback)<br>DefaultCallback.Update().Register(<span class="hljs-string">&quot;gorm:begin_transaction&quot;</span>, beginTransactionCallback)<br>DefaultCallback.Update().Register(<span class="hljs-string">&quot;gorm:before_update&quot;</span>, beforeUpdateCallback)<br>DefaultCallback.Update().Register(<span class="hljs-string">&quot;gorm:save_before_associations&quot;</span>, saveBeforeAssociationsCallback)<br>DefaultCallback.Update().Register(<span class="hljs-string">&quot;gorm:update_time_stamp&quot;</span>, updateTimeStampForUpdateCallback)<br>DefaultCallback.Update().Register(<span class="hljs-string">&quot;gorm:update&quot;</span>, updateCallback)<br>DefaultCallback.Update().Register(<span class="hljs-string">&quot;gorm:save_after_associations&quot;</span>, saveAfterAssociationsCallback)<br>DefaultCallback.Update().Register(<span class="hljs-string">&quot;gorm:after_update&quot;</span>, afterUpdateCallback)<br>DefaultCallback.Update().Register(<span class="hljs-string">&quot;gorm:commit_or_rollback_transaction&quot;</span>, commitOrRollbackTransactionCallback)<br></code></pre></td></tr></table></figure><p>BeforeUpdate执行成功并设置updated_at为整形时间戳后, updateTimeStampForUpdateCallback执行又将updated_at设置成了时间字符串</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// updateTimeStampForUpdateCallback will set `UpdatedAt` when updating</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">updateTimeStampForUpdateCallback</span><span class="hljs-params">(scope *Scope)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> _, ok := scope.Get(<span class="hljs-string">&quot;gorm:update_column&quot;</span>); !ok &#123;<br>        scope.SetColumn(<span class="hljs-string">&quot;UpdatedAt&quot;</span>, scope.db.nowFunc())<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而created_at因为先判断了非空<code>if createdAtField.IsBlank</code>而没有这个bug:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// updateTimeStampForCreateCallback will set `CreatedAt`, `UpdatedAt` when creating</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">updateTimeStampForCreateCallback</span><span class="hljs-params">(scope *Scope)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> !scope.HasError() &#123;<br>        now := scope.db.nowFunc()<br><br>        <span class="hljs-keyword">if</span> createdAtField, ok := scope.FieldByName(<span class="hljs-string">&quot;CreatedAt&quot;</span>); ok &#123;<br>            <span class="hljs-keyword">if</span> createdAtField.IsBlank &#123;<br>                createdAtField.Set(now)<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> updatedAtField, ok := scope.FieldByName(<span class="hljs-string">&quot;UpdatedAt&quot;</span>); ok &#123;<br>            <span class="hljs-keyword">if</span> updatedAtField.IsBlank &#123;<br>                updatedAtField.Set(now)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>重新注册<code>gorm:update_time_stamp</code>事件,重写<code>updateTimeStampForUpdateCallback</code>方法:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs golang">...<br>db.Callback().Update().Replace(<span class="hljs-string">&quot;gorm:update_time_stamp&quot;</span>, updateTimeStampForUpdateCallback);<br>...<br><br><br><span class="hljs-comment">// updateTimeStampForUpdateCallback will set `UpdatedAt` when updating</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">updateTimeStampForUpdateCallback</span><span class="hljs-params">(scope *gorm.Scope)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> _, ok := scope.Get(<span class="hljs-string">&quot;gorm:update_column&quot;</span>); !ok &#123;<br>        _ = scope.SetColumn(<span class="hljs-string">&quot;UpdatedAt&quot;</span>, time.Now().Unix())<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/04/2019-hello-world/"/>
      <url>/2019/12/04/2019-hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php_framework_of_filter_01</title>
      <link href="/2019/04/20/2019-php-framework-of-filter-01/"/>
      <url>/2019/04/20/2019-php-framework-of-filter-01/</url>
      
        <content type="html"><![CDATA[<p>思考$_GET/$_POST/$_SERVER与INPUT_GET/INPUT_POST/INPUT_SERVER的区别</p><p>php中获取输入参数通常使用$_GET/$_POST/$_SERVER等, 它们是超全局变量, 在任意代码中可以直接访问.详细参考<a href="https://www.php.net/manual/en/reserved.variables.post.php">php.net</a></p><blockquote><p>#Note:</p><p>This is a ‘superglobal’, or automatic global, variable. This simply means that it is available in all scopes throughout a script. There is no need to do global $variable; to access it within functions or methods.</p></blockquote><p>从php5.2起支持filter系列过滤器函数, 配合INPUT_GET/INPUT_POST/INPUT_SERVER等很方便的做参数接收和过滤/校验.</p><p>简而言之,$_XXX系列可以任意使用, 而INPUT_XXX系列只能配合filter_XXX函数使用.</p><p>filter.default = full_special_chars</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;filter.default&quot;</span>, <span class="hljs-string">&quot;full_special_chars&quot;</span>);<br></code></pre></td></tr></table></figure><p>实际测试发现上述代码并未生效. 只能修改php.ini启用.</p><p>参考<a href="https://www.php.net/manual/en/filter.configuration.php#ini.filter.default">php.net</a>, 启用该项配置后, $_GET/$_POST会自动套用该规则来过滤输入参数.</p><p>而想要获取原始输入值, 必须使用INPUT_XXX系列函数.</p><p>启用 php.ini filter.default = full_special_chars<br>$_POST[‘name’] //output: “&lt;”<br>filter_input(INPUT_POST, ‘name’) //output: “&lt;”<br>filter_input(INPUT_POST, ‘name’, FILTER_UNSAFE_RAW) //output: “&lt;”<br>filter_input(INPUT_POST, ‘name’, FILTER_SANITIZE_STRING) //output: “”</p><p>P.S.: 个人更倾向于$_XX来获取参数并配合filtre_var做过滤， 但这个方案确实可以减少菜鸟滥用$_GET/$_POST的危害</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wangyuechejianguan_jieru</title>
      <link href="/2019/04/09/2019-wangyuechejianguan-jieru/"/>
      <url>/2019/04/09/2019-wangyuechejianguan-jieru/</url>
      
        <content type="html"><![CDATA[<h1 id="网络预约出租汽车监管信息交互平台总体技术要求"><a href="#网络预约出租汽车监管信息交互平台总体技术要求" class="headerlink" title="网络预约出租汽车监管信息交互平台总体技术要求"></a>网络预约出租汽车监管信息交互平台总体技术要求</h1><h2 id="4-6-网约车平台公司运价信息接口"><a href="#4-6-网约车平台公司运价信息接口" class="headerlink" title="4.6 网约车平台公司运价信息接口"></a>4.6 网约车平台公司运价信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `companry_fare`(<br>    `company_fare_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `address` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;车辆所在城市（注册地行政区划）&#x27;</span>,<br>    `fare_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) comment <span class="hljs-string">&#x27;运价类型编码,由网约车平台公司统一编码,应确保唯一性&#x27;</span>,<br>    `fare_type_note` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;运价类型说明&#x27;</span>,<br>    `fare_valid_on` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;运价有效期起,YYYYMMDDhhmmss&#x27;</span>,<br>    `fare_valid_off` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;运价有效期止&#x27;</span>,<br>    `start_fare` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;起步价,元&#x27;</span>,<br>    `start_mile` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;起步里程,km&#x27;</span>,<br>    `unit_price_per_mile` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;计程单价(按公里),元&#x27;</span>,<br>    `unit_price_per_minute` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;计程单价(按分钟),元&#x27;</span>,<br>    `up_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;单程加价单价,元&#x27;</span>,<br>    `up_price_start_mile` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;单程加价公里,km&#x27;</span>,<br>    `morning_peak_time_on` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;营运早高峰时间起,HHmm(24时)&#x27;</span>,<br>    `morning_peak_time_off` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;营运早高峰时间止,HHmm(24时)&#x27;</span>,<br>    `evening_peak_time_on` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;营运晚高峰时间起,HHmm(24时)&#x27;</span>,<br>    `evening_peak_time_off` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;营运晚高峰时间止,HHmm(24时)&#x27;</span>,<br>    `other_peak_time_on` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;其他营运高峰时间起,HHmm(24时)&#x27;</span>,<br>    `other_peak_time_off` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;其他营运高峰时间止,HHmm(24时)&#x27;</span>,<br>    `peak_unit_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;高峰时间单程加价单价,元&#x27;</span>,<br>    `peak_price_start_mile` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;高峰时间单程加价公里,km&#x27;</span>,<br>    `low_speed_price_per_minute` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;低速计时加价(按分钟)&#x27;</span>,<br>    `night_price_per_mile` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;夜间费(按公里)&#x27;</span>,<br>    `night_price_per_minute` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;夜间费(按分钟)&#x27;</span>,<br>    `other_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;其他加价金额&#x27;</span>,<br>    `state` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;状态,0:有效,1:无效&#x27;</span>,<br>    `flag` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;操作标识符,1:新增,2:更新,3:删除&#x27;</span>,<br>    `update_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;更新日期,YYYYMMDDhhmmss&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;网约车平台公司运价信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="4-7-车辆基本信息接口"><a href="#4-7-车辆基本信息接口" class="headerlink" title="4.7 车辆基本信息接口"></a>4.7 车辆基本信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `vehicle` (<br>    `vehicle_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `address` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;车辆所在城市（注册地行政区划）&#x27;</span>,<br>    `vehicle_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车辆号牌&#x27;</span>,<br>    `plate_color` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车牌颜色,见JT/T 697.7-2014中5.6&#x27;</span>,<br>    `seats` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;核定载客位&#x27;</span>,<br>    `brand` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;车辆厂牌&#x27;</span>,<br>    `model` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;车辆型号&#x27;</span>,<br>    `vehicle_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;车辆类型（以行驶证为准）&#x27;</span>,<br>    `owner_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;车辆所有人&#x27;</span>,<br>    `vehicle_color` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车身颜色&#x27;</span>,<br>    `engine_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;发动机号&#x27;</span>,<br>    `vin` <span class="hljs-type">char</span>(<span class="hljs-number">17</span>) comment <span class="hljs-string">&#x27;车辆VIN码&#x27;</span>,<br>    `certify_date_a` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;车辆注册日期&#x27;</span>,<br>    `fuel_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车辆燃料类型,见JT/T697.7-2014中4.1.4.15&#x27;</span>,<br>    `engine_displace` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;发动机排量,毫升&#x27;</span>,<br>    `photo_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">18</span>) comment <span class="hljs-string">&#x27;车辆照片文件编号,本字段传输照片文件编号,照片文件通过6.1节FTPS接口传输;格式jpg;按照车辆行驶证照片的标准&#x27;</span>,<br>    `certificate` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;运输证字号,见JT/T 415-2006中5.4.1,地市字别可包含三个汉子&#x27;</span>,<br>    `trans_agency` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) comment <span class="hljs-string">&#x27;车辆运输证发证机构(全称)&#x27;</span>,<br>    `trans_area` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) comment <span class="hljs-string">&#x27;车辆经营区域&#x27;</span>,<br>    `trans_date_start` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;车辆运输证有效期起,YYYYMMDD&#x27;</span>,<br>    `trans_date_stop` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;车辆运输证有效期止,YYYYMMDD&#x27;</span>,<br>    `certify_date_b` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;车辆初次登记日期,YYYYMMDD&#x27;</span>,<br>    `fix_state` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;车辆检修状态,0:未检修,1:已检修,2:未知&#x27;</span>,<br>    `next_fix_date` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;车辆下次年检时间,YYYYMMDD&#x27;</span>,<br>    `check_state` <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) comment <span class="hljs-string">&#x27;车辆年度审验状态,见JT/T 415-2006中5.4.4&#x27;</span>,<br>    `fee_print_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;发票打印设备序列号&#x27;</span>,<br>    `gps_brand` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) comment <span class="hljs-string">&#x27;卫星定位装置品牌&#x27;</span>,<br>    `gps_model` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;卫星定位装置型号&#x27;</span>,<br>    `gps_imei` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;卫星定位装置IMEI号&#x27;</span>,<br>    `gps_install_date` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;卫星定位装置安装日期,YYYYMMDD&#x27;</span>,<br>    `register_date` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;车辆信息向服务所在地出租汽车行政主管部门报备日期,YYYYMMDD&#x27;</span>,<br>    `commercial_type` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;服务类型,1:网络预约出租车,2:巡游出租车,3:私人小客车合乘&#x27;</span>,<br>    `fare_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) comment <span class="hljs-string">&#x27;运价类型编码&#x27;</span>,<br>    `state` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;状态,0:有效,1:无效&#x27;</span>,<br>    `flag` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;操作标识符,1:新增,2:更新,3:删除&#x27;</span>,<br>    `update_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;更新日期,YYYYMMDDhhmmss&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;车辆基本信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="4-8-车辆保险信息接口"><a href="#4-8-车辆保险信息接口" class="headerlink" title="4.8 车辆保险信息接口"></a>4.8 车辆保险信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `vehicle_insurance`(<br>    `vehicle_insurance_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `vehicle_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车辆号牌&#x27;</span>,<br>    `insur_com` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;保险公司名称&#x27;</span>,<br>    `insur_num` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;保险号&#x27;</span>,<br>    `insur_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;保险类型&#x27;</span>,<br>    `insur_count` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;保险金额,元&#x27;</span>,<br>    `insur_eff` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;保险生效时间,YYYYMMDD&#x27;</span>,<br>    `insur_exp` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;保险到期时间,YYYYMMDD&#x27;</span>,<br>    `flag` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;操作标识符,1:新增,2:更新,3:删除&#x27;</span>,<br>    `update_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;更新日期,YYYYMMDDhhmmss&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;车辆保险信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="4-9-网约车车辆里程信息接口"><a href="#4-9-网约车车辆里程信息接口" class="headerlink" title="4.9 网约车车辆里程信息接口"></a>4.9 网约车车辆里程信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `vehicle_total_mile`(<br>    `vehicle_total_mile_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `address` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;注册地行政区划&#x27;</span>,<br>    `vehicle_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车辆号牌&#x27;</span>,<br>    `total_mile` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;行驶总里程,km&#x27;</span>,<br>    `flag` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;操作标识符,1:新增,2:更新,3:删除&#x27;</span>,<br>    `update_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;更新日期,YYYYMMDDhhmmss&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;网约车车辆里程信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="4-10-驾驶员基本信息接口"><a href="#4-10-驾驶员基本信息接口" class="headerlink" title="4.10 驾驶员基本信息接口"></a>4.10 驾驶员基本信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `driver`(<br>    `driver_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `address` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;注册地行政区划(驾驶员所在平台)&#x27;</span>,<br>    `driver_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;机动车驾驶员姓名&#x27;</span>,<br>    <span class="hljs-string">&#x27;driver_phone&#x27;</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;驾驶员手机号&#x27;</span>,<br>    `driver_gender` <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>) comment <span class="hljs-string">&#x27;驾驶员性别,见JT/T69.7-2014中4.1.2.1.3&#x27;</span>,<br>    `driver_birthday` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;驾驶员出生日期,YYYYMMDD&#x27;</span>,<br>    `driver_nationality` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;国籍&#x27;</span>,<br>    `driver_nation` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;驾驶员民族,见JT/T697.7-2014中4.1.2.1.7&#x27;</span>,<br>    `driver_marital_status` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;驾驶员婚姻状况,未婚;已婚;离异&#x27;</span>,<br>    `driver_language_level` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;驾驶员外语能力&#x27;</span>,<br>    `driver_education` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;驾驶员学历,见JT/T697.7-2014中4.1.2.1.11&#x27;</span>,<br>    `driver_census` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) comment <span class="hljs-string">&#x27;户口登记机关名称&#x27;</span>,<br>    `driver_address` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) comment <span class="hljs-string">&#x27;户口住址或长住地址&#x27;</span>,<br>    `driver_contact_address` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) comment <span class="hljs-string">&#x27;驾驶员通信地址&#x27;</span>,<br>    `photo_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;驾驶员照片文件编号&#x27;</span>,<br>    `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证号&#x27;</span>,<br>    `license_photo_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;机动车驾驶证扫描件编号&#x27;</span>,<br>    `driver_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) comment <span class="hljs-string">&#x27;准架车型,见JT/T697.7-2014中5.16&#x27;</span>,<br>    `get_driver_license_date` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;初次领取驾驶证日期,YYYYMMDD&#x27;</span>,<br>    `driver_license_on` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;驾驶证有效期限起,YYYYMMDD&#x27;</span>,<br>    `driver_license_off` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;驾驶证有效期限止,YYYYMMDD&#x27;</span>,<br>    `taxi_driver` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;是否巡游出租车驾驶员,1:是,0:否&#x27;</span>,<br>    `certificate_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;网络预约出租车驾驶员资格证号&#x27;</span>,<br>    `network_car_issue_organization` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) comment <span class="hljs-string">&#x27;网络预约出租车驾驶员证发证机构(全称)&#x27;</span>,<br>    `network_car_issue_date` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;资格证发证日期,YYYYMMDD&#x27;</span>,<br>    `get_network_car_proof_date` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;初次领取资格证日期,YYYYMMDD&#x27;</span>,<br>    `network_car_proof_on` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;资格证有效期起,YYYYMMDD&#x27;</span>,<br>    `network_car_proof_off` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;资格证有效期止,YYYYMMDD&#x27;</span>,<br>    `register_date` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;报备日期,YYYYMMDD&#x27;</span>,<br>    `full_time_driver` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;是否专职驾驶员,1:是,0:否&#x27;</span>,<br>    `in_driver_blacklist` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;是否在驾驶员黑名单内,1:是,0:否&#x27;</span>,<br>    `commercial_type` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;服务类型,1:网络预约出租车,2:巡游出租车,3:私人小客车合乘&#x27;</span>,<br>    `contract_company` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) comment <span class="hljs-string">&#x27;驾驶员合同(或协议)签署公司&#x27;</span>,<br>    `contract_on` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;合同(或协议)有效期起,YYYYMMDD&#x27;</span>,<br>    `contract_off` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;合同(或协议)有效期止,YYYYMMDD&#x27;</span>,<br>    `emergency_contact` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;紧急情况联系人&#x27;</span>,<br>    `emergency_contact_phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;紧急情况联系人电话&#x27;</span>,<br>    `emergency_contact_address` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) comment <span class="hljs-string">&#x27;紧急情况联系人通信地址&#x27;</span>,<br>    `state` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;状态,0:有效,1:失效&#x27;</span>,<br>    `flag` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;操作标识符,1:新增,2:更新,3:删除&#x27;</span>,<br>    `update_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;更新日期,YYYYMMDDhhmmss&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;驾驶员基本信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="4-11-网约车驾驶员培训信息接口"><a href="#4-11-网约车驾驶员培训信息接口" class="headerlink" title="4.11 网约车驾驶员培训信息接口"></a>4.11 网约车驾驶员培训信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `driver_educate`(<br>    `driver_educate_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `address` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;注册地行政区划&#x27;</span>,<br>    `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证号&#x27;</span>,<br>    `course_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;驾驶员培训课程名称&#x27;</span>,<br>    `course_date` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;培训课程日期&#x27;</span>,<br>    `start_time` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;培训开始时间&#x27;</span>,<br>    `stop_time` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;培训结束时间&#x27;</span>,<br>    `duration` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;培训时长&#x27;</span>,<br>    `flag` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;操作标识符,1:新增,2:更新,3:删除&#x27;</span>,<br>    `update_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;更新日期,YYYYMMDDhhmmss&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;网约车驾驶员培训信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="4-12-驾驶员移动终端信息接口"><a href="#4-12-驾驶员移动终端信息接口" class="headerlink" title="4.12 驾驶员移动终端信息接口"></a>4.12 驾驶员移动终端信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `driver_app`(<br>   `driver_app_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>   `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>   `address` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;注册地行政区划&#x27;</span>,<br>   `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证号&#x27;</span>,<br>   <span class="hljs-string">&#x27;driver_phone&#x27;</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;驾驶员手机号&#x27;</span>,<br>   `net_type` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;手机运营商,1:联通,2:移动,3:电信,4:其他&#x27;</span>,<br>   `app_version` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;使用app版本号&#x27;</span>,<br>   `map_type` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;使用地图类型,1:百度地图,2:高德地图,3:其他&#x27;</span>,<br>   `state` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;状态,0:有效,1:失效&#x27;</span>,<br>   `flag` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;操作标识符,1:新增,2:更新,3:删除&#x27;</span>,<br>   `update_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;更新日期,YYYYMMDDhhmmss&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;驾驶员移动终端&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="4-13-驾驶员统计信息接口"><a href="#4-13-驾驶员统计信息接口" class="headerlink" title="4.13 驾驶员统计信息接口"></a>4.13 驾驶员统计信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `driver_stat`(<br>    `driver_app_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `address` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;注册地行政区划&#x27;</span>,<br>    `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证号&#x27;</span>,<br>    `<span class="hljs-keyword">cycle</span>` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) comment <span class="hljs-string">&#x27;统计周期&#x27;</span>,<br>    `order_count` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;完成订单次数&#x27;</span>,<br>    `traffic_violation_count` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;交通违章次数&#x27;</span>,<br>    `complained_count` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;被投诉次数&#x27;</span>,<br>    `flag` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;操作标识符,1:新增,2:更新,3:删除&#x27;</span>,<br>    `update_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;更新日期,YYYYMMDDhhmmss&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;驾驶员统计信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="4-14-乘客基本信息接口"><a href="#4-14-乘客基本信息接口" class="headerlink" title="4.14 乘客基本信息接口"></a>4.14 乘客基本信息接口</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `passenger`(<br>    `passenger_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `register_date` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;注册日期&#x27;</span>,<br>    `passenger_phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;乘客手机号&#x27;</span>,<br>    `passenger_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;乘客称谓&#x27;</span>,<br>    `passenger_gender` <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>) comment <span class="hljs-string">&#x27;乘客性别&#x27;</span>,<br>    `state` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;状态,0:有效,1:失效&#x27;</span>,<br>    `flag` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;操作标识符,1:新增,2:更新,3:删除&#x27;</span>,<br>    `update_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;更新日期,YYYYMMDDhhmmss&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;乘客基本信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="5-订单信息交换接口"><a href="#5-订单信息交换接口" class="headerlink" title="5 订单信息交换接口"></a>5 订单信息交换接口</h1><h2 id="5-1-订单发起接口"><a href="#5-1-订单发起接口" class="headerlink" title="5.1 订单发起接口"></a>5.1 订单发起接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `order_create`(<br>    `order_create_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `address` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;注册地行政区划&#x27;</span>,<br>    `order_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;订单编号&#x27;</span>,<br>    `depart_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;预计用车时间,YYYYMMDDhhmmss&#x27;</span>,<br>    `order_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;订单发起时间,YYYYMMDDhhmmss&#x27;</span>,<br>    `passenger_note` <span class="hljs-type">varchar</span>(<span class="hljs-number">28</span>) comment <span class="hljs-string">&#x27;乘客备注&#x27;</span>,<br>    `departure` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;预计出发地点详细地址&#x27;</span>,<br>    `dep_longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;预计出发地点经度&#x27;</span>,<br>    `dep_latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;预计出发地点维度&#x27;</span>,<br>    `destination` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;预计目的地&#x27;</span>,<br>    `dest_longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;预计目的地经度&#x27;</span>,<br>    `dest_latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;预计目的地维度&#x27;</span>,<br>    `encrypt` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;坐标加密标识,1:GCJ-02测绘局标准,2:WGS84 GPS标准,3:BD-09百度标准,4:CGCS2000北斗标准,0:其他&#x27;</span>,<br>    `fare_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) comment <span class="hljs-string">&#x27;运价类型编码&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;订单发起&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="5-2-订单成功接口"><a href="#5-2-订单成功接口" class="headerlink" title="5.2 订单成功接口"></a>5.2 订单成功接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `order_match`(<br>    `order_match_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `address` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;注册地行政区划&#x27;</span>,<br>    `order_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;订单编号&#x27;</span>,<br>    `longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;车辆经度&#x27;</span>,<br>    `latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;车辆维度&#x27;</span>,<br>    `encrypt` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;坐标加密标识&#x27;</span>,<br>    `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证编码&#x27;</span>,<br>    `driver_phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;驾驶员手机号&#x27;</span>,<br>    `vehicle_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车辆号牌&#x27;</span>,<br>    `distribute_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;派单成功时间&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;订单成功(匹配)&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="5-3-订单撤销接口"><a href="#5-3-订单撤销接口" class="headerlink" title="5.3 订单撤销接口"></a>5.3 订单撤销接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `order_cancel`(<br>    `order_cancel_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `address` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;注册地行政区划&#x27;</span>,<br>    `order_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;订单编号&#x27;</span>,<br>    `order_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;订单时间&#x27;</span>,<br>    `cancel_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;订单撤销时间&#x27;</span>,<br>    `operator` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;撤销发起方,1:乘客,2:驾驶员,3:平台公司&#x27;</span>,<br>    `cancel_type_code` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;撤销类型代码,1:乘客提前撤销,2:驾驶员提前撤销,3:平台公司撤销,4:乘客违约撤销,5:驾驶员违约撤销&#x27;</span>,<br>    `cancel_reason` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;撤销或违约原因&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;订单撤销&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="6-经营信息交换接口"><a href="#6-经营信息交换接口" class="headerlink" title="6 经营信息交换接口"></a>6 经营信息交换接口</h1><h2 id="6-1-车辆经营上线接口"><a href="#6-1-车辆经营上线接口" class="headerlink" title="6.1 车辆经营上线接口"></a>6.1 车辆经营上线接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `operate_login`(<br>    `operate_login_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证号&#x27;</span>,<br>    `vehicle_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车辆号牌&#x27;</span>,<br>    `login_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;车辆经营上线时间&#x27;</span>,<br>    `longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;上线经度&#x27;</span>,<br>    `latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;上线维度&#x27;</span>,<br>    `encrypt` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;坐标加密标识&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;车辆经营上线&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="6-2-车辆经营下线接口"><a href="#6-2-车辆经营下线接口" class="headerlink" title="6.2 车辆经营下线接口"></a>6.2 车辆经营下线接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `operate_logout`(<br>    `operate_logout_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证号&#x27;</span>,<br>    `vehicle_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车辆号牌&#x27;</span>,<br>    `login_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;车辆经营下线时间&#x27;</span>,<br>    `longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;下线经度&#x27;</span>,<br>    `latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;下线维度&#x27;</span>,<br>    `encrypt` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;坐标加密标识&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;车辆经营下线&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="6-3-经营出发接口"><a href="#6-3-经营出发接口" class="headerlink" title="6.3 经营出发接口"></a>6.3 经营出发接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `operate_depart`(<br>    `operate_depart_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `order_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;订单号&#x27;</span>,<br>    `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证号&#x27;</span>,<br>    `fare_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) comment <span class="hljs-string">&#x27;运价类型编码&#x27;</span>,<br>    `vehicle_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车辆号牌&#x27;</span>,<br>    `dep_longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;出发经度&#x27;</span>,<br>    `dep_latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;出发维度&#x27;</span>,<br>    `encrypt` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;坐标加密标识&#x27;</span>,<br>    `dep_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;上车时间&#x27;</span>,<br>    `wait_mile` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;空驶里程,km&#x27;</span>,<br>    `wait_time` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;等待时间,秒&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;车辆经营出发&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="6-4-经营到达接口"><a href="#6-4-经营到达接口" class="headerlink" title="6.4 经营到达接口"></a>6.4 经营到达接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `operate_arrive`(<br>    `operate_arrive` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `order_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;订单号&#x27;</span>,<br>    `dest_longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;车辆到达经度&#x27;</span>,<br>    `dest_latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;车辆到达维度&#x27;</span>,<br>    `encrypt` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;坐标加密标识&#x27;</span>,<br>    `dest_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;上车时间&#x27;</span>,<br>    `drive_mile` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;载客里程,km&#x27;</span>,<br>    `drive_time` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;载客时间,秒&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;经营到达&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="6-5-经营支付接口"><a href="#6-5-经营支付接口" class="headerlink" title="6.5 经营支付接口"></a>6.5 经营支付接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `operate_pay`(<br>    `operate_pay_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `order_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;订单号&#x27;</span>,<br>    `on_area` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) comment <span class="hljs-string">&#x27;上车位置行政区划编码&#x27;</span>,<br>    `driver_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;机动车驾驶员姓名&#x27;</span>,<br>    `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证号&#x27;</span>,<br>    `fare_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) comment <span class="hljs-string">&#x27;运价类型编码&#x27;</span>,<br>    `vehicle_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车辆号牌&#x27;</span>,<br>    `book_dep_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;预计上车时间&#x27;</span>,<br>    `wait_time` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;等待时间&#x27;</span>,<br>    `dep_longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;车辆出发经度&#x27;</span>,<br>    `dep_latitude`  <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;车辆出发维度&#x27;</span>,<br>    `dep_area` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;上车地点&#x27;</span>,<br>    `dep_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;上车时间&#x27;</span>,<br>    `dest_longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;车辆到达经度&#x27;</span>,<br>    `dest_latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;车辆到达维度&#x27;</span>,<br>    `dest_area` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;下车地点&#x27;</span>,<br>    `dest_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;下车时间&#x27;</span>,<br>    `book_model` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;预定车型&#x27;</span>,<br>    `model` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;实际车型&#x27;</span>,<br>    `drive_mile` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;载客里程&#x27;</span>,<br>    `drive_time` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;载客时间&#x27;</span>,<br>    `wait_mile` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;空载里程&#x27;</span>,<br>    `fact_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;实收金额&#x27;</span>,<br>    `price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;应收金额&#x27;</span>,<br>    `cash_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;现金支付金额&#x27;</span>,<br>    `line_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;电子支付机构&#x27;</span>,<br>    `line_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;电子支付金额&#x27;</span>,<br>    `pos_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;POS机支付机构&#x27;</span>,<br>    `pos_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;POS机支付金额&#x27;</span>,<br>    `benfit_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;优惠金额&#x27;</span>,<br>    `book_tip` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;预约服务费&#x27;</span>,<br>    `passenger_tip` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;附加费&#x27;</span>,<br>    `peak_up_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;高峰时段时间加价金额&#x27;</span>,<br>    `night_up_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;夜间时段里程加价金额&#x27;</span>,<br>    `fare_up_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;远途加价金额&#x27;</span>,<br>    `other_up_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;其他加价金额&#x27;</span>,<br>    `pay_state` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;结算状态,0:未结算,1:已结算,2:未知&#x27;</span>,<br>    `pay_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;乘客结算时间&#x27;</span>,<br>    `order_match_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;订单完成时间&#x27;</span>,<br>    `invoice_status` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;发票状态,0:未开票,1:已开票,2:未知&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;经营支付&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="7-定位信息交换接口"><a href="#7-定位信息交换接口" class="headerlink" title="7 定位信息交换接口"></a>7 定位信息交换接口</h1><h2 id="7-1-驾驶员定位信息接口"><a href="#7-1-驾驶员定位信息接口" class="headerlink" title="7.1 驾驶员定位信息接口"></a>7.1 驾驶员定位信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `position_driver`(<br>    `position_driver_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证号&#x27;</span>,<br>    `driver_region_code` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) comment <span class="hljs-string">&#x27;驾驶员报备地行政区划代码&#x27;</span>,<br>    `vehicle_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车辆号牌&#x27;</span>,<br>    `position_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;定位时间&#x27;</span>,<br>    `longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;下线经度&#x27;</span>,<br>    `latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;下线维度&#x27;</span>,<br>    `encrypt` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;坐标加密标识&#x27;</span>,<br>    `direction` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;方向角,0-359,顺时针方向&#x27;</span>,<br>    `elevation` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;海拔高度&#x27;</span>,<br>    `speed` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;瞬时速度&#x27;</span>,<br>    `biz_status` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;营运撞他,1:载客,2:接单,3:空驶,4:停运&#x27;</span>,<br>    `order_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;订单编号&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;驾驶员定位信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="与驾驶员定位信息重复"><a href="#与驾驶员定位信息重复" class="headerlink" title="与驾驶员定位信息重复?"></a>与驾驶员定位信息重复?</h1><h2 id="7-2-车辆定位信息接口"><a href="#7-2-车辆定位信息接口" class="headerlink" title="7.2 车辆定位信息接口"></a>7.2 车辆定位信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `position_vehicle`(<br>    `position_vehicle_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `vehicle_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车辆号牌&#x27;</span>,<br>    `vehicle_region_code` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) comment <span class="hljs-string">&#x27;车辆报备地行政区划代码&#x27;</span>,<br>    `position_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;定位时间&#x27;</span>,<br>    `longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;下线经度&#x27;</span>,<br>    `latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;下线维度&#x27;</span>,<br>    `speed` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;瞬时速度&#x27;</span>,<br>    `direction` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;方向角,0-359,顺时针方向&#x27;</span>,<br>    `elevation` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;海拔高度&#x27;</span>,<br>    `mileage` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;行驶里程&#x27;</span>,<br>    `encrypt` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;坐标加密标识&#x27;</span>,<br>    `warn_status` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;预警状态,参考JT/T808&#x27;</span>,<br>    `veh_status` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;车辆状态,参考JT/T808&#x27;</span>,<br>    `biz_status` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;营运撞他,1:载客,2:接单,3:空驶,4:停运&#x27;</span>,<br>    `order_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;订单编号&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;车辆定位信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="8-服务质量信息交换接口"><a href="#8-服务质量信息交换接口" class="headerlink" title="8 服务质量信息交换接口"></a>8 服务质量信息交换接口</h1><h2 id="8-1-乘客评价信息接口"><a href="#8-1-乘客评价信息接口" class="headerlink" title="8.1 乘客评价信息接口"></a>8.1 乘客评价信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `rated_passenger`(<br>    `rated_passenger_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `order_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;订单编号&#x27;</span>,<br>    `evaluate_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;评价时间&#x27;</span>,<br>    `service_score` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;服务满意度,五分制&#x27;</span>,<br>    `driver_score` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;驾驶员满意度,五分制&#x27;</span>,<br>    `vehicle_score` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;车辆满意度,五分制&#x27;</span>,<br>    `detail` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;评价内容&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;乘客评价信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="8-2-乘客投诉信息接口"><a href="#8-2-乘客投诉信息接口" class="headerlink" title="8.2 乘客投诉信息接口"></a>8.2 乘客投诉信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `rated_passenger_complaint`(<br>    `rated_passenger_complaint_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `order_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;订单编号&#x27;</span>,<br>    `complaint_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;投诉时间&#x27;</span>,<br>    `detail` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) comment <span class="hljs-string">&#x27;投诉内容&#x27;</span>,<br>    `<span class="hljs-keyword">result</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;处理结果&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;乘客投诉信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="8-3-驾驶员处罚信息接口"><a href="#8-3-驾驶员处罚信息接口" class="headerlink" title="8.3 驾驶员处罚信息接口"></a>8.3 驾驶员处罚信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `rated_driver_punish`(<br>    `rated_driver_punish_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证号&#x27;</span>,<br>    `punish_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;处罚时间&#x27;</span>,<br>    `punish_reason` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;处罚原因&#x27;</span>,<br>    `punish_result` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;处罚结果&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;驾驶员处罚信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="8-4-驾驶员信誉信息接口"><a href="#8-4-驾驶员信誉信息接口" class="headerlink" title="8.4 驾驶员信誉信息接口"></a>8.4 驾驶员信誉信息接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `rated_driver`(<br>    `rated_driver_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证号&#x27;</span>,<br>    `level` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;机动车驾驶证编号&#x27;</span>,<br>    `test_date` <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) comment <span class="hljs-string">&#x27;服务质量信誉考核日期,YYYYMMDD&#x27;</span>,<br>    `test_department` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;服务质量荣誉考核机构&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;驾驶员信誉信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="9-私人小客车合乘信息交换接口"><a href="#9-私人小客车合乘信息交换接口" class="headerlink" title="9 私人小客车合乘信息交换接口"></a>9 私人小客车合乘信息交换接口</h1><h2 id="9-1-私人小客车合乘信息服务平台进本信息接口"><a href="#9-1-私人小客车合乘信息服务平台进本信息接口" class="headerlink" title="9.1 私人小客车合乘信息服务平台进本信息接口"></a>9.1 私人小客车合乘信息服务平台进本信息接口</h2><h2 id="9-2-私人小客车合乘驾驶员行程发布接口"><a href="#9-2-私人小客车合乘驾驶员行程发布接口" class="headerlink" title="9.2 私人小客车合乘驾驶员行程发布接口"></a>9.2 私人小客车合乘驾驶员行程发布接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `share_route`(<br>    `share_route_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `address` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) comment <span class="hljs-string">&#x27;行政区划代码&#x27;</span>,<br>    `route_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;驾驶员发起行程编号&#x27;</span>,<br>    `driver_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;驾驶员姓名&#x27;</span>,<br>    `driver_phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;驾驶员手机号&#x27;</span>,<br>    `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证号&#x27;</span>,<br>    `vehicle_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车辆号牌&#x27;</span>,<br>    `departure` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;行程出发地点&#x27;</span>,<br>    `dep_longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;车辆出发经度&#x27;</span>,<br>    `dep_latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;车辆出发维度&#x27;</span>,<br>    `destination` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;行程到达地点&#x27;</span>,<br>    `dest_longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;到达地经度&#x27;</span>,<br>    `dest_latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;到达地维度&#x27;</span>,<br>    `encrypt` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;坐标加密标识&#x27;</span>,<br>    `route_create_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;行程发布时间&#x27;</span>,<br>    `route_mile` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;行程预计里程&#x27;</span>,<br>    `route_note` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) comment <span class="hljs-string">&#x27;行程备注&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;私人小客车合乘驾驶员行程发布&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="9-3-私人小客车合乘订单接口"><a href="#9-3-私人小客车合乘订单接口" class="headerlink" title="9.3 私人小客车合乘订单接口"></a>9.3 私人小客车合乘订单接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `share_order`(<br>    `share_order_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `address` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) comment <span class="hljs-string">&#x27;行政区划代码&#x27;</span>,<br>    `route_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;驾驶员发起行程编号&#x27;</span>,<br>    `order_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;订单编号&#x27;</span>,<br>    `book_depart_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;预计上车时间&#x27;</span>,<br>    `departure` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;预计上车地点&#x27;</span>,<br>    `dep_longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;预计上车经度&#x27;</span>,<br>    `dep_latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;预计上车维度&#x27;</span>,<br>    `destination` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;预计下车地点&#x27;</span>,<br>    `dest_longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;预计下车地经度&#x27;</span>,<br>    `dest_latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;预计下车地维度&#x27;</span>,<br>    `encrypt` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;坐标加密标识&#x27;</span>,<br>    `order_ensure_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;订单确认时间&#x27;</span>,<br>    `passenger_num` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;乘客人数&#x27;</span>,<br>    `passenger_note` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) comment <span class="hljs-string">&#x27;乘客备注&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;私人小客车合乘订单&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="9-4-私人小客车合乘订单支付接口"><a href="#9-4-私人小客车合乘订单支付接口" class="headerlink" title="9.4 私人小客车合乘订单支付接口"></a>9.4 私人小客车合乘订单支付接口</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> `share_pay`(<br>    `share_pay_id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    `company_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;公司标识&#x27;</span>,<br>    `address` <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) comment <span class="hljs-string">&#x27;行政区划代码&#x27;</span>,<br>    `route_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;驾驶员发起行程编号&#x27;</span>,<br>    `order_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;订单编号&#x27;</span>,<br>    `driver_phone` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;驾驶员手机号&#x27;</span>,<br>    `license_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;机动车驾驶证号&#x27;</span>,<br>    `vehicle_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;车辆号牌&#x27;</span>,<br>    `fare_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) comment <span class="hljs-string">&#x27;运价类型编码&#x27;</span>,<br>    `book_depart_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;预计上车时间&#x27;</span>,<br>    `depart_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;实际上车时间&#x27;</span>,<br>    `departure` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;上车地点&#x27;</span>,<br>    `dep_longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;上车地点经度&#x27;</span>,<br>    `dep_latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;上车地点维度&#x27;</span>,<br>    `dest_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;下车时间&#x27;</span>,<br>    `destination` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) comment <span class="hljs-string">&#x27;下车地点&#x27;</span>,<br>    `dest_longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;下车地经度&#x27;</span>,<br>    `dest_latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;下车地维度&#x27;</span>,<br>    `encrypt` <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;坐标加密标识&#x27;</span>,<br>    `drive_mile` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;载客里程&#x27;</span>,<br>    `drive_time` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;载客时间&#x27;</span>,<br>    `fact_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;实收金额&#x27;</span>,<br>    `price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;应收金额&#x27;</span>,<br>    `cash_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;现金支付金额&#x27;</span>,<br>    `line_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) comment <span class="hljs-string">&#x27;电子支付机构&#x27;</span>,<br>    `line_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;电子支付金额&#x27;</span>,<br>    `benfit_price` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;优惠金额&#x27;</span>,<br>    `share_fuel_fee` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;燃料成本分摊金额&#x27;</span>,<br>    `share_highway_toll` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;路桥通行分摊金额&#x27;</span>,<br>    `passenger_tip` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;附加费&#x27;</span>,<br>    `share_other` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;其他费用分摊金额&#x27;</span>,<br>    `pay_state` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) comment <span class="hljs-string">&#x27;结算状态&#x27;</span>,<br>    `passenger_num` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) comment <span class="hljs-string">&#x27;乘客人数&#x27;</span>,<br>    `pay_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;乘客结算时间&#x27;</span>,<br>    `order_match_time` <span class="hljs-type">char</span>(<span class="hljs-number">14</span>) comment <span class="hljs-string">&#x27;订单完成时间&#x27;</span><br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;私人小客车合乘订单支付&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> ``()engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset utf8 comment <span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php_rabbitmq</title>
      <link href="/2019/04/07/2019-php-rabbitmq/"/>
      <url>/2019/04/07/2019-php-rabbitmq/</url>
      
        <content type="html"><![CDATA[<h2 id="名词释义"><a href="#名词释义" class="headerlink" title="名词释义"></a>名词释义</h2><ul><li>Queue: RabbitMQ管理着多个队列，例如订单队列、邮件队列、延迟任务队列等。</li><li>Connection: 客户端程序与RabbitMQ的连接实例</li><li>Channel: 客户端向指定的队列发送消息（例如向订单队列插入一条订单），需要通过Channel来发送（不是Connection）</li><li>Exchange: 当一条消息需要发送到多个队列中时，不可能追条向队列发送。Exchange负责接收一条消息，并按消息头中的RoutingKey/BindingKey向相应的Queue发送消息。</li><li>BindingKey: 消息生产者向Exchange发送消息时，header中携带的对着描述</li><li>RoutingKey: 消息接收者从Exchange取消息时，header中携带的规则描述。Exchange根据RoutingKey和所有与该Exchange绑定的BindingKey匹配，向满足规则的Queue发送消息，从而实现一条消息发往过个Queue</li></ul><img src="/images/amqp_fanout_exchange.png" style="width:450px;height:300px" /><img src="/images/amqp_direct_exchange.png" style="width:450px;height:300px" /><img src="/images/amqp_topic_exchange.png" style="width:450px;height:300px" />]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL锁</title>
      <link href="/2018/09/18/2018-MySQL%E9%94%81/"/>
      <url>/2018/09/18/2018-MySQL%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Myisam表锁"><a href="#Myisam表锁" class="headerlink" title="Myisam表锁"></a>Myisam表锁</h1><h2 id="锁模式"><a href="#锁模式" class="headerlink" title="锁模式"></a>锁模式</h2><ol><li>共享锁（S锁，亦读锁）：如果事务T对数据A加上共享锁后，则其他事务只能对A再加共享锁，不能加排它锁。获取共享锁的事务只能读数据，不能写数据。</li><li>排它锁（X锁，亦写锁）：如果事务T对数据A加上排它锁后，则其他事务不能再对A加任务类型的锁。获取排它锁的事务既能读数据，也能写数据。</li></ol><p>第一行为请求锁模式， 第一列为当前锁模式  </p><table><thead><tr><th></th><th>None</th><th align="center">读锁</th><th align="right">写锁</th></tr></thead><tbody><tr><td>读锁</td><td>是</td><td align="center">是</td><td align="right">否</td></tr><tr><td>写锁</td><td>是</td><td align="center">否</td><td align="right">否</td></tr></tbody></table><ol><li>当前锁为读锁，请求锁为读锁，正常读取。（图1）</li><li>当前锁为读锁，请求锁为写锁，阻塞。（图2）</li><li>当前锁为写锁，请求锁为读锁，阻塞。（图3）</li><li>当前锁为写锁，请求锁为写锁，阻塞。（图4）</li></ol><span id="more"></span><p><img src="/images/mysql/lock_read_read.png" alt="图1"><br>图1.</p><p><img src="/images/mysql/lock_read_write.png" alt="图2"><br>图2.</p><p><img src="/images/mysql/lock_write_read.png" alt="图2"><br>图3.</p><p><img src="/images/mysql/lock_write_write.png" alt="图3"><br>图4.</p><p>简而言之: </p><ol><li>Myisam表的读操作，不会阻塞对同一表的读操作，但是会阻塞写操作。</li><li>Myisam表的写操作，会阻塞对同一表的读、写操作。</li><li>Myisam表的读、写操作之间，以及写操作之间是串行的。</li></ol><p>一般，Myisam在执行查询前，会自动执行表的加锁、解锁操作，不需要用户手动加锁、解锁。<br>但下例不同，请思考：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(t1.score) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;score&#x27;</span> <span class="hljs-keyword">from</span> t1;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(t2.score) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;score&#x27;</span> <span class="hljs-keyword">from</span> t2;<br></code></pre></td></tr></table></figure><p>上面的sql是有问题的。因为读完t1表再读t2表时，t2表的数据可能已经发生的变化，不再是期望的<code>同一时刻的状态</code>，修改为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">lock <span class="hljs-keyword">table</span> t1 read, t2 read;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(t1.score) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;score&#x27;</span> <span class="hljs-keyword">from</span> t1;<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(t2.score) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;score&#x27;</span> <span class="hljs-keyword">from</span> t2;<br>unlock tables;<br></code></pre></td></tr></table></figure><h2 id="并发插入"><a href="#并发插入" class="headerlink" title="并发插入"></a>并发插入</h2><p>通常Myisam的新数据会插入到数据文件的末尾，但是当做一些upate、delete操作之后，数据文件不再是连续的，数据文件中会有空洞。此时再插入新数据，会先检查这些空洞是否能容纳新数据。如果可以，则插入空洞，否则插入文件末尾。</p><p>Myisam里读写是串行的，为了降低锁竞争的频率，需要设置<code>concurrent_insert</code>:</p><ol><li>concurrent_insert=0，不允许并发插入</li><li>concurrent_insert=1，允许对没有空洞的表并发插入，新数据位于末尾。</li><li>concurrent_insert=2，不管表有没有空挡，都允许在数据文件末尾插入。</li></ol><p>缺省情况下，写操作优先级高于读操作。即使是先发送的读请求，后发送的写请求，此时也会有限处理写。这样，当连续多个写时，所有的读请求会被阻塞。因此：</p><ol><li>max_write_lock_count=1，当处理完一个写后，暂停写，给读操作流出机会。</li><li>low-priority-updates=1，直接降低写操作的优先级，给读操作更高的优先级</li></ol><h1 id="Innodb表锁"><a href="#Innodb表锁" class="headerlink" title="Innodb表锁"></a>Innodb表锁</h1><h2 id="Innodb与Myisam的不同"><a href="#Innodb与Myisam的不同" class="headerlink" title="Innodb与Myisam的不同"></a>Innodb与Myisam的不同</h2><ol><li>支持事务</li><li>采用行级锁</li><li>不支持全文索</li></ol><h2 id="Innodb行锁模式以及加锁方式"><a href="#Innodb行锁模式以及加锁方式" class="headerlink" title="Innodb行锁模式以及加锁方式"></a>Innodb行锁模式以及加锁方式</h2><ul><li>共享锁（S锁）：允许一个事务去读一行，阻止其他事务获取相同数据集的排它锁。</li><li>排它锁（X锁）：允许获得排它锁的事务更新数据，阻止其他事务获得相同数据集的共享读锁和排他写锁。</li><li>意向共享锁（IS锁）：</li><li>意向排它锁（IX锁）：</li></ul><table><thead><tr><th></th><th>X</th><th>IX</th><th align="center">S</th><th align="center">IS</th></tr></thead><tbody><tr><td>X</td><td>冲突</td><td>冲突</td><td align="center">冲突</td><td align="center">冲突</td></tr><tr><td>IX</td><td>冲突</td><td>兼容</td><td align="center">冲突</td><td align="center">兼容</td></tr><tr><td>S</td><td>冲突</td><td>冲突</td><td align="center">兼容</td><td align="center">兼容</td></tr><tr><td>IS</td><td>冲突</td><td>兼容</td><td align="center">兼容</td><td align="center">兼容</td></tr></tbody></table><p>如果请求锁模式和当前锁模式兼容，则并发；否则阻塞。意向锁是Innodb自动加的，不需要手动操作。对于UPDATE、DELEE、INSERT语句，Innodb会自动加排它锁；对普通的SELECT语句，不加锁。<br>手动显示的使用锁：</p><ol><li>共享锁： SELECT * FROM <code>t</code> WHERE … LOCK IN SHARE MODE;</li><li>排它锁： SELECT * FROM <code>t</code> WHERE … FOR UPDATE;</li></ol><h2 id="Innodb行锁实现方式"><a href="#Innodb行锁实现方式" class="headerlink" title="Innodb行锁实现方式"></a>Innodb行锁实现方式</h2><p>Innodb的行锁是通过给索引加锁实现的。因此，仅当通过索引条件检索，Innodb才使用行锁，否则使用表锁</p><p><img src="/images/mysql/innodb_S_X_block.png" alt="图1"></p><p>当一个事务加锁时，另一个事务在同一索引上再加锁则阻塞：<br><img src="/images/mysql/innodb_S_X_sime_index_block.png" alt="图2"></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫系列-预备篇</title>
      <link href="/2016/07/14/2016-Scrapy%E7%88%AC%E8%99%AB%E7%B3%BB%E5%88%97-%E9%A2%84%E5%A4%87%E7%AF%87/"/>
      <url>/2016/07/14/2016-Scrapy%E7%88%AC%E8%99%AB%E7%B3%BB%E5%88%97-%E9%A2%84%E5%A4%87%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>以前一直是在Web开发框架下(YII、Laravel)的Console模块中开发自己的爬虫,再结合shell脚本,发起多进程并发抓取数据.这一套下来,复杂且艰难之处在于要在shell和php之间来回调试,并且我对shell的错误处理甚是粗陋,再加上诸如<code>find</code>、<code>grep</code>、<code>awk</code>各种命令的参数繁多,整个开发的过程痛并快乐着.</p><p>最近开始研究python的爬虫框架Scrapy.与专业的爬虫框架相比,我以前的工作模式说是刀耕火种都不为过呀!</p><p>我会有数篇文章来记录Scrapy的学历历程,但是首先,介绍一些预备知识(不涉及语言本身)</p><h2 id="一、-新人不要使用virtualenv"><a href="#一、-新人不要使用virtualenv" class="headerlink" title="一、 新人不要使用virtualenv"></a>一、 新人不要使用virtualenv</h2><p>virtualenv很好用.但是对新人而言,费时费力的维护不同版本的python就是舍本逐末的行为.在安装virtualenv之前请先执行<code>python --version</code>检查系统自带的pytohn版本.若是<code>2.7.*</code>,就直接使用系统的python就好了;否则安装<a href="https://www.python.org/downloads/release/python-2712/">2.7版本的python</a>.</p><p><strong>P.S.:为什么要</strong><code>2.7.*</code>,因为Scrapy<a href="http://scrapy-chs.readthedocs.io/zh_CN/0.24/faq.html">只支持pyton2.7</a></p><blockquote><p>Scrapy支持那些Python版本？</p><p>Scrapy仅仅支持Python 2.7。 Python2.6的支持从Scrapy 0.20开始被废弃了。</p></blockquote><h2 id="二、python中的编码问题unicode-utf-8-gbk-ascii"><a href="#二、python中的编码问题unicode-utf-8-gbk-ascii" class="headerlink" title="二、python中的编码问题unicode/utf-8/gbk/ascii"></a>二、python中的编码问题unicode/utf-8/gbk/ascii</h2><h4 id="1-什么是ASCII"><a href="#1-什么是ASCII" class="headerlink" title="1. 什么是ASCII"></a>1. 什么是ASCII</h4><p>ASCII(美国信息交换标准代码),最后一次更新则是在1986年，至今为止共定义了128个字符,包括26个基本拉丁字母、阿拉伯数目字和英式标点符号.并且最多只能表示256个字符.<code>ascii</code>是单字节的</p><h4 id="2-什么是gbk"><a href="#2-什么是gbk" class="headerlink" title="2.什么是gbk"></a>2.什么是gbk</h4><p>256个字符显然不可能支持中文、俄文、韩文、日文等,所以几乎每个语言都有自己的一套编码标准,例如GBK*/BIG*.<code>gbk</code>是两字节的.</p><h4 id="3-什么是utf-8"><a href="#3-什么是utf-8" class="headerlink" title="3.什么是utf-8"></a>3.什么是utf-8</h4><p>各个语言各自有一套编码标准,但是各个标准之间是不兼容的.utf-8解决了这个问题,世界一统,大家都用utf-8.<code>utf-8</code>是(最多)三字节的.除了<code>utf-8</code>,还有<code>utf-16</code>,<code>utf-32</code></p><h4 id="4-什么是unicode"><a href="#4-什么是unicode" class="headerlink" title="4.什么是unicode"></a>4.什么是unicode</h4><p>其实上面说的不太准确,世界一统的字符集叫<code>unicode</code>,理论上unicode可以无限扩充.但unicode有个致命缺点:浪费存储空间!所以才有了utf-8,<code>utf-8</code>是为了解决这个问题,对<code>unicode</code>的<code>传输</code>和<code>存储</code>的规则.然而对于我们面向应用的开发者,保持utf-8整齐划一就可以了,不需要再向上操作unicode.</p><h4 id="5-python中的unicode-utf-8"><a href="#5-python中的unicode-utf-8" class="headerlink" title="5.python中的unicode/utf-8"></a>5.python中的unicode/utf-8</h4><p>按上文所述,<code>unicode</code>才是真正的字符串, <code>utf-8</code>是更底层的存储格式用可阅读的形式(humanreadable)打印出来的字符串.因此,在python中:</p><ul><li>unicode-&gt;encode(‘utf-8’)得到普通字符串 是正确的</li><li>普通字符串-&gt;decode(‘utf-8’)得到unicode字符串 是正确的</li><li>对<code>unicode</code>字符串<code>decode(&#39;utf-8&#39;)</code> 是错误的!!</li><li>对普通字符串<code>encode(&#39;utf-8&#39;)</code> 也是错误的!!<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br>foo = <span class="hljs-string">u&#x27;中&#x27;</span>  <span class="hljs-comment"># unicode字符串</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">repr</span>(foo)  <span class="hljs-comment"># u&#x27;\u4e2d&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">len</span>(foo)   <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">repr</span>(foo.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))  <span class="hljs-comment"># &#x27;\xe4\xb8\xad&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">len</span>(foo.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))   <span class="hljs-comment"># 3</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="三、为了全部统一使用utf-8-我们应该做什么-–python和mysql之间的编码问题"><a href="#三、为了全部统一使用utf-8-我们应该做什么-–python和mysql之间的编码问题" class="headerlink" title="三、为了全部统一使用utf-8,我们应该做什么?–python和mysql之间的编码问题"></a>三、为了全部统一使用utf-8,我们应该做什么?–python和mysql之间的编码问题</h2><ul><li>首先在python文件首行添加<code># coding=utf-8</code></li><li>连接数据库时,指定<code>charset=utf-8</code></li><li>连接数据库后,立即执行<code>set names utf-8</code></li><li>mysql的配置文件中,理论上是不需要更改的(在每一处需要指定字符集的地方都显示的指定utf-8),但为避免疏漏出错,你需要<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[mysqld]<br>character-set-server=utf8<br>collation-server=utf8_general_ci<br></code></pre></td></tr></table></figure><h2 id="四、-Incorrect-string-value-39-xF0-x9F-x98-x82-39-for-column-或者-Invalid-utf8-character-string-39-F09F98-39"><a href="#四、-Incorrect-string-value-39-xF0-x9F-x98-x82-39-for-column-或者-Invalid-utf8-character-string-39-F09F98-39" class="headerlink" title="四、 Incorrect string value: &#39;\xF0\x9F\x98\x82&#39; for column ... 或者 Invalid utf8 character string: &#39;F09F98&#39;"></a>四、 <code>Incorrect string value: &#39;\xF0\x9F\x98\x82&#39; for column ...</code> 或者 <code>Invalid utf8 character string: &#39;F09F98&#39;</code></h2>这是Mysql在处理四字节的<code>utf-8</code>字符串造成的错误.<code>Mysql&gt;=5.5</code>开始,声称解决了这个问题:增加了一个叫做<code>utf8mb4</code>的编码.utf8mb4是扩充之后的unicode,实际上还是utf8,同php、python2.7中的utf8.</li></ul><p>换句话说,若需要支持<code>utf8mb4</code>,在php和python中你不需要做任何更改,仍然正常使用<code>utf-8</code>即可;但是在mysql中你需要: <strong>在建表语句中明确表示使用<code>utf8mb4</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> demo_douban_book.all_books (<br>    ... ...<br>)engine<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">collate</span> utf8mb4_unicode_ci;<br></code></pre></td></tr></table></figure><p>需要特别注意的是, 使用了utf8mb4之后,会对索引产生影响(mysql对索引有最大字节长度限制,而使用utf8mb4在相同字节长度下字符个数却少了)</p><p>另外,如果遇到了<code>LookupError: unknown encoding: utf8mb4</code>这个错误,连接数据库之前:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> codecs<br>codecs.register(<span class="hljs-keyword">lambda</span> name: codecs.lookup(<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;utf8mb4&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p>因为根本没有utf8mb4这种东西,需要给它加个别名,告诉python<code>utf8mb4</code>就是<code>utf-8</code></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel队列的使用(五)-dig-into-source</title>
      <link href="/2016/07/07/2016-laravel%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8-%E4%BA%94-dig-into-source/"/>
      <url>/2016/07/07/2016-laravel%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8-%E4%BA%94-dig-into-source/</url>
      
        <content type="html"><![CDATA[<h2 id="Laravel队列源代码解析"><a href="#Laravel队列源代码解析" class="headerlink" title="Laravel队列源代码解析"></a>Laravel队列源代码解析</h2><p>这边文章中,将简单梳理一下Laravel队列的源代码,主要弄清楚代码的执行流.</p><p>我们将从消费队列的两个终端命令开始并以<code>queue:work</code>为重点</p><h4 id="一、-artisan-queue-listen-–timeout-30-–tries-3"><a href="#一、-artisan-queue-listen-–timeout-30-–tries-3" class="headerlink" title="一、./artisan queue:listen –timeout=30 –tries=3"></a>一、./artisan queue:listen –timeout=30 –tries=3</h4><p>首先打开项目根下的<code>artisan</code>文件,可以看到调用了<code>Illuminate\Console\Kernel</code>对象的handle()方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$kernel</span> = <span class="hljs-variable">$app</span>-&gt;<span class="hljs-title function_ invoke__">make</span>(<span class="hljs-title class_">Illuminate\Contracts\Console\Kernel</span>::<span class="hljs-variable language_">class</span>);<br><br><span class="hljs-variable">$status</span> = <span class="hljs-variable">$kernel</span>-&gt;<span class="hljs-title function_ invoke__">handle</span>(<br>    <span class="hljs-variable">$input</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Symfony\Component\Console\Input\ArgvInput</span>,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Symfony\Component\Console\Output\ConsoleOutput</span><br>);<br><br></code></pre></td></tr></table></figure><p>定位到<code>Illuminate\Console\Kernel::handle()</code>函数, try-catch中的主代码只有两行.其中<code>$this-&gt;bootstrap()</code>启动/绑定/延迟启动 一些系统服务.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">bootstrap</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getArtisan</span>()-&gt;<span class="hljs-title function_ invoke__">run</span>(<span class="hljs-variable">$input</span>, <span class="hljs-variable">$output</span>);<br></code></pre></td></tr></table></figure><p>继续定位到<code>getArtisan()</code>函数, 这里实例化了一个<code>Artisan</code>对象并返回.结合上面的代码,知道这里依次执行了<code>Artisan::resolveCommands()</code>和<code>Artisan::run()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Application</span> <span class="hljs-keyword">as</span> <span class="hljs-title">Artisan</span>;<br>...<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$this</span>-&gt;artisan)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;artisan = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Artisan</span>(<span class="hljs-variable language_">$this</span>-&gt;app, <span class="hljs-variable language_">$this</span>-&gt;events, <span class="hljs-variable language_">$this</span>-&gt;app-&gt;<span class="hljs-title function_ invoke__">version</span>()))<br>                        -&gt;<span class="hljs-title function_ invoke__">resolveCommands</span>(<span class="hljs-variable">$this</span>-&gt;commands);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;artisan;<br></code></pre></td></tr></table></figure><p>继续dig, 在<code>Artisan</code>的父类<code>Symfony\Component\Console\Application as SymfonyApplication</code>中找到<code>run</code>方法</p><p><code>run</code>方法中<code>$exitCode = $this-&gt;doRun($input, $output);</code></p><p><code>doRun</code>方法中<code>$exitCode = $this-&gt;doRunCommand($command, $input, $output);</code></p><p><code>doRunCommand</code>方法中<code>$exitCode = $command-&gt;run($input, $output);</code></p><p>到这里,看到调用了$command对象的run方法.$command来自<code>doRun</code>方法中<code>$command = $this-&gt;find($name);</code>.这里不再继续调试,直接给出$command对象的一些信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php">Illuminate\Queue\Console\ListenCommand &#123;<span class="hljs-comment">#634</span><br>  <span class="hljs-comment">#name: &quot;queue:listen&quot;</span><br>  <span class="hljs-comment">#description: &quot;Listen to a given queue&quot;</span><br>  <span class="hljs-comment">#listener: Illuminate\Queue\Listener &#123;#635</span><br>    <span class="hljs-comment">#environment: null</span><br>    <span class="hljs-comment">#sleep: 3</span><br>    <span class="hljs-comment">#maxTries: 0</span><br>    <span class="hljs-comment">#workerCommand: &quot;&#x27;/usr/bin/php5&#x27; &#x27;artisan&#x27; queue:work %s --queue=%s --delay=%s --memory=%s --sleep=%s --tries=%s&quot;</span><br>    <span class="hljs-comment">#outputHandler: null</span><br>  &#125;<br>... ...<br></code></pre></td></tr></table></figure><p>追踪<code>Illuminate\Queue\Console\ListenCommand::fire()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable language_">$this</span>-&gt;listener-&gt;<span class="hljs-title function_ invoke__">listen</span>(<br>    <span class="hljs-variable">$connection</span>, <span class="hljs-variable">$queue</span>, <span class="hljs-variable">$delay</span>, <span class="hljs-variable">$memory</span>, <span class="hljs-variable">$timeout</span><br>);<br></code></pre></td></tr></table></figure><p>其中的<code>$this-&gt;listener</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">Illuminate\Queue\Listener &#123;<span class="hljs-comment">#635</span><br>  <span class="hljs-comment">#environment: &quot;local&quot;</span><br>  <span class="hljs-comment">#sleep: 3</span><br>  <span class="hljs-comment">#maxTries: &quot;3&quot;</span><br>  <span class="hljs-comment">#workerCommand: &quot;&#x27;/usr/bin/php5&#x27; &#x27;artisan&#x27; queue:work %s --queue=%s --delay=%s --memory=%s --sleep=%s --tries=%s&quot;</span><br>  <span class="hljs-comment">#outputHandler: Closure &#123;#22</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span>: &quot;<span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">ListenCommand</span>&quot;</span><br><span class="hljs-class">    <span class="hljs-title">this</span>: <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">ListenCommand</span> </span>&#123;<span class="hljs-comment">#634 …&#125;</span><br>    parameters: <span class="hljs-keyword">array</span>:<span class="hljs-number">2</span> [<br>      <span class="hljs-string">&quot;<span class="hljs-subst">$type</span>&quot;</span> =&gt; []<br>      <span class="hljs-string">&quot;<span class="hljs-subst">$line</span>&quot;</span> =&gt; []<br>    ]<br>    line: <span class="hljs-string">&quot;107 to 109&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>追踪到<code>listen</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listen</span>(<span class="hljs-params"><span class="hljs-variable">$connection</span>, <span class="hljs-variable">$queue</span>, <span class="hljs-variable">$delay</span>, <span class="hljs-variable">$memory</span>, <span class="hljs-variable">$timeout</span> = <span class="hljs-number">60</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$process</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">makeProcess</span>(<span class="hljs-variable">$connection</span>, <span class="hljs-variable">$queue</span>, <span class="hljs-variable">$delay</span>, <span class="hljs-variable">$memory</span>, <span class="hljs-variable">$timeout</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">runProcess</span>(<span class="hljs-variable">$process</span>, <span class="hljs-variable">$memory</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>追踪<code>runProcess</code>函数,找到Process类的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"><span class="hljs-variable">$callback</span> = <span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">start</span>(<span class="hljs-variable">$callback</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">wait</span>();<br>&#125;<br><span class="hljs-comment"># start函数中,最终看到执行了命令</span><br><span class="hljs-string">&#x27;/usr/bin/php5&#x27;</span> <span class="hljs-string">&#x27;artisan&#x27;</span> queue:work <span class="hljs-string">&#x27;&#x27;</span> --queue=<span class="hljs-string">&#x27;default&#x27;</span> --delay=<span class="hljs-number">0</span> --memory=<span class="hljs-number">128</span> --sleep=<span class="hljs-number">3</span> --tries=<span class="hljs-number">3</span> --env=<span class="hljs-string">&#x27;local&#x27;</span><br></code></pre></td></tr></table></figure><p>到这里,已经很清楚了.<code>./artisan queue:listen</code>启动了一个死循环, 不停的尝试执行<code>./artisan queue:work</code></p><h4 id="二、-artisan-queue-work-–daemon-–tries-3"><a href="#二、-artisan-queue-work-–daemon-–tries-3" class="headerlink" title="二、./artisan queue:work –daemon –tries=3"></a>二、./artisan queue:work –daemon –tries=3</h4><p>同上, 不同之处在于, <code>doRunCommand</code>方法中<code>$exitCode = $command-&gt;run($input, $output);</code>中$command</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">Illuminate\Queue\Console\WorkCommand &#123;<span class="hljs-comment">#610</span><br>  <span class="hljs-comment">#name: &quot;queue:work&quot;</span><br>  <span class="hljs-comment">#description: &quot;Process the next job on a queue&quot;</span><br>  <span class="hljs-comment">#worker: Illuminate\Queue\Worker &#123;#611</span><br>... ...<br></code></pre></td></tr></table></figure><p>追踪<code>Illuminate\Queue\Console\WorkCommand::fire()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$response</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">runWorker</span>(<br>    <span class="hljs-variable">$connection</span>, <span class="hljs-variable">$queue</span>, <span class="hljs-variable">$delay</span>, <span class="hljs-variable">$memory</span>, <span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">option</span>(<span class="hljs-string">&#x27;daemon&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runWorker</span>(<span class="hljs-params"><span class="hljs-variable">$connection</span>, <span class="hljs-variable">$queue</span>, <span class="hljs-variable">$delay</span>, <span class="hljs-variable">$memory</span>, <span class="hljs-variable">$daemon</span> = <span class="hljs-literal">false</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$daemon</span>) &#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;worker-&gt;<span class="hljs-title function_ invoke__">setCache</span>(<span class="hljs-variable">$this</span>-&gt;laravel[<span class="hljs-string">&#x27;cache&#x27;</span>]-&gt;<span class="hljs-title function_ invoke__">driver</span>());<br><br>        <span class="hljs-variable language_">$this</span>-&gt;worker-&gt;<span class="hljs-title function_ invoke__">setDaemonExceptionHandler</span>(<br>            <span class="hljs-variable">$this</span>-&gt;laravel[<span class="hljs-string">&#x27;Illuminate\Contracts\Debug\ExceptionHandler&#x27;</span>]<br>        );<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;worker-&gt;<span class="hljs-title function_ invoke__">daemon</span>(<br>            <span class="hljs-variable">$connection</span>, <span class="hljs-variable">$queue</span>, <span class="hljs-variable">$delay</span>, <span class="hljs-variable">$memory</span>,<br>            <span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">option</span>(<span class="hljs-string">&#x27;sleep&#x27;</span>), <span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">option</span>(<span class="hljs-string">&#x27;tries&#x27;</span>)<br>        );<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;worker-&gt;<span class="hljs-title function_ invoke__">pop</span>(<br>        <span class="hljs-variable">$connection</span>, <span class="hljs-variable">$queue</span>, <span class="hljs-variable">$delay</span>,<br>        <span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">option</span>(<span class="hljs-string">&#x27;sleep&#x27;</span>), <span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">option</span>(<span class="hljs-string">&#x27;tries&#x27;</span>)<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p><code>runWorker</code>中的<code>$this-&gt;worker</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">Illuminate\Queue\Worker &#123;<span class="hljs-comment">#611</span><br>  <span class="hljs-comment">#manager: Illuminate\Queue\QueueManager &#123;#612</span><br>    <span class="hljs-comment">#app: Illuminate\Foundation\Application &#123;#3</span><br></code></pre></td></tr></table></figure><p>首先对于不带<code>--daemon</code>的命令,那么上文中最后提到<code>./artisan queue:work</code>执行的就是<code>$this-&gt;worker-&gt;pop</code>.从队列列表中pop一个任务出来执行.执行完成之后sleep若干秒,进入while(true)死循环,无限重试pop.或者在内存使用超过<code>--memory</code>限制时,调用<code>die</code>终止进程.</p><p>然后, 继续dig <code>--daemon</code>模式, 找到<code>Illuminate\Queue\Worker::daemon()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">daemon</span>(<span class="hljs-params"><span class="hljs-variable">$connectionName</span>, <span class="hljs-variable">$queue</span> = <span class="hljs-literal">null</span>, <span class="hljs-variable">$delay</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$memory</span> = <span class="hljs-number">128</span>, <span class="hljs-variable">$sleep</span> = <span class="hljs-number">3</span>, <span class="hljs-variable">$maxTries</span> = <span class="hljs-number">0</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$lastRestart</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getTimestampOfLastQueueRestart</span>();<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">daemonShouldRun</span>()) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">runNextJobForDaemon</span>(<br>                <span class="hljs-variable">$connectionName</span>, <span class="hljs-variable">$queue</span>, <span class="hljs-variable">$delay</span>, <span class="hljs-variable">$sleep</span>, <span class="hljs-variable">$maxTries</span><br>            );<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-variable">$sleep</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">memoryExceeded</span>(<span class="hljs-variable">$memory</span>) || <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">queueShouldRestart</span>(<span class="hljs-variable">$lastRestart</span>)) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">stop</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里还是一个死循环.依次执行</p><ul><li>尝试<code>daemonShouldRun()</code>, 若网站启用了<code>maintaince</code>模式则返回FALSE,否则广播<code>&#39;illuminate.queue.looping&#39;</code>事件</li><li><code>runNextJobForDaemon()</code>函数中,仍然是尝试从队列列表中pop任务出来执行</li><li>若<code>daemonShouldRun()</code>检测到FALSE, sleep若干秒</li><li>内存检测,在内存使用超过<code>--memory</code>限制时,调用<code>die</code>终止进程.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel队列的使用(四)-beanstalk-driver</title>
      <link href="/2016/07/07/2016-laravel%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%9B%9B-beanstalk-driver/"/>
      <url>/2016/07/07/2016-laravel%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%9B%9B-beanstalk-driver/</url>
      
        <content type="html"><![CDATA[<h2 id="Beanstalk驱动的队列示例"><a href="#Beanstalk驱动的队列示例" class="headerlink" title="Beanstalk驱动的队列示例"></a>Beanstalk驱动的队列示例</h2><p>在开始介绍如何在Laravel中使用Beanstalkd之前,我们先安装一个Beanstalkd的Web版管理工具.在文章的最后,会介绍队列中常用的其他几个api.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># composer会将Beanstalk Console以及它的所有依赖库安装到beanstalk_console目录.</span><br>composer create-project ptrofimov/beanstalk_console -s dev beanstalk_console<br><span class="hljs-comment"># 启动管理后台服务</span><br>php -S localhost:7654 -t public<br><span class="hljs-comment"># 启动beanstalkd</span><br>beanstalkd -l 127.0.0.1 -p 11300 &amp;<br></code></pre></td></tr></table></figure><p>Step0 首先,一定确保beanstalkd已经启动且端口是3000, 一定确保beanstalk_console已经启动.通过浏览器访问localhost:7654.点击Add server,添加一个beanstalkd服务器.</p><p>Step1 在.env中设置<code>QUEUE_DRIVER=beanstalkd</code> ,启用beanstalkd驱动</p><p>Step2 将<code>DemoJob::register()</code>中抛异常的测试代码注释掉,然后通过浏览器访问api,生产一个队列任务.在beanstalk_console中,你将看到:<br><img src="http://images.straysh.com/laravel_beanstalkd_001.png" alt="beanstalkd_01"></p><p>Step3 消费队列不需要额外的代码编写,只需要在终端执行以下代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./artisan queue:listen --<span class="hljs-built_in">timeout</span>=30 --tries=3<br>或者<br>./artisan queue:work --daemon --tries=3<br></code></pre></td></tr></table></figure><p>Step4 在管理后台可以看到,队列任务已经被消费掉了</p><h2 id="Laravel队列常用API"><a href="#Laravel队列常用API" class="headerlink" title="Laravel队列常用API"></a>Laravel队列常用API</h2><p>在<code>DemoJob</code>类中,可以调用以下API,更加精确的控制队列操作</p><ul><li>$this-&gt;relase($waitSeconds) $waitSeconds秒后,将任务重新压入队列.(压入队列后任务不一定立即执行,取决于优先级等其他因素)</li><li>$this-&gt;delete() 将任务从队列中移除.如本例中当检查email字段发现其格式不正确时,就应当删除该队列任务并return</li><li>$this&gt;attempts() 这个函数中包含了最大尝试的逻辑,最大尝试次数是通过命令启动队列时传入的<code>--tries=3</code>.通常这个api不需要手动调用,除非你要定制该函数.</li></ul><p>另外,通过<code>$this-&gt;job</code>可以拿到<code>Illuminate\Queue\Jobs\BeanstalkdJob</code>对象,从而调用独属于Beanstalkd的api.具体的api可以查看源代码.<br><img src="http://images.straysh.com/laravel_beanstalkd_002.png" alt="beanstalkd_02"></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel队列的使用(三)-beanstalk-driver</title>
      <link href="/2016/07/06/2016-laravel%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8-%E4%B8%89-beanstalk-driver/"/>
      <url>/2016/07/06/2016-laravel%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8-%E4%B8%89-beanstalk-driver/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库驱动的队列示例"><a href="#数据库驱动的队列示例" class="headerlink" title="数据库驱动的队列示例"></a>数据库驱动的队列示例</h2><p>这次增加对失败的队列任务的处理,详细内容从Step5开始</p><p>Step1 在.env中设置<code>QUEUE_DRIVER=database</code> ,启用数据库驱动</p><p>Step2 生成jobs表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">php artisan queue:table<br>php artisan migrate<br></code></pre></td></tr></table></figure><p>Step3 其他代码不变.现在通过浏览器访问api, 生产一个测试队列任务,在jobs表中:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> jobs \G<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>          id: <span class="hljs-number">1</span><br>       queue: <span class="hljs-keyword">default</span><br>     payload: &#123;&quot;job&quot;:&quot;Illuminate\\Queue\\CallQueuedHandler@call&quot;,&quot;data&quot;:&#123;&quot;command&quot;:&quot;O:16:\&quot;App\\Jobs\\DemoJob\&quot;:6:&#123;s:6:\&quot;mailer\&quot;;N;s:5:\&quot;queue\&quot;;N;s:5:\&quot;delay\&quot;;N;s:6:\&quot;\u0000<span class="hljs-operator">*</span>\u0000job\&quot;;N;s:8:\&quot;username\&quot;;s:8:\&quot;username\&quot;;s:5:\&quot;email\&quot;;s:19:\&quot;jobhancao<span class="hljs-variable">@gmail</span>.com\&quot;;&#125;&quot;&#125;&#125;<br>    attempts: <span class="hljs-number">0</span><br>    reserved: <span class="hljs-number">0</span><br> reserved_at: <span class="hljs-keyword">NULL</span><br>available_at: <span class="hljs-number">1467793393</span><br>  created_at: <span class="hljs-number">1467793393</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>Step4 消费队列不需要额外的代码编写,只需要在终端执行以下代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./artisan queue:listen --<span class="hljs-built_in">timeout</span>=30 --tries=3<br>或者<br>./artisan queue:work --daemon --tries=3<br></code></pre></td></tr></table></figure><p><code>queue:work</code>若以–daemon方式启动,将不需要重复绑定和注册框架的服务,CPU利用率更高.但此模式下,如文件句柄、画图句柄一定要及时释放,避免内存溢出.</p><p>Step5 对失败队列的处理.下面我们来模拟队列失败的场景.在这之前,先执行以下命令创建<code>failed_jobs</code>表:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php artisan queue:failed-table<br></code></pre></td></tr></table></figure><p>Step6 在<code>DemoJob::register()</code>函数中手动抛出异常,模拟代码出现bug</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//发送注册邮件</span><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">\Exception</span>(<span class="hljs-string">&quot;测试异常&quot;</span>);<br>    <span class="hljs-comment">// 为简便我们把邮件写入log中</span><br>    <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&quot;mail to <span class="hljs-subst">&#123;$this-&gt;username&#125;</span>/<span class="hljs-subst">&#123;$this-&gt;email&#125;</span> sent by DemoJob&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Step7 重复Step3-Step4 生产一个队列任务并消费之</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$./artisan queue:listen --<span class="hljs-built_in">timeout</span>=30 --tries=3            <br>  [Exception]  <br>  测试异常     <br>                              <br>  [Exception]  <br>  测试异常     <br>                             <br>  [Exception]  <br>  测试异常     <br>              <br>Failed: Illuminate\Queue\CallQueuedHandler@call<br></code></pre></td></tr></table></figure><p>Step8 在<code>failed_jobs</code>表中:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> failed_jobs \G<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>        id: <span class="hljs-number">1</span><br>connection: database<br>     queue: <span class="hljs-keyword">default</span><br>   payload: &#123;&quot;job&quot;:&quot;Illuminate\\Queue\\CallQueuedHandler@call&quot;,&quot;data&quot;:&#123;&quot;command&quot;:&quot;O:16:\&quot;App\\Jobs\\DemoJob\&quot;:6:&#123;s:6:\&quot;mailer\&quot;;N;s:5:\&quot;queue\&quot;;N;s:5:\&quot;delay\&quot;;N;s:6:\&quot;\u0000<span class="hljs-operator">*</span>\u0000job\&quot;;N;s:8:\&quot;username\&quot;;s:8:\&quot;username\&quot;;s:5:\&quot;email\&quot;;s:19:\&quot;jobhancao<span class="hljs-variable">@gmail</span>.com\&quot;;&#125;&quot;&#125;&#125;<br> failed_at: <span class="hljs-number">2016</span><span class="hljs-number">-07</span><span class="hljs-number">-06</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">04</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>Step9 <code>failed_job</code>表中记录着失败的队列任务,在生产环境中可以用来debug, 对于已经失败的任务,执行以下命令重新将之压入队列并消费:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./artisan queue:retry all<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel队列的使用(二)-database-driver</title>
      <link href="/2016/07/06/2016-laravel%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8-%E4%BA%8C-database-driver/"/>
      <url>/2016/07/06/2016-laravel%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8-%E4%BA%8C-database-driver/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库驱动的队列示例"><a href="#数据库驱动的队列示例" class="headerlink" title="数据库驱动的队列示例"></a>数据库驱动的队列示例</h2><p>这次增加对失败的队列任务的处理,详细内容从Step5开始</p><p>Step1 在.env中设置<code>QUEUE_DRIVER=database</code> ,启用数据库驱动</p><p>Step2 生成jobs表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">php artisan queue:table<br>php artisan migrate<br></code></pre></td></tr></table></figure><p>Step3 其他代码不变.现在通过浏览器访问api, 生产一个测试队列任务,在jobs表中:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> jobs \G<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>          id: <span class="hljs-number">1</span><br>       queue: <span class="hljs-keyword">default</span><br>     payload: &#123;&quot;job&quot;:&quot;Illuminate\\Queue\\CallQueuedHandler@call&quot;,&quot;data&quot;:&#123;&quot;command&quot;:&quot;O:16:\&quot;App\\Jobs\\DemoJob\&quot;:6:&#123;s:6:\&quot;mailer\&quot;;N;s:5:\&quot;queue\&quot;;N;s:5:\&quot;delay\&quot;;N;s:6:\&quot;\u0000<span class="hljs-operator">*</span>\u0000job\&quot;;N;s:8:\&quot;username\&quot;;s:8:\&quot;username\&quot;;s:5:\&quot;email\&quot;;s:19:\&quot;jobhancao<span class="hljs-variable">@gmail</span>.com\&quot;;&#125;&quot;&#125;&#125;<br>    attempts: <span class="hljs-number">0</span><br>    reserved: <span class="hljs-number">0</span><br> reserved_at: <span class="hljs-keyword">NULL</span><br>available_at: <span class="hljs-number">1467793393</span><br>  created_at: <span class="hljs-number">1467793393</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>Step4 消费队列不需要额外的代码编写,只需要在终端执行以下代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./artisan queue:listen --<span class="hljs-built_in">timeout</span>=30 --tries=3<br>或者<br>./artisan queue:work --daemon --tries=3<br></code></pre></td></tr></table></figure><p><code>queue:work</code>若以–daemon方式启动,将不需要重复绑定和注册框架的服务,CPU利用率更高.但此模式下,如文件句柄、画图句柄一定要及时释放,避免内存溢出.</p><p>Step5 对失败队列的处理.下面我们来模拟队列失败的场景.在这之前,先执行以下命令创建<code>failed_jobs</code>表:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php artisan queue:failed-table<br></code></pre></td></tr></table></figure><p>Step6 在<code>DemoJob::register()</code>函数中手动抛出异常,模拟代码出现bug</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//发送注册邮件</span><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">\Exception</span>(<span class="hljs-string">&quot;测试异常&quot;</span>);<br>    <span class="hljs-comment">// 为简便我们把邮件写入log中</span><br>    <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&quot;mail to <span class="hljs-subst">&#123;$this-&gt;username&#125;</span>/<span class="hljs-subst">&#123;$this-&gt;email&#125;</span> sent by DemoJob&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Step7 重复Step3-Step4 生产一个队列任务并消费之</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$./artisan queue:listen --<span class="hljs-built_in">timeout</span>=30 --tries=3            <br>  [Exception]  <br>  测试异常     <br>                              <br>  [Exception]  <br>  测试异常     <br>                             <br>  [Exception]  <br>  测试异常     <br>              <br>Failed: Illuminate\Queue\CallQueuedHandler@call<br></code></pre></td></tr></table></figure><p>Step8 在<code>failed_jobs</code>表中:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> failed_jobs \G<br><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span> <span class="hljs-number">1.</span> <span class="hljs-type">row</span> <span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>        id: <span class="hljs-number">1</span><br>connection: database<br>     queue: <span class="hljs-keyword">default</span><br>   payload: &#123;&quot;job&quot;:&quot;Illuminate\\Queue\\CallQueuedHandler@call&quot;,&quot;data&quot;:&#123;&quot;command&quot;:&quot;O:16:\&quot;App\\Jobs\\DemoJob\&quot;:6:&#123;s:6:\&quot;mailer\&quot;;N;s:5:\&quot;queue\&quot;;N;s:5:\&quot;delay\&quot;;N;s:6:\&quot;\u0000<span class="hljs-operator">*</span>\u0000job\&quot;;N;s:8:\&quot;username\&quot;;s:8:\&quot;username\&quot;;s:5:\&quot;email\&quot;;s:19:\&quot;jobhancao<span class="hljs-variable">@gmail</span>.com\&quot;;&#125;&quot;&#125;&#125;<br> failed_at: <span class="hljs-number">2016</span><span class="hljs-number">-07</span><span class="hljs-number">-06</span> <span class="hljs-number">16</span>:<span class="hljs-number">48</span>:<span class="hljs-number">04</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>Step9 <code>failed_job</code>表中记录着失败的队列任务,在生产环境中可以用来debug, 对于已经失败的任务,执行以下命令重新将之压入队列并消费:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./artisan queue:retry all<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel队列的使用(一)</title>
      <link href="/2016/07/06/2016-laravel%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8-%E4%B8%80/"/>
      <url>/2016/07/06/2016-laravel%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>一些对数据一致性要求不高的场景下(如行为日志、各种统计数字如浏览数/评论数),可以使用事件/监听将这部分代码从主逻辑上剥离出来.</p><p>优点有二:①提高主逻辑的效率/降低主逻辑的复杂度 ②这部分异步代码执行失败不会对中断主逻辑的执行.</p><p>在Lravel中使用event/listener很容易实现.但有时我们需要延时任务,例如用户注册成功5分钟后给用户发送一封邮件通知.这时就需要引入延时队列了.</p><p>参考: <a href="/article/laravel_event_vs_jobs">Lavavel中的事件和任务, 各在什么场景下使用?</a></p><h2 id="一个同步执行的队列示例"><a href="#一个同步执行的队列示例" class="headerlink" title="一个同步执行的队列示例"></a>一个同步执行的队列示例</h2><p>同event一样,在<code>app/config/queue.php</code>中<code>&#39;default&#39; =&gt; env(&#39;QUEUE_DRIVER&#39;, &#39;sync&#39;),</code> 设置默认的队列驱动.</p><p>当前Lravel支持的驱动列表在<code>app/config/queue.php::connections</code>数组中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">sync       =&gt; 同步模式,在主逻辑中直接执行,便于调试  <br>database   =&gt;  使用mysql作为驱动,需要使用`./artisan queue:table &amp;&amp; ./artisan migrate`创建jobs表<br>beanstalkd =&gt;  <span class="hljs-title function_ invoke__">beanstalkd</span>(一个独立的队列服务)作为驱动, 在下篇文章中将详细讲解如何安装并使用beanstalkd<br>sqs        =&gt;  Amazon SQS: aws/aws-sdk-php ~<span class="hljs-number">3.0</span><br>iron       =&gt;  类似sql的云端队列服务<br>redis      =&gt;  Redis: predis/predis ~<span class="hljs-number">1.0</span><br></code></pre></td></tr></table></figure><p>Step1 在.env中设置<code>QUEUE_DRIVER=sync</code> 或者删除该行,启用同步队列</p><p>Step2 在<code>app/Jobs</code>目录中新建<code>BaseJob.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Jobs</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">ShouldQueue</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">InteractsWithQueue</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Bus</span>\<span class="hljs-title">SelfHandling</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseJob</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Job</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SelfHandling</span>, <span class="hljs-title">ShouldQueue</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">InteractsWithQueue</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Step3 在<code>app/Jobs</code>目录中新建<code>DemoJob.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Jobs</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Mail</span>\<span class="hljs-title">Mailer</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Log</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoJob</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseJob</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mailer</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$email</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;email = <span class="hljs-variable">$email</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params">Mailer <span class="hljs-variable">$mailer</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;mailer = <span class="hljs-variable">$mailer</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">register</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">TRUE</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">//发送注册邮件</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 为简便我们把邮件写入log中</span><br>        <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">info</span>(<span class="hljs-string">&quot;mail sent by DemoJob&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Step4 生产一个队列任务.在任意可访问的api中添加如下方法,</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Jobs</span>\<span class="hljs-title">DemoJob</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIndex</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">dd</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">dispatch</span>( <span class="hljs-keyword">new</span> <span class="hljs-title class_">DemoJob</span>(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;jobhancao@gmail.com&quot;</span>) ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>log输出如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[2016-07-06 16:07:30] local.INFO: mail to username/jobhancao@gmail.com sent by DemoJob<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Samba杂疑</title>
      <link href="/2016/06/13/2016-Samba%E6%9D%82%E7%96%91/"/>
      <url>/2016/06/13/2016-Samba%E6%9D%82%E7%96%91/</url>
      
        <content type="html"><![CDATA[<ul><li>现象:Window连接samba服务器正常, 其他linux客户机(centos、Ubuntu、Mac)经常timeout.<br>解决方法:在samba服务器上,检查<code>/etc/sysconfig/network</code>以及<code>/etc/hosts</code>两个文件,将主机名-ip映射加入.</li></ul><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">root@y125 ~]$cat /etc/hosts<br>127.0.0.1   y125 localhost<br>::1         y125 localhost<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文分词</title>
      <link href="/2015/11/18/2015-%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/"/>
      <url>/2015/11/18/2015-%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="http://sewm.pku.edu.cn/QA/reference/ICTCLAS/FreeICTCLAS/documents.html">ICTCLAS(中科院)</a></li><li><a href="https://github.com/hightman/scws">phpscws</a></li><li><a href="http://code.google.com/p/robbe/">robbe php</a> <a href="http://blog.aboutc.net/php/59/php-installation-robbe-chinese-word-extension">PHP 安装 Robbe 中文分词扩展</a></li><li><a href="http://code.google.com/p/httpcws/">phpcws</a></li></ul><h1 id="php-scws-中文分词-凡有需要指定编码之处均为utf8"><a href="#php-scws-中文分词-凡有需要指定编码之处均为utf8" class="headerlink" title="php scws 中文分词 (凡有需要指定编码之处均为utf8)"></a>php scws 中文分词 (凡有需要指定编码之处均为utf8)</h1><h4 id="github地址hightman-scws"><a href="#github地址hightman-scws" class="headerlink" title="github地址hightman/scws"></a>github地址<a href="https://github.com/hightman/scws">hightman/scws</a></h4><h4 id="下载源码包-不要直接clone-github源代码-下载release分支"><a href="#下载源码包-不要直接clone-github源代码-下载release分支" class="headerlink" title="下载源码包(不要直接clone github源代码,下载release分支)"></a>下载源码包(不要直接clone github源代码,下载release分支)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">wget -q -O - http://www.xunsearch.com/scws/down/scws-1.2.1.tar.bz2 | tar xjf -<br></code></pre></td></tr></table></figure><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd path/to/scws-1.2.1<br>autoconf<br>./configre --prefix=path/to/php_scws<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><h4 id="编译php扩展"><a href="#编译php扩展" class="headerlink" title="编译php扩展"></a>编译php扩展</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd phpext<br>phpize<br>./configure --with-scws=path/to/php_scws<br>make<br>make install<br></code></pre></td></tr></table></figure><p>新增一个php_scws.ini的php模块配置项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo vim /etc/php5/modules-available/php_scws.ini<br><br>[scws]<br>; 注意请检查 php.ini 中的 extension_dir 的设定值是否正确, 否则请将 extension_dir 设为空，<br>; 再把 extension = scws.so 或 php_scws.dll 指定绝对路径。<br>extension = scws.so<br>scws.default.charset = utf8<br>scws.default.fpath = path/to/etc<br></code></pre></td></tr></table></figure><p>重启apache之后,若<code>phpinfo()</code>中有scws但<code>php -m|grep scws</code>没有,需要在<code>/etc/php5/cli/</code>中也增加一个php_scws.ini配置文件</p><p><a href="https://github.com/hightman/scws/blob/master/phpext/README.md">php接口以及demo</a></p><h4 id="下载词典文件"><a href="#下载词典文件" class="headerlink" title="下载词典文件"></a>下载词典文件</h4><p>词典文件下载地址<a href="http://www.xunsearch.com/scws/download.php">http://www.xunsearch.com/scws/download.php</a>, [简体中文(UTF-8) (3.9MB，28万词，2015/04/02更新)] .</p><p>将加压后的<code>dict.utf8.xdb</code>文件复制到<code>/path/to/php_scws/etc/</code>目录下,并<code>chmod a+r ./*</code></p><p>注:压缩包内有两个php文件<code>dump_xdb_file.php</code>和<code>make_xdb_file.php</code>,已经失效了.我测试的时候将源词典解压再压缩回去,测试样例’陈凯歌’跑失败了.</p><h4 id="命令行测试"><a href="#命令行测试" class="headerlink" title="命令行测试"></a>命令行测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">scws -c utf8 -i cityname.txt -d /home/softwares/php_scws/etc/dict.utf8.xdb:/home/softwares/php_scws/etc/food.utf8.xdb <br>鱼香肉丝 <br><br>陈凯歌 并 不是 《 无极 》 的 唯一 著作权人 ， 一 部 电影 的 整体 版权 归 电影 制片厂 所有 。 <br><br>一 部 电影 的 作者 包括 导演 、 摄影 、 编剧 等 创作 人员 ， 这些 创作 人员 对 他们 的 创作 是 有 版权 的 。 不 经过 制片人 授权 ， 其他人 不能 对 电影 做 拷贝 、 发行 、 反映 ， 不能 通过 网络 来 传播 ， 既 不能 把 电影 改编 成 小说 、 连环画 等 其他 艺术 形式 发表 ， 也 不能 把 一 部 几 个 小时 才能 放 完 的 电影 改编 成 半 个 小时 就 能 放 完 的 短片 。 <br><br>著作权 和 版权 在 我国 是 同一个 概念 ， 是 法律 赋予 作品 创作者 的 专有 权利 。 所谓 专有 权利 就是 没有 经过 权利人 许可 又 不是 法律 规定 的 例外 ， 要 使用 这个 作品 ， 就 必须 经过 作者 授权 ， 没有 授权 就是 侵权 。<br></code></pre></td></tr></table></figure><h4 id="自定义词典"><a href="#自定义词典" class="headerlink" title="自定义词典"></a>自定义词典</h4><p>自定义词典格式:用\t分隔</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># WORD  TF  IDF ATTR<br>鱼香肉丝    14.018.10n<br></code></pre></td></tr></table></figure><p>生成词典:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">scws-gen-dict -i out/food.txt -o food.utf8.xdb -c utf8<br></code></pre></td></tr></table></figure><h1 id="附-常用中文分词"><a href="#附-常用中文分词" class="headerlink" title="附 常用中文分词"></a>附 常用中文分词</h1><ul><li>哈工大：<a href="http://www.ltp-cloud.com/">语言云（语言技术平台云 LTP-Cloud）</a></li><li>东北大学NiuTrans统计机器翻译系统：<a href="http://www.nlplab.com/NiuPlan/NiuTrans.ch.html">东北大学自然语言处理实验室</a></li><li>中科院张华平博士ICTCLAS ：<a href="http://ictclas.nlpir.org/">NLPIR汉语分词系统</a></li><li>波森科技：<a href="http://bosonnlp.com/">首页 - BosonNLP</a></li><li>结巴：<a href="https://github.com/fxsjy/jieba">fxsjy/jieba · GitHub</a></li><li>Ansj分词：<a href="http://www.nlpcn.org/group">中国自然语言开源组织</a></li></ul><h1 id="附-汉语文本词性标注标记集-北大版"><a href="#附-汉语文本词性标注标记集-北大版" class="headerlink" title="附:汉语文本词性标注标记集(北大版)"></a>附:汉语文本词性标注标记集(北大版)</h1><p>北大标注集：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">代码    名称        帮助记忆的诠释<br> Ag      形语素      形容词性语素。形容词代码为a，语素代码ｇ前面置以A。<br> a       形容词      取英语形容词adjective的第1个字母。<br> ad      副形词      直接作状语的形容词。形容词代码a和副词代码d并在一起。<br> an      名形词      具有名词功能的形容词。形容词代码a和名词代码n并在一起。<br> b       区别词      取汉字“别”的声母。<br> c       连词        取英语连词conjunction的第1个字母。<br> Dg      副语素      副词性语素。副词代码为d，语素代码ｇ前面置以D。<br> d       副词        取adverb的第2个字母，因其第1个字母已用于形容词。<br> e       叹词        取英语叹词exclamation的第1个字母。<br> f       方位词      取汉字“方” 的声母。<br> g       语素        绝大多数语素都能作为合成词的“词根”，取汉字“根”的声母。<br> h       前接成分    取英语head的第1个字母。<br> i       成语        取英语成语idiom的第1个字母。<br> j       简称略语    取汉字“简”的声母。<br> k       后接成分<br> l       习用语      习用语尚未成为成语，有点“临时性”，取“临”的声母。<br> m       数词        取英语numeral的第3个字母，n，u已有他用。<br> Ng      名语素      名词性语素。名词代码为n，语素代码ｇ前面置以N。<br> n       名词        取英语名词noun的第1个字母。<br> nr      人名        名词代码n和“人(ren)”的声母并在一起。<br> ns      地名        名词代码n和处所词代码s并在一起。<br> nt      机构团体    “团”的声母为t，名词代码n和t并在一起。<br> nz      其他专名    “专”的声母的第1个字母为z，名词代码n和z并在一起。 <br> o       拟声词      取英语拟声词onomatopoeia的第1个字母。<br> p       介词        取英语介词prepositional的第1个字母。<br> q       量词        取英语quantity的第1个字母。<br> r       代词        取英语代词pronoun的第2个字母,因p已用于介词。<br> s       处所词      取英语space的第1个字母。<br> Tg      时语素      时间词性语素。时间词代码为t,在语素的代码g前面置以T。<br> t       时间词      取英语time的第1个字母。<br> u       助词        取英语助词auxiliary 的第2个字母,因a已用于形容词。<br> Vg      动语素      动词性语素。动词代码为v。在语素的代码g前面置以V。<br> v       动词        取英语动词verb的第一个字母。<br> vd      副动词      直接作状语的动词。动词和副词的代码并在一起。<br> vn      名动词      指具有名词功能的动词。动词和名词的代码并在一起。<br> w       标点符号   <br> x       非语素字    非语素字只是一个符号，字母x通常用于代表未知数、符号。<br> y       语气词      取汉字“语”的声母。<br> z       状态词      取汉字“状”的声母的前一个字母。<br></code></pre></td></tr></table></figure><p>计算所标注集（V5.0）：<br>0. 说明<br>计算所汉语词性标记集（共计99个，22个一类，66个二类，11个三类）主要用于中国科学院计算技术研究所研制的汉语词法分析器、句法分析器和汉英机器翻译系统。本标记集主要参考了以下词性标记集：</p><ol><li><p>北大《人民日报》语料库词性标记集；</p></li><li><p>北大2002新版词性标记集（草稿）；</p></li><li><p>清华大学汉语树库词性标记集；</p></li><li><p>教育部语用所词性标记集（国家推荐标准草案2002版）；</p></li><li><p>美国宾州大学中文树库（ChinesePennTreeBank）词性标记集；<br>由于计算所的汉语词法分析器主要采用北大《人民日报》语料库进行参数训练，因此本<br>词性标记集主要以北大《人民日报》语料库的词性标记集为蓝本，并参考了北大《汉语语法信息词典》中给出的汉语词的语法信息。<br>本标记集在制定过程中主要考虑了以下几方面的因素：</p></li><li><p>有助于提高汉语词法分析器的切分和标注正确率；</p></li><li><p>有助于提高汉语句法分析器的正确率；</p></li><li><p>有助于汉英机器翻译系统进行翻译；</p></li><li><p>易于从北大《人民日报》语料库词性标记集进行转换；</p></li><li><p>对于语法功能不同的词，在不造成词法分析和句法分析歧义区分困难的情况下，尽可能细分子类。<br>基于以上考虑，我们在标注过程中尽量避免那些容易出错的词性标记，而采用那些不容易出错、而对提高汉语词法句法分析正确率有明显作用的标记。例如，在动词的子类中，我们参考了宾州大学中文树库的做法，把汉语动词“是”和“有”分别做成单独的标记，而没有采用“系动词”的标记。因为同样是“是”这个动词，其句法功能很多，作“系动词”只是其中一种功能，而要区分这些功能是非常困难的，会导致词法分析的正确率下降。<br>在名词子类中，我们区分了“汉语人名”、“日语人名”和“翻译人名”，这不仅仅是因为这三种人名要采用不同的参数进行训练与识别，而且在汉英机器翻译中也要采用不同的分析算法进行翻译。又如，我们把表示时间的“数词＋‘年’”（如“1995年”）合并成一个时间词，而表示年头的“数词＋‘年’”分别标注为“数词”和“量词”，这是因为我们通过实验发现这种区分在词法分析阶段通过统计方法可以达到较高的正确率，而且这种区分对于后续的句法分析和机器翻译有非常重要的作用。<br>对于某些词类（助词和标点符号），基本上是一个封闭集，而这些词类中各个词的语法功能相差很大，在这种情况下，我们尽可能地细分其子类。<br>另外，与其他词性标记集类似，在我们的标记体系中，小类只是大类中一些有必要区分的一些特例，但小类的划分不满足完备性。</p></li><li><p>名词  (1个一类，7个二类，5个三类)<br>名词分为以下子类：<br>n 名词<br>nr 人名<br>nr1 汉语姓氏<br>nr2 汉语名字<br>nrj 日语人名<br>nrf 音译人名<br>ns 地名<br>nsf 音译地名<br>nt 机构团体名<br>nz 其它专名<br>nl 名词性惯用语<br>ng 名词性语素</p></li><li><p>时间词(1个一类，1个二类)<br>t 时间词<br>tg 时间词性语素</p></li><li><p>处所词(1个一类)<br>s 处所词</p></li><li><p>方位词(1个一类)<br>f 方位词</p></li><li><p>动词(1个一类，9个二类)<br>v 动词<br>vd 副动词<br>vn 名动词<br>vshi 动词“是”<br>vyou 动词“有”<br>vf 趋向动词<br>vx 形式动词<br>vi 不及物动词（内动词）<br>vl 动词性惯用语<br>vg 动词性语素</p></li><li><p>形容词(1个一类，4个二类)<br>a 形容词<br>ad 副形词<br>an 名形词<br>ag 形容词性语素<br>al 形容词性惯用语</p></li><li><p>区别词(1个一类，2个二类)<br>b 区别词</p></li></ol><p>bl 区别词性惯用语<br>8. 状态词(1个一类)<br>z 状态词<br>9. 代词(1个一类，4个二类，6个三类)<br>r 代词<br>rr 人称代词<br>rz 指示代词<br>rzt 时间指示代词<br>rzs 处所指示代词<br>rzv 谓词性指示代词<br>ry 疑问代词<br>ryt 时间疑问代词<br>rys 处所疑问代词<br>ryv 谓词性疑问代词<br>rg 代词性语素<br>10. 数词(1个一类，1个二类)<br>m 数词<br>mq 数量词<br>11. 量词(1个一类，2个二类)<br>q 量词<br>qv 动量词<br>qt 时量词<br>12. 副词(1个一类)<br>d 副词<br>13. 介词(1个一类，2个二类)<br>p 介词<br>pba 介词“把”<br>pbei 介词“被”<br>14. 连词(1个一类，1个二类)<br>c 连词<br>cc 并列连词<br>15. 助词(1个一类，15个二类)<br>u 助词<br>uzhe 着<br>ule 了 喽<br>uguo 过<br>ude1 的 底<br>ude2 地<br>ude3 得<br>usuo 所<br>udeng 等 等等 云云<br>uyy 一样 一般 似的 般<br>udh 的话<br>uls 来讲 来说 而言 说来</p><p>uzhi 之<br>ulian 连 （“连小学生都会”）</p><ol start="16"><li>叹词(1个一类)<br>e 叹词</li><li>语气词(1个一类)<br>y 语气词(delete yg)</li><li>拟声词(1个一类)<br>o 拟声词</li><li>前缀(1个一类)<br>h 前缀</li><li>后缀(1个一类)<br>k 后缀</li><li>字符串(1个一类，2个二类)<br>x 字符串<br>xx 非语素字<br>xu 网址URL</li><li>标点符号(1个一类，16个二类)<br>w 标点符号<br>wkz 左括号，全角：（ 〔  ［  ｛  《 【  〖 〈   半角：( [ { &lt;<br>wky 右括号，全角：） 〕  ］ ｝ 》  】 〗 〉 半角： ) ] { &gt;<br>wyz 左引号，全角：“ ‘ 『<br>wyy 右引号，全角：” ’ 』<br>wj 句号，全角：。<br>ww 问号，全角：？ 半角：?<br>wt 叹号，全角：！ 半角：!<br>wd 逗号，全角：， 半角：,<br>wf 分号，全角：； 半角： ;<br>wn 顿号，全角：、<br>wm 冒号，全角：： 半角： :<br>ws 省略号，全角：……  …<br>wp 破折号，全角：——   －－   ——－   半角：—  —-<br>wb 百分号千分号，全角：％ ‰   半角：%<br>wh 单位符号，全角：￥ ＄ ￡  °  ℃  半角：$</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sphinx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 待读列表</title>
      <link href="/2015/11/13/2015-Golang-%E5%BE%85%E8%AF%BB%E5%88%97%E8%A1%A8/"/>
      <url>/2015/11/13/2015-Golang-%E5%BE%85%E8%AF%BB%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="http://mikespook.com/2014/12/%E7%90%86%E8%A7%A3-go-%E8%AF%AD%E8%A8%80%E7%9A%84%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8/">理解 GO 语言的内存使用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R环境安装</title>
      <link href="/2015/10/28/2015-R%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
      <url>/2015/10/28/2015-R%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cran.r-project.org/bin/linux/ubuntu/README">R环境安装</a><br><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-r-on-ubuntu-14-04">R环境安装</a><br><a href="https://www.r-project.org/other-docs.html">R Documentdation</a></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs FAQ</title>
      <link href="/2015/10/27/2015-Nodejs-FAQ/"/>
      <url>/2015/10/27/2015-Nodejs-FAQ/</url>
      
        <content type="html"><![CDATA[<ul><li><code>npm config set prefix /usr/local</code> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动开发规范</title>
      <link href="/2015/10/20/2015-%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
      <url>/2015/10/20/2015-%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h4 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h4><p>使用无衬线字体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">body &#123;<br>    font-family: &quot;Helvetica Neue&quot;, Helvetica, STHeiTi, sans-serif;<br>&#125;<br></code></pre></td></tr></table></figure><p>iOS 4.0+ 使用英文字体 Helvetica Neue，之前的iOS版本降级使用 Helvetica。中文字体设置为华文黑体STHeiTi。 需补充说明，华文黑体并不存在iOS的字体库中(<a href="http://support.apple.com/kb/HT5878)%EF%BC%8C">http://support.apple.com/kb/HT5878)，</a> 但系统会自动将华文黑体 STHeiTi 兼容命中系统默认中文字体黑体-简或黑体-繁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Heiti SC Light 黑体-简 细体 （iOS 7后废弃）<br>Heiti SC Medium 黑体-简 中黑<br>Heiti TC Light 黑体-繁 细体<br>Heiti TC Medium 黑体-繁 中黑<br></code></pre></td></tr></table></figure><p>原生Android下中文字体与英文字体都选择默认的无衬线字体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">4.0 之前版本英文字体原生 Android 使用的是 Droid Sans，中文字体原生 Android 会命中 Droid Sans Fallback<br>4.0 之后中英文字体都会使用原生 Android 新的 Roboto 字体<br>其他第三方 Android 系统也一致选择默认的无衬线字体<br></code></pre></td></tr></table></figure><h4 id="基础交互"><a href="#基础交互" class="headerlink" title="基础交互"></a>基础交互</h4><p>设置全局的CSS样式，避免图中的长按弹出菜单与选中文本的行为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a, img &#123;<br>    -webkit-touch-callout: none; /* 禁止长按链接与图片弹出菜单 */<br>&#125;<br>html, body &#123;<br>    -webkit-user-select: none;   /* 禁止选中文本（如无文本选中需求，此为必选项） */<br>    user-select: none;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考资料:</p><ul><li><a href="http://www.w3.org/TR/selectors/#selectors">CSS选择器-火狐开发文档</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/Selectors">CSS选择器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mariadb vs Mysql</title>
      <link href="/2015/10/07/2015-Mariadb-vs-Mysql/"/>
      <url>/2015/10/07/2015-Mariadb-vs-Mysql/</url>
      
        <content type="html"><![CDATA[<h4 id="遇到的问题-Headers-and-client-library-minor-version-mismatch-Headers-50544-Library-50627"><a href="#遇到的问题-Headers-and-client-library-minor-version-mismatch-Headers-50544-Library-50627" class="headerlink" title="遇到的问题 Headers and client library minor version mismatch. Headers:50544 Library:50627"></a>遇到的问题 <code>Headers and client library minor version mismatch. Headers:50544 Library:50627</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">CentOS Linux release 7.1.1503 (Core)<br>Linux y125 3.10.0-229.11.1.el7.x86_64 #1 SMP Thu Aug 6 01:06:18 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux<br><br>;已安装的php以及mysql rpm包<br>root@lm01 ~]$rpm -qa|grep mysql<br>php56w-mysql-5.6.13-1.w7.x86_64<br>mysql-community-client-5.6.26-2.el7.x86_64<br>mysql-community-common-5.6.26-2.el7.x86_64<br>mysql-community-devel-5.6.26-2.el7.x86_64<br>mysql-community-libs-5.6.26-2.el7.x86_64<br>mysql-community-server-5.6.26-2.el7.x86_64<br>mysql-community-release-el7-5.noarch<br>root@lm01 ~]$rpm -qa|grep php<br>php56w-pdo-5.6.13-1.w7.x86_64<br>php56w-pecl-imagick-3.1.2-1.w7.x86_64<br>php56w-mysql-5.6.13-1.w7.x86_64<br>php56w-cli-5.6.13-1.w7.x86_64<br>php56w-mbstring-5.6.13-1.w7.x86_64<br>php56w-xml-5.6.13-1.w7.x86_64<br>php56w-intl-5.6.13-1.w7.x86_64<br>php56w-common-5.6.13-1.w7.x86_64<br>php56w-opcache-5.6.13-1.w7.x86_64<br>php56w-process-5.6.13-1.w7.x86_64<br>php56w-5.6.13-1.w7.x86_64<br>php56w-pear-1.9.4-2.w7.noarch<br><br>;php-mysqli扩展<br>mysqli<br><br>MysqlI Support =&gt; enabled<br>Client API library version =&gt; 5.6.26<br>Active Persistent Links =&gt; 0<br>Inactive Persistent Links =&gt; 0<br>Active Links =&gt; 0<br>Client API header version =&gt; 5.5.44-MariaDB<br>MYSQLI_SOCKET =&gt; /var/lib/mysql/mysql.sock<br></code></pre></td></tr></table></figure><p>如上, php5.6我安装的是php56w-mysql, Client API header version和Mysql版本不一致,会提示如下错误:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Headers and client library minor version mismatch. Headers:50544 Library:50627<br></code></pre></td></tr></table></figure><p>网上有人说使用php56w-mysqlnd可以解决问题,然而并没有什么卵用(或许是coreseek的sphinx源码bug?):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Warning: mysql_connect(): Server sent charset (0) unknown to the client<br><br></code></pre></td></tr></table></figure><p>持续digging之下,感觉有以下途径或许可以尝试:</p><ul><li>最简单的办法,但是尚未搜索到合适的答案,<a href="https://mariadb.com/kb/en/mariadb/installation-issues-with-php5/">可以参考这里</a></li><li>将mysql版本降至Mysql5.5,并重新编译php的mysql扩展</li><li>使用Mariadb替换Mysql</li></ul><p>权衡之下,使用方案二.过程如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yum remove mysql*<br>;rpm -qa|grep mysql 检查是否卸载干净了<br>;检查/etc/yum.repos.d/目录下有没有mysql*文件,删除之<br><br>yum -y install http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm<br>/etc/yum.repos.d/mysql-community.repo<br>;找到 Mysql5.5 section,将enabled=0修改为1,将其他Mysql源全部关闭,如下:<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[mysql-connectors-community]<br>name=MySQL Connectors Community<br>baseurl=http://repo.mysql.com/yum/mysql-connectors-community/el/6/$basearch/<br>enabled=1<br>gpgcheck=1<br>gpgkey=file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br><br>[mysql-tools-community]<br>name=MySQL Tools Community<br>baseurl=http://repo.mysql.com/yum/mysql-tools-community/el/6/$basearch/<br>enabled=1<br>gpgcheck=1<br>gpgkey=file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br><br># Enable to use MySQL 5.5<br>[mysql55-community]<br>name=MySQL 5.5 Community Server<br>baseurl=http://repo.mysql.com/yum/mysql-5.5-community/el/6/$basearch/<br>enabled=1<br>gpgcheck=1<br>gpgkey=file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br><br># Enable to use MySQL 5.6<br>[mysql56-community]<br>name=MySQL 5.6 Community Server<br>baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/6/$basearch/<br>enabled=0<br>gpgcheck=1<br>gpgkey=file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br><br># Note: MySQL 5.7 is currently in development. For use at your own risk.<br># Please read with sub pages: https://dev.mysql.com/doc/relnotes/mysql/5.7/en/<br>[mysql57-community-dmr]<br>name=MySQL 5.7 Community Server Development Milestone Release<br>baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/6/$basearch/<br>enabled=0<br>gpgcheck=1<br>gpgkey=file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br></code></pre></td></tr></table></figure><p>接下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yum install mysql mysql-devel mysql-server<br></code></pre></td></tr></table></figure><p>Mysql5.5已经安装完毕,下一步,安装php的mysql扩展</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yum install php56w-mysql<br>;不幸的事故再次发生<br>Package 1:mariadb-libs-5.5.44-1.el7_1.x86_64 is obsoleted by mysql-community-libs-5.5.46-2.el6.x86_64 which is already installed<br></code></pre></td></tr></table></figure><p>忽然想起我的ubuntu上php也是5.6,而Mysql正好是5.5,直接拷贝so文件过来使用,但是编译过的default_socket位置不一致,于是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ln -s /var/lib/mysql/mysqld.sock /var/run/mysqld/mysqld.sock<br>;最后<br>systemctl restart httpd.service<br><br>mysqli<br><br>MysqlI Support =&gt; enabled<br>Client API library version =&gt; 5.5.46<br>Active Persistent Links =&gt; 0<br>Inactive Persistent Links =&gt; 0<br>Active Links =&gt; 0<br>Client API header version =&gt; 5.5.44<br>MYSQLI_SOCKET =&gt; /var/run/mysqld/mysqld.sock<br></code></pre></td></tr></table></figure><p>问题暂时解决了!</p><p>后记: 降版本并不是最佳的选择, 以后还是要时常关注这方面的消息.或许迁移道Mariadb是更好的选择.</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>待读列表</title>
      <link href="/2015/09/15/2015-%E5%BE%85%E8%AF%BB%E5%88%97%E8%A1%A8/"/>
      <url>/2015/09/15/2015-%E5%BE%85%E8%AF%BB%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="http://www.2ality.com/2012/04/declaring-module-exports.html">Declaring module exports (Node.js, AMD)</a> 解释了使用exports的好处与坏处</li><li><a href="http://addyosmani.com/writing-modular-js/">Writing Modular JavaScript With AMD, CommonJS &amp; ES Harmony</a> 纯粹的AMD模块方法</li><li><a href="http://segmentfault.com/a/1190000000381042#articleHeader6">子容器垂直居中于父容器的方案</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪类::before和::after</title>
      <link href="/2015/09/08/2015-%E4%BC%AA%E7%B1%BB-before%E5%92%8C-after/"/>
      <url>/2015/09/08/2015-%E4%BC%AA%E7%B1%BB-before%E5%92%8C-after/</url>
      
        <content type="html"><![CDATA[<p>CSS 有两个说不上常用的伪类 :before 和 :after，偶尔会被人用来添加些自定义格式什么的，但是它们的功用不仅于此。前几天发现了 Creative Link Effects 这个非常有意思的介绍创意链接特效的页面，里面惊人的效果大量使用到的特性除了 transform 属性进行变形之外，就是接下来要介绍的这两个伪元素了。</p><p><img src="/images/articles/css_before_after_01.gif" alt="图片1" title="Creative Button Styles"></p><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>在了解进阶的应用之前，先来了解一下语法规则。平常仅仅需要将这两个伪元素用于添加一些自定义字符时，只需使用伪类使用的单冒号写法，以保证浏览器的兼容性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">p:before  &#123;&#125;<br></code></pre></td></tr></table></figure><p>不过，在 CSS3 中为了区别伪元素和伪类为伪元素使用了双冒号，因此如果使用了 display 或者 width 等属性时使得显示脱离了原本元素后，建议按照标准双写。过于老的浏览器可能会存在支持问题，不过伪元素大多是配合 CSS3 使用，就无所谓向下兼容了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">img::after &#123;&#125;<br></code></pre></td></tr></table></figure><p>这两个伪类下特有的属性 content ，用于在 CSS 渲染中向元素逻辑上的头部或尾部添加内容。注意这些添加不会改变文档内容，不会出现在 DOM 中，不可复制，仅仅是在 CSS 渲染层加入。比较有用的是以下几个值：</p><ul><li><p>[String] - 使用引号包括一段字符串，将会向元素内容中添加字符串。示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">a:after &#123; content: &quot;↗&quot;; &#125;<br></code></pre></td></tr></table></figure></li><li><p>attr() – 调用当前元素的属性，可以方便的比如将图片的 Alt 提示文字或者链接的 Href 地址显示出来。示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">a:after &#123; content:&quot;(&quot; attr(href) &quot;)&quot;; &#125;<br></code></pre></td></tr></table></figure></li><li><p>url() / uri() – 用于引用媒体文件。示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">h1::before &#123; content: url(logo.png); &#125;<br></code></pre></td></tr></table></figure></li><li><p>counter() –  调用计数器，可以不使用列表元素实现序号功能。具体请参见 counter-increment 和 counter-reset 属性的用法。示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">h2:before &#123; counter-increment: chapter; content: &quot;Chapter &quot; counter(chapter) &quot;. &quot; &#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="进阶技巧"><a href="#进阶技巧" class="headerlink" title="进阶技巧"></a>进阶技巧</h1><p>清除浮动是一个时常会遇到的问题，不少人的解决办法是添加一个空的 div 应用 clear:both; 属性。现在，无需增加没有意义的元素，仅需要以下样式即可在元素尾部自动清除浮动：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">.clear-fix &#123; *overflow: hidden; *zoom: 1; &#125;  <br>.clear-fix:after &#123; display: table; content: &quot;&quot;; width: 0; clear: both; &#125;<br></code></pre></td></tr></table></figure><p>许多人喜欢给 blockquote 引用段添加巨大的引号作为背景，这种时候我们就可以用 :before 来代替 background 了，即可以给背景留下空间，还可以直接使用文字而非图片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">blockquote::before &#123;  <br>    content: open-quote;  <br>    position: absolute;  <br>    z-index: -1;  <br>    color: #DDD;  <br>    font-size: 120px;  <br>    font-family: serif;  <br>    font-weight: bolder;  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="特殊妙用"><a href="#特殊妙用" class="headerlink" title="特殊妙用"></a>特殊妙用</h1><p>除了简单的添加字符，配合 CSS 强大的定位和特效特性，完全可以达到给简单的元素另外附加最多两个容器的效果。有一点需要注意的是，如果不需要内容仅配合样式属性做出效果，内容属性也不能为空，即 content:”” 。否则，其他的样式属性一概不会生效。</p><p><img src="/images/articles/css_before_after_02.gif" alt="css_before_after_02.gif" title="悬浮出现方括号"></p><p>鼠标移上链接，出现方括号：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">a &#123;  <br>    position: relative;  <br>    display: inline-block;  <br>    outline: none;  <br>    text-decoration: none;  <br>    color: #000;  <br>    font-size: 32px;  <br>    padding: 5px 10px;  <br>&#125;  <br>  <br>a:hover::before, a:hover::after &#123; position: absolute; &#125;  <br>a:hover::before &#123; content: &quot;\5B&quot;; left: -20px; &#125;  <br>a:hover::after &#123; content: &quot;\5D&quot;; right:  -20px; &#125;<br></code></pre></td></tr></table></figure><p>同样，我们只需要配合 display: block 和 position: absolute ，就可以将其当成两个容器，拼合成悬浮出现双边框的特效：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html">a &#123;  <br>    position: relative;  <br>    display: inline-block;  <br>    outline: none;  <br>    text-decoration: none;  <br>    color: #000;  <br>    font-size: 32px;  <br>    padding: 0 10px;  <br>&#125;  <br>  <br>/* 大框 */  <br>a:hover::before, a:hover::after &#123;   <br>    content: &quot;&quot;;  <br>    display: block;  <br>    position: absolute;  <br>    top: -15%%;  <br>    left: -14%%;  <br>    width: 120%;  <br>    height: 120%;  <br>    border-style: solid;  <br>    border-width: 4px;  <br>    border-color: #DDD;  <br> &#125;  <br>  <br>/* 小框 */  <br> a:hover::after &#123;  <br>    top: 0%;  <br>    left: 0%;  <br>    width: 100%;  <br>    height: 100%;  <br>    border-width: 2px;  <br> &#125;<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Abefore">::before (:before)</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::after">::after (:after)</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/content">content</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mobile H5 App</title>
      <link href="/2015/09/07/2015-Mobile-H5-App/"/>
      <url>/2015/09/07/2015-Mobile-H5-App/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://docs.getsentry.com/hosted/clients/javascript/">bug report 组件</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站icon</title>
      <link href="/2015/09/07/2015-%E7%BD%91%E7%AB%99icon/"/>
      <url>/2015/09/07/2015-%E7%BD%91%E7%AB%99icon/</url>
      
        <content type="html"><![CDATA[<h3 id="Topics"><a href="#Topics" class="headerlink" title="Topics"></a>Topics</h3><ul><li><code>icon</code> vs <code>shortcut icon</code></li><li><code>image/vnd.microsoft.icon</code></li></ul><p>There are several ways to create a favicon. The best way for you depends on various factors:</p><p>The time you can spend on this task. For many people, this is “as quick as possible”.<br>The efforts you are willing to make. Like, drawing a 16x16 icon by hand for better results.<br>Specific constraints, like supporting a specific browser with odd specs.</p><h1 id="First-method-Use-a-favicon-generator"><a href="#First-method-Use-a-favicon-generator" class="headerlink" title="First method: Use a favicon generator"></a>First method: Use a favicon generator</h1><p>If you want to get the job done well and quickly, you can use a favicon generator. This one creates the pictures and HTML code for all major desktop and mobiles browsers. Full disclosure: I’m the author of this site.</p><p>Advantages of such solution: it’s quick and all compatibility considerations were already addressed for you.</p><h1 id="Second-method-Create-a-favicon-ico-desktop-browsers-only"><a href="#Second-method-Create-a-favicon-ico-desktop-browsers-only" class="headerlink" title="Second method: Create a favicon.ico (desktop browsers only)"></a>Second method: Create a favicon.ico (desktop browsers only)</h1><p>As you suggest, you can create a favicon.ico file which contains 16x16 and 32x32 pictures (note that Microsoft recommends 16x16, 32x32 and 48x48).</p><p>Then, declare it in your HTML code:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/path/to/icons/favicon.ico&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>This method will work with all desktop browsers, old and new. But most mobile browsers will ignore the favicon.</p><p>About your suggestion of placing the favicon.ico file in the root and not declaring it: beware, although this technique works on most browsers, it is not 100% reliable. For example Windows Safari cannot find it (granted: this browser is somehow deprecated on Windows, but you get the point). This technique is useful when combined with PNG icons (for modern browsers).</p><h1 id="Third-method-Create-a-favicon-ico-a-PNG-icon-and-an-Apple-Touch-icon-all-browsers"><a href="#Third-method-Create-a-favicon-ico-a-PNG-icon-and-an-Apple-Touch-icon-all-browsers" class="headerlink" title="Third method: Create a favicon.ico, a PNG icon and an Apple Touch icon (all browsers)"></a>Third method: Create a favicon.ico, a PNG icon and an Apple Touch icon (all browsers)</h1><p>In your question, you do not mention the mobile browsers. Most of them will ignore the favicon.ico file. Although your site may be dedicated to desktop browsers, chances are that you don’t want to ignore mobile browsers altogether.</p><p>You can achieve a good compatibility with:</p><ul><li>favicon.ico, see above.</li><li>A 192x192 PNG icon for Android Chrome</li><li>A 180x180 Apple Touch icon (for iPhone 6 Plus; other device will scale it down as needed).</li></ul><p>Declare them with</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/path/to/icons/favicon.ico&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/png&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/path/to/icons/favicon-192x192.png&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;192x192&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;180x180&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/path/to/icons/apple-touch-icon-180x180.png&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>This is not the full story, but it’s good enough in most cases.</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码编译coreseek4_1</title>
      <link href="/2015/09/07/2015-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91coreseek4-1/"/>
      <url>/2015/09/07/2015-%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91coreseek4-1/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$yum</span> install make gcc g++ gcc-c++ libtool autoconf automake imake mysql-devel libxml2-devel expat-devel<br></code></pre></td></tr></table></figure><h1 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$wget</span> http://www.coreseek.cn/uploads/csft/4.0/coreseek-4.1-beta.tar.gz<br><span class="hljs-variable">$tar</span> zxf coreseek-4.1-beta.tar.gz<br><span class="hljs-variable">$cd</span> coreseek-4.1-beta<br>$<span class="hljs-variable">$ls</span><br>csft-4.1  mmseg-3.2.14  README.txt  testpack<br></code></pre></td></tr></table></figure><h1 id="安装mmseg"><a href="#安装mmseg" class="headerlink" title="安装mmseg"></a>安装mmseg</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$cd</span> mmseg-3.2.14<br>$./bootstrap    <span class="hljs-comment">#输出的warning信息可以忽略，如果出现error则需要解决</span><br>$./configure --prefix=/usr/local/mmseg3<br><span class="hljs-variable">$make</span><br><span class="hljs-variable">$make</span> install<br><span class="hljs-variable">$cd</span> ..<br></code></pre></td></tr></table></figure><h1 id="安装coreseek"><a href="#安装coreseek" class="headerlink" title="安装coreseek"></a>安装coreseek</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$cd</span> csft-4.1<br><span class="hljs-variable">$sh</span> buildconf.sh <span class="hljs-comment">#按照官方文档执行该命令会报错.需要做以下修改:</span><br></code></pre></td></tr></table></figure><ol><li>vim buildconf.sh, 将 <code>&amp;&amp; automake --foreign \</code> 修改为 <code>&amp;&amp; automake --foreign --add-missing \</code></li><li>vim configure.ac,<br>将 <code>AM_INIT_AUTOMAKE([-Wall -Werror foreign])</code> 修改为 <code>AM_INIT_AUTOMAKE([-Wall foreign])</code>, 即删除 <code>-Werror</code><br>并在 <code>AC_PROG_RANLIB</code> 的下一行加上 <code>AM_PROG_AR</code></li><li>vim src/sphinxexpr.cpp<br>将 <code>T val = ExprEval ( this-&gt;m_pArg, tMatch );</code> 修改为 <code>T val = this-&gt;ExprEval ( this-&gt;m_pArg, tMatch );</code>, 需修改3处</li><li>重新执行 <code>sh buildconf.sh</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$./configure --prefix=/usr/local/coreseek  --without-unixodbc --with-mmseg --with-mmseg-includes=/usr/local/mmseg3/include/mmseg/ --with-mmseg-libs=/usr/local/mmseg3/lib/ --with-mysql<br><span class="hljs-variable">$make</span> <br><span class="hljs-variable">$make</span> install<br><span class="hljs-variable">$cd</span> ..<br></code></pre></td></tr></table></figure><h1 id="测试mmseg分词-coreseek搜索"><a href="#测试mmseg分词-coreseek搜索" class="headerlink" title="测试mmseg分词, coreseek搜索"></a>测试mmseg分词, coreseek搜索</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$cd</span> testpack<br><span class="hljs-variable">$cat</span> var/test/test/xml <span class="hljs-comment">#应该正确显示中文,否则需要设置字符集zh_CN.UTF-8</span><br><span class="hljs-variable">$mmseg</span> -d /usr/local/mmseg3/etc var/test/test.xml <span class="hljs-comment">#注意确保mmseg3/etc下有uni.lib, 且此处测试时test.xml引用的是相对路径</span><br><span class="hljs-variable">$indexer</span> -c etc/csft.conf --all<br><span class="hljs-variable">$search</span> -c etc/csft.conf 网络搜索<br>Coreseek Fulltext 4.1 [ Sphinx 2.0.2-dev (r2922)]<br>Copyright (c) 2007-2011,<br>Beijing Choice Software Technologies Inc (http://www.coreseek.com)<br><br> using config file <span class="hljs-string">&#x27;etc/csft.conf&#x27;</span>...<br>index <span class="hljs-string">&#x27;xml&#x27;</span>: query <span class="hljs-string">&#x27;网络搜索 &#x27;</span>: returned 1 matches of 1 total <span class="hljs-keyword">in</span> 0.000 sec<br><br>displaying matches:<br>1. document=1, weight=1590, published=Thu Apr  1 22:20:07 2010, author_id=1<br><br>words:<br>1. <span class="hljs-string">&#x27;网络&#x27;</span>: 1 documents, 1 hits<br>2. <span class="hljs-string">&#x27;搜索&#x27;</span>: 2 documents, 5 hits<br></code></pre></td></tr></table></figure><h1 id="开发环境样本配置文件"><a href="#开发环境样本配置文件" class="headerlink" title="开发环境样本配置文件"></a>开发环境样本配置文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#</span><br><span class="hljs-comment"># Sphinx configuration file sample</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># WARNING! While this sample file mentions all available options,</span><br><span class="hljs-comment"># it contains (very) short helper descriptions only. Please refer to</span><br><span class="hljs-comment"># doc/sphinx.html for details.</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment">#############################################################################</span><br><span class="hljs-comment">## 商家索引 data source definition</span><br><span class="hljs-comment">#############################################################################</span><br><br><span class="hljs-built_in">source</span> restaurant_src<br>&#123;<br>    <span class="hljs-built_in">type</span>= mysql<br>    sql_host= localhost<br>    sql_user= root<br>    sql_pass= 123456<br>    sql_db= lifemenu_restaurant<br>    sql_port= 3306<span class="hljs-comment"># optional, default is 3306</span><br>    sql_query_pre   = SET NAMES UTF8<br><br>    sql_query_range = SELECT MIN(<span class="hljs-built_in">id</span>),MAX(<span class="hljs-built_in">id</span>) FROM restaurant_sphinx<br>    sql_range_step  = 10000<br><span class="hljs-comment">#                    CONCAT(suburb, &#x27; &#x27;, postcode) as suburb_postcode \</span><br>    sql_query = select <span class="hljs-built_in">id</span>, <span class="hljs-built_in">id</span> as restaurant_id, restaurant_name, phone, price, rating,  \<br>                    city_id, address \<br>                from restaurant_sphinx \<br>                WHERE <span class="hljs-built_in">id</span>&gt;=<span class="hljs-variable">$start</span> AND <span class="hljs-built_in">id</span>&lt;=<span class="hljs-variable">$end</span><br><br>    sql_field_string   = restaurant_name<br>    sql_field_string   = phone<br><br><span class="hljs-comment">#    sql_attr_multi = uint cuisine from ranged-query; \</span><br><span class="hljs-comment">#        SELECT restaurant_id as id, cuisine_id as cuisine FROM restaurant_cuisine WHERE id&gt;=$start AND id&lt;=$end; \</span><br><span class="hljs-comment">#        SELECT MIN(id), MAX(id) FROM restaurant_cuisine;</span><br><span class="hljs-comment">#    sql_attr_uint      = country_id</span><br><span class="hljs-comment">#    sql_attr_uint      = state_id</span><br>    sql_attr_uint      = city_id<br><span class="hljs-comment">#    sql_attr_string    = suburb_postcode</span><br>    sql_attr_uint      = price<br>    sql_attr_float     = rating<br>    sql_attr_string    = address<br><span class="hljs-comment">#    sql_attr_uint      = collected_amount</span><br><span class="hljs-comment">#    sql_attr_uint      = tabletalk_amount</span><br>&#125;<br><br><span class="hljs-comment">#############################################################################</span><br><span class="hljs-comment">## index definition</span><br><span class="hljs-comment">#############################################################################</span><br><br>index restaurant_index<br>&#123;<br>    <span class="hljs-built_in">source</span> = restaurant_src<br>    path = /usr/local/coreseek/var/data/restaurant<br>    docinfo = extern<br>    mlock = 0<br>    morphology   = none<br>    min_word_len = 1<br>    dict=crc<br>    html_strip   = 0<br><br>    <span class="hljs-comment">#以下配置为中文分词核心配置</span><br>    <span class="hljs-comment">#stopwords = /path/to/stopwords.txt</span><br>    <span class="hljs-comment">#uni.lib词典的制作 http://www.coreseek.cn/opensource/mmseg/</span><br>    charset_dictpath = /usr/local/mmseg3/etc/<br>    charset_type = zh_cn.utf-8<br>    <span class="hljs-comment"># 中文分词中以下两行必须严格一致</span><br>    <span class="hljs-comment">#charset_table = ...</span><br>    ngram_len = 0<br>&#125;<br><br><br><span class="hljs-comment">#############################################################################</span><br><span class="hljs-comment">## indexer settings</span><br><span class="hljs-comment">#############################################################################</span><br><br>indexer<br>&#123;<br>    <span class="hljs-comment"># memory limit, in bytes, kiloytes (16384K) or megabytes (256M)</span><br>    <span class="hljs-comment"># optional, default is 128M, max is 2047M, recommended is 256M to 1024M</span><br>    mem_limit= 1024M<br><br>    <span class="hljs-comment"># maximum IO calls per second (for I/O throttling)</span><br>    <span class="hljs-comment"># optional, default is 0 (unlimited)</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># max_iops= 40</span><br><br><br>    <span class="hljs-comment"># maximum IO call size, bytes (for I/O throttling)</span><br>    <span class="hljs-comment"># optional, default is 0 (unlimited)</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># max_iosize= 1048576</span><br><br><br>    <span class="hljs-comment"># maximum xmlpipe2 field length, bytes</span><br>    <span class="hljs-comment"># optional, default is 2M</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># max_xmlpipe2_field= 4M</span><br><br><br>    <span class="hljs-comment"># write buffer size, bytes</span><br>    <span class="hljs-comment"># several (currently up to 4) buffers will be allocated</span><br>    <span class="hljs-comment"># write buffers are allocated in addition to mem_limit</span><br>    <span class="hljs-comment"># optional, default is 1M</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># write_buffer= 1M</span><br><br><br>    <span class="hljs-comment"># maximum file field adaptive buffer size</span><br>    <span class="hljs-comment"># optional, default is 8M, minimum is 1M</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># max_file_field_buffer= 32M</span><br><br><br>    <span class="hljs-comment"># how to handle IO errors in file fields</span><br>    <span class="hljs-comment"># known values are &#x27;ignore_field&#x27;, &#x27;skip_document&#x27;, and &#x27;fail_index&#x27;</span><br>    <span class="hljs-comment"># optional, default is &#x27;ignore_field&#x27;</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># on_file_field_error = skip_document</span><br><br><br>    <span class="hljs-comment"># how to handle syntax errors in JSON attributes</span><br>    <span class="hljs-comment"># known values are &#x27;ignore_attr&#x27; and &#x27;fail_index&#x27;</span><br>    <span class="hljs-comment"># optional, default is &#x27;ignore_attr&#x27;</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># on_json_attr_error = fail_index</span><br><br><br>    <span class="hljs-comment"># whether to auto-convert numeric values from strings in JSON attributes</span><br>    <span class="hljs-comment"># with auto-conversion, string value with actually numeric data</span><br>    <span class="hljs-comment"># (as in &#123;&quot;key&quot;:&quot;12345&quot;&#125;) gets stored as a number, rather than string</span><br>    <span class="hljs-comment"># optional, allowed values are 0 and 1, default is 0 (do not convert)</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># json_autoconv_numbers = 1</span><br><br><br>    <span class="hljs-comment"># whether and how to auto-convert key names in JSON attributes</span><br>    <span class="hljs-comment"># known value is &#x27;lowercase&#x27;</span><br>    <span class="hljs-comment"># optional, default is unspecified (do nothing)</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># json_autoconv_keynames = lowercase</span><br><br><br>    <span class="hljs-comment"># lemmatizer cache size</span><br>    <span class="hljs-comment"># improves the indexing time when the lemmatization is enabled</span><br>    <span class="hljs-comment"># optional, default is 256K</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># lemmatizer_cache = 512M</span><br>&#125;<br><br><span class="hljs-comment">#############################################################################</span><br><span class="hljs-comment">## searchd settings</span><br><span class="hljs-comment">#############################################################################</span><br><br>searchd<br>&#123;<br>    listen              = 9312<br>    listen                = 127.0.0.1:9306:mysql41<br>    listen                = 192.168.1.125:9307:mysql41<br>    read_timeout        = 5<br>    max_children        = 30<br>    max_matches         = 1000<br>    seamless_rotate     = 0<br>    preopen_indexes     = 0<br>    unlink_old          = 1<br><br>    <span class="hljs-comment">#query_log_format    = sphinxql</span><br><br>    pid_file            = /usr/local/coreseek/var/log/searchd.pid<br>    <span class="hljs-built_in">log</span>                 = /usr/local/coreseek/var/log/searchd.log<br>    query_log           = /usr/local/coreseek/var/log/query.log<br>    binlog_path         = <span class="hljs-comment"># disable binlog</span><br><br>    <span class="hljs-comment">#覆盖默认参数,因为以下参数已经废弃</span><br>    compat_sphinxql_magics = 0<br>&#125;<br><br><span class="hljs-comment">#############################################################################</span><br><span class="hljs-comment">## common settings</span><br><span class="hljs-comment">#############################################################################</span><br><br><span class="hljs-comment"># --eof--</span><br><br></code></pre></td></tr></table></figure><p>参考资料:</p><ul><li><a href="http://www.coreseek.cn/products-install/faq/#qa1">coreseek常见问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sphinx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flexbox</title>
      <link href="/2015/08/29/2015-Flexbox/"/>
      <url>/2015/08/29/2015-Flexbox/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="http://www.w3cplus.com/css3/a-guide-to-flexbox.html">一个完整的Flexbox指南</a></p></li><li><p><a href="http://segmentfault.com/a/1190000002490633">Flexbox，更优雅的布局</a></p></li><li><p><a href="http://segmentfault.com/a/1190000002616717">flexbox：更加优雅的Web布局</a></p></li><li><p><a href="http://caibaojian.com/flexbox-example.html">CSS3 flexbox弹性布局实例</a></p></li><li><p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Complete Guide to Flexbox</a></p></li><li><p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Complete Guide to Flexbox</a></p></li><li><p><a href="http://caibaojian.com/flexbox-example.html">CSS3 flexbox弹性布局实例</a></p></li><li><p><a href="http://segmentfault.com/a/1190000002616717">flexbox：更加优雅的Web布局</a></p></li><li><p><a href="http://segmentfault.com/a/1190000002490633">Flexbox，更优雅的布局</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抢购系统</title>
      <link href="/2015/08/07/2015-%E6%8A%A2%E8%B4%AD%E7%B3%BB%E7%BB%9F/"/>
      <url>/2015/08/07/2015-%E6%8A%A2%E8%B4%AD%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/array7/article/details/46477423">http://blog.csdn.net/array7/article/details/46477423</a></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wordcloud</title>
      <link href="/2015/08/07/2015-wordcloud/"/>
      <url>/2015/08/07/2015-wordcloud/</url>
      
        <content type="html"><![CDATA[<p><a href="http://zjdian.com/2014/10/24/2014-10-24-r-package-wordcloud/">http://zjdian.com/2014/10/24/2014-10-24-r-package-wordcloud/</a><br><a href="http://www.niubua.com/?p=1684&amp;utm_source=tuicool">http://www.niubua.com/?p=1684&amp;utm_source=tuicool</a></p><p>1、An Introduction to R<br><a href="http://cran.r-project.org/doc/manuals/R-intro.html#Preface">http://cran.r-project.org/doc/manuals/R-intro.html#Preface</a></p><p>2、simpleR  Using R for Introductory Statistics<br><a href="http://cran.r-project.org/doc/contrib/Verzani-SimpleR.pdf">http://cran.r-project.org/doc/contrib/Verzani-SimpleR.pdf</a></p><p>3、Using R for Data Analysis and Graphics<br><a href="http://wwwmaths.anu.edu.au/~johnm/r/usingR.pdf">http://wwwmaths.anu.edu.au/~johnm/r/usingR.pdf</a></p><p>4、R数据源<br><a href="http://wwwmaths.anu.edu.au/~johnm/r/dsets/">http://wwwmaths.anu.edu.au/~johnm/r/dsets/</a></p><p>5、R上做spatial analysis<br><a href="http://scc.stat.ucla.edu/page_attachments/0000/0094/spatial_R_1_09S.pdf">http://scc.stat.ucla.edu/page_attachments/0000/0094/spatial_R_1_09S.pdf</a></p><p>6、Workshop: Applied Spatial Statistics in R<br><a href="http://www.people.fas.harvard.edu/~zhukov/spatial.html">http://www.people.fas.harvard.edu/~zhukov/spatial.html</a></p><p>7、The R Project for Statistical Computing<br><a href="http://www.r-project.org/">http://www.r-project.org/</a></p><p>8、R-Project 中文网<br><a href="http://www.rproject.cn/">http://www.rproject.cn/</a></p><p>9、The R Project for Statistical Computing<br><a href="http://www.r-project.org/">http://www.r-project.org/</a></p><p>10、UCLA学习资源<br><a href="http://www.ats.ucla.edu/stat/">http://www.ats.ucla.edu/stat/</a></p><p>11、学习资料<br><a href="http://ftp.ctex.org/mirrors/CRAN/other-docs.html">http://ftp.ctex.org/mirrors/CRAN/other-docs.html</a></p><p>12、谢益辉<br><a href="http://yihui.name/cn/">http://yihui.name/cn/</a></p><p>13、格物堂<br><a href="http://yishuo.org/">http://yishuo.org/</a></p><p>14、R作图-现代统计图形.pdf<br><a href="http://ishare.iask.sina.com.cn/f/17517158.html">http://ishare.iask.sina.com.cn/f/17517158.html</a></p><p>15、R语言学习笔记<br><a href="http://panda0411.com/category/%e6%88%91%e4%b9%9f%e4%b8%8d%e7%9f%a5%e9%81%93%e6%9c%89%e4%bb%80%e4%b9%88%e7%94%a8/%e7%bb%9f%e8%ae%a1%e5%88%86%e6%9e%90/">http://panda0411.com/category/%e6%88%91%e4%b9%9f%e4%b8%8d%e7%9f%a5%e9%81%93%e6%9c%89%e4%bb%80%e4%b9%88%e7%94%a8/%e7%bb%9f%e8%ae%a1%e5%88%86%e6%9e%90/</a></p><p>16、R语言：优雅、卓越的统计分析及绘图环境<br><a href="http://www.programmer.com.cn/10588/">http://www.programmer.com.cn/10588/</a><br><a href="http://cos.name/2012/05/r-you-ready/">http://cos.name/2012/05/r-you-ready/</a></p><p>17、谢益辉，郑冰(2008). R 语言的历史背景、发展历程和现状. 1st China R Conference<br><a href="http://cos.name/wp-content/uploads/2008/12/the-history-of-r-language-and-current-developments.ppt">http://cos.name/wp-content/uploads/2008/12/the-history-of-r-language-and-current-developments.ppt</a></p><p>18、R Bloggers<br><a href="http://www.r-bloggers.com/">http://www.r-bloggers.com/</a></p><p>19、rwiki：<a href="http://rwiki.sciviews.org/doku.php">http://rwiki.sciviews.org/doku.php</a></p><p>20、Rmetrics：<a href="https://www.rmetrics.org/">https://www.rmetrics.org/</a></p><p>21、The Omega Project for Statistical Computing<br><a href="http://www.omegahat.org/">http://www.omegahat.org/</a></p><p>22、Google和facebook如何应用R进行数据挖掘<br><a href="http://www.chinakdd.com/article-2455MSh71C75413.html#0-tsina-1-25515-397232819ff9a47a7b7e80a40613cfe1">http://www.chinakdd.com/article-2455MSh71C75413.html#0-tsina-1-25515-397232819ff9a47a7b7e80a40613cfe1</a></p><p>23、R in a Nutshell数据集：<a href="http://examples.oreilly.com/9780596801717/">http://examples.oreilly.com/9780596801717/</a></p><p>24、统计之都：<a href="http://cos.name/cn/">http://cos.name/cn/</a></p><p>25、Statistics and R for Linguists - a reading list <a href="http://szamitogepesnyelveszet.blogspot.hu/2012/08/statistics-and-r-for-linguists-reading.html">http://szamitogepesnyelveszet.blogspot.hu/2012/08/statistics-and-r-for-linguists-reading.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Top 5 Redis use cases</title>
      <link href="/2015/08/07/2015-Top-5-Redis-use-cases/"/>
      <url>/2015/08/07/2015-Top-5-Redis-use-cases/</url>
      
        <content type="html"><![CDATA[<p>原文: <a href="http://objectrocket.com/blog/how-to/top-5-redis-use-cases">http://objectrocket.com/blog/how-to/top-5-redis-use-cases</a></p><p>In this post, we’ll explain some of the most common Redis use cases and different characteritics that are influencing these choices.</p><h4 id="1-Session-Cache"><a href="#1-Session-Cache" class="headerlink" title="1. Session Cache"></a>1. Session Cache</h4><p>One of the most apparent use cases for Redis is using it as a session cache. The advantages of using Redis over other session stores, such as Memcached, is that Redis offers persistence. While maintaining a cache isn’t typically mission critical with regards to consistency, most users wouldn’t exactly enjoy if all their cart sessions went away, now would they?</p><p>Luckily, with the steam Redis has picked up over the years, it’s pretty easy to find documentation on how to use Redis appropriately for session caching. Even the well-known ecommerce platform Magento has a plug in for Redis!</p><h4 id="2-Full-Page-Cache-FPC"><a href="#2-Full-Page-Cache-FPC" class="headerlink" title="2. Full Page Cache (FPC)"></a>2. Full Page Cache (FPC)</h4><p>Outside of your basic session tokens, Redis provides a very easy FPC platform to operate in. Going back to consistency, even across restarts of Redis instances, with disk persistence your users won’t see a decrease in speed for their page loads—a drastic change from something like PHP native FPC.</p><p>To use Magento as an example again, Magento offers a plugin to utilize Redis as a full page cache backend.</p><p>As well, for your WordPress users out there, Pantheon has an awesome plugin named wp-redis to help you achieve the fastest page loads you’ve ever seen!</p><h4 id="3-Queues"><a href="#3-Queues" class="headerlink" title="3. Queues"></a>3. Queues</h4><p>Taking advantage of Redis’ in memory storage engine to do list and set operations makes it an amazing platform to use for a message queue. Interacting with Redis as a queue should feel native to anyone used to using push/pop operations with lists in programming languages such as Python.</p><p>If you do a quick Google search on “Redis queues,” you’ll soon see that there are tons of open-source projects out there aimed at making Redis an awesome backend utility for all your queuing needs. Celery, as an example, has a backend using Redis as a broker that you can check out here.</p><h4 id="4-Leaderboards-Counting"><a href="#4-Leaderboards-Counting" class="headerlink" title="4. Leaderboards/Counting"></a>4. Leaderboards/Counting</h4><p>Redis does an amazing job at increments and decrements since it’s in-memory. Sets and sorted sets also make our lives easier when trying to do these kinds of operations, and Redis just so happens to offer both of these data structures. So to pull the top 10 users from a sorted set—we’ll call it “user_scores”—one can simply run the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ZRANGE user_scores 0 10<br></code></pre></td></tr></table></figure><p>Of course, this is assuming you’re ranking users on an incremental score. If you wanted to return both the users and their score, you could run something such as:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ZRANGE user_scores 0 10 WITHSCORES<br></code></pre></td></tr></table></figure><p>Agora Games has an amazing example, using Ruby, of a leaderboard using Redis as it’s datastore that can be found here.</p><h4 id="5-Pub-Sub"><a href="#5-Pub-Sub" class="headerlink" title="5. Pub/Sub"></a>5. Pub/Sub</h4><p>Last (but certainly not least) is Redis’s Pub/Sub feature. The use cases for Pub/Sub are truly boundless. I’ve seen people use it for social network connections, for triggering scripts based on Pub/Sub events, and even a chat system built using Redis Pub/Sub! (No, really, check it out.)</p><p>Of all the features Redis provides, I feel like this one always gets the least amount of love, even though it has so much to offer users.</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>get和post获取网络文件</title>
      <link href="/2015/08/07/2015-get%E5%92%8Cpost%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6/"/>
      <url>/2015/08/07/2015-get%E5%92%8Cpost%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="file-get-content-以-GET-方式获取文件"><a href="#file-get-content-以-GET-方式获取文件" class="headerlink" title="file_get_content 以 GET 方式获取文件"></a><code>file_get_content</code> 以 <code>GET</code> 方式获取文件</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;http://www.straysh.com&#x27;</span>;<br><span class="hljs-title function_ invoke__">file_get_content</span>(<span class="hljs-variable">$url</span>)<br></code></pre></td></tr></table></figure><h4 id="fopen-以-GET-方式获取文件"><a href="#fopen-以-GET-方式获取文件" class="headerlink" title="fopen 以 GET 方式获取文件"></a><code>fopen</code> 以 <code>GET</code> 方式获取文件</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$url</span>, <span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-title function_ invoke__">stream_get_meta_data</span>(<span class="hljs-variable">$fp</span>);<br><span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>))<br>&#123;<br>    <span class="hljs-variable">$result</span> .= <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">1024</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$result</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br></code></pre></td></tr></table></figure><h4 id="file-get-content-以-POST-方式获取文件"><a href="#file-get-content-以-POST-方式获取文件" class="headerlink" title="file_get_content 以 POST 方式获取文件"></a><code>file_get_content</code> 以 <code>POST</code> 方式获取文件</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$params</span> = [<span class="hljs-string">&#x27;id&#x27;</span>=&gt;<span class="hljs-string">&#x27;7&#x27;</span>];<br><span class="hljs-variable">$params</span> = <span class="hljs-title function_ invoke__">http_build_query</span>(<span class="hljs-variable">$params</span>);<br><br><span class="hljs-variable">$options</span> = [<br>    <span class="hljs-string">&#x27;http&#x27;</span>=&gt; [<br>        <span class="hljs-string">&#x27;method&#x27;</span> =&gt; <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-string">&#x27;header&#x27;</span> =&gt; <span class="hljs-string">&#x27;Content-type: application/x-www-form-urlencoded\r\nContent-Length&#x27;</span>.<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$params</span>).<span class="hljs-string">&#x27;\r\n&#x27;</span>,<br>        <span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-variable">$params</span><br>    ]<br>];<br><span class="hljs-variable">$context</span> = <span class="hljs-title function_ invoke__">stream_context_create</span>(<span class="hljs-variable">$options</span>);<br><span class="hljs-title function_ invoke__">file_get_content</span>(<span class="hljs-variable">$url</span>, <span class="hljs-literal">false</span>, <span class="hljs-variable">$context</span>);<br></code></pre></td></tr></table></figure><h4 id="fsockopen-以-GET-方式获取文件-包括header和body"><a href="#fsockopen-以-GET-方式获取文件-包括header和body" class="headerlink" title="fsockopen 以 GET 方式获取文件,包括header和body."></a><code>fsockopen</code> 以 <code>GET</code> 方式获取文件,包括<code>header</code>和<code>body</code>.</h4><p>注: <code>fsockopen</code> 需要开启 <code>allow_url_fopen</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_url</span>(<span class="hljs-params"><span class="hljs-variable">$url</span>, <span class="hljs-variable">$cookie</span>=<span class="hljs-literal">false</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$url</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br>    <span class="hljs-variable">$query</span> = <span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;path&#x27;</span>].<span class="hljs-string">&#x27;?&#x27;</span>.<span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;query&#x27;</span>];<br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;host&#x27;</span>], <span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;port&#x27;</span>] ? <span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;port&#x27;</span>] : <span class="hljs-number">80</span>, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$err</span>, <span class="hljs-number">30</span>);<br>    <br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fp</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-variable">$request</span> = <span class="hljs-string">&quot;GET <span class="hljs-subst">&#123;$query&#125;</span> HTTP/1.1\r\n&quot;</span>;<br>    <span class="hljs-variable">$request</span> .= <span class="hljs-string">&quot;Host:<span class="hljs-subst">&#123;$url[&#x27;host&#x27;]&#125;</span>\r\n&quot;</span>;<br>    <span class="hljs-variable">$request</span> .= <span class="hljs-string">&quot;Connection:Close\r\n&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$cookie</span>) <span class="hljs-variable">$request</span> .= <span class="hljs-string">&#x27;Cookie: &#123;$cookie&#125;\r\n&#x27;</span>;<br>    <span class="hljs-variable">$request</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>;<br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$request</span>);<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>))<br>    &#123;<br>        <span class="hljs-variable">$result</span> .= <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">1024</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><br><span class="hljs-comment">//获取body部分</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUrlHtml</span>(<span class="hljs-params"><span class="hljs-variable">$url</span>, <span class="hljs-variable">$cookie</span>=<span class="hljs-literal">false</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$body</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-variable">$rawdata</span> = <span class="hljs-title function_ invoke__">get_url</span>(<span class="hljs-variable">$url</span>, <span class="hljs-variable">$cookie</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$rawdata</span>)<br>    &#123;<br>        <span class="hljs-variable">$body</span> = <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$rawdata</span>, <span class="hljs-string">&quot;\r\n\r\n&quot;</span>);<br>        <span class="hljs-variable">$body</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$body</span>, <span class="hljs-number">4</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$body</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$body</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="fsockopen-以-POST-方式获取文件-包括header和body"><a href="#fsockopen-以-POST-方式获取文件-包括header和body" class="headerlink" title="fsockopen 以 POST 方式获取文件,包括header和body."></a><code>fsockopen</code> 以 <code>POST</code> 方式获取文件,包括<code>header</code>和<code>body</code>.</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$url</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$referer</span>==<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-variable">$referer</span> = <span class="hljs-string">&#x27;111&#x27;</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;port&#x27;</span>])) <span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;port&#x27;</span>] = <span class="hljs-number">80</span>;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>)<br>&#123;<br>    <span class="hljs-variable">$values</span>[] = <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$k&#125;</span>=&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$v</span>);<br>&#125;<br><span class="hljs-variable">$data_string</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-variable">$values</span>);<br><br><span class="hljs-variable">$request</span>  = <span class="hljs-string">&quot;POST <span class="hljs-subst">&#123;$url[&#x27;path&#x27;]&#125;</span> HTTP/1.1\r\n&quot;</span>;<br><span class="hljs-variable">$request</span> .= <span class="hljs-string">&quot;Host:$&#123;url[&#x27;host&#x27;]&#125;\r\n&quot;</span>;<br><span class="hljs-variable">$request</span> .= <span class="hljs-string">&quot;Referer:<span class="hljs-subst">&#123;$referer&#125;</span>\r\n&quot;</span>;<br><span class="hljs-variable">$request</span> .= <span class="hljs-string">&quot;Content-type:application/x-www-form-urlencoded\r\n&quot;</span>;<br><span class="hljs-variable">$request</span> .= <span class="hljs-string">&quot;Content-length:&quot;</span>.<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$data_string</span>).<span class="hljs-string">&quot;\r\n&quot;</span>;<br><span class="hljs-variable">$request</span> .= <span class="hljs-string">&quot;Connection:close\r\n&quot;</span>;<br><span class="hljs-variable">$request</span> .= <span class="hljs-string">&quot;Cookie: <span class="hljs-subst">&#123;$cookie&#125;</span>\r\n&quot;</span>;<br><span class="hljs-variable">$request</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>;<br><span class="hljs-variable">$request</span> .= <span class="hljs-variable">$data_string</span>.<span class="hljs-string">&quot;\r\n&quot;</span>;<br><span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;host&#x27;</span>], <span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;port&#x27;</span>]);<br><span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$request</span>);<br><span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>))<br>&#123;<br>    <span class="hljs-variable">$result</span> .= <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">1024</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br><span class="hljs-comment">//$result</span><br></code></pre></td></tr></table></figure><h4 id="使用curl"><a href="#使用curl" class="headerlink" title="使用curl"></a>使用<code>curl</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_CONNECTTIMEOUT, <span class="hljs-number">5</span>);<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型和构造函数</title>
      <link href="/2015/08/07/2015-%E5%8E%9F%E5%9E%8B%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
      <url>/2015/08/07/2015-%E5%8E%9F%E5%9E%8B%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="提问者：自己遇到的前端面试问题，请高手来帮忙解决。其他的感兴趣的同学也可以来看看，自己能不能答对。"><a href="#提问者：自己遇到的前端面试问题，请高手来帮忙解决。其他的感兴趣的同学也可以来看看，自己能不能答对。" class="headerlink" title="提问者：自己遇到的前端面试问题，请高手来帮忙解决。其他的感兴趣的同学也可以来看看，自己能不能答对。"></a>提问者：自己遇到的前端面试问题，请高手来帮忙解决。其他的感兴趣的同学也可以来看看，自己能不能答对。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> A = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;; <br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;&#125;; <br> <br><span class="hljs-keyword">var</span> B = &#123;&#125;; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(A.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//Function </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(B.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//Object </span><br> <br> <br> <br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>(); <br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;&#125;; <br> <br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>(); <br>b.<span class="hljs-property">constructor</span> = A.<span class="hljs-property">constructor</span>; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">constructor</span> == A);<span class="hljs-comment">//false </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">constructor</span> == b.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//false </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a <span class="hljs-keyword">instanceof</span> A);<span class="hljs-comment">//false </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b <span class="hljs-keyword">instanceof</span> A);<span class="hljs-comment">//true </span><br></code></pre></td></tr></table></figure><p>小弟对最后两个console.log的结果不明白，我觉得应该是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a <span class="hljs-keyword">instanceof</span> A);<span class="hljs-comment">// true </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b <span class="hljs-keyword">instanceof</span> A);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>但是在浏览器中试过了，确实是上面的答案，求解，提前谢谢各位。</p><h4 id="解答1："><a href="#解答1：" class="headerlink" title="解答1："></a>解答1：</h4><p>首先说明 instanceof 和 constructor 没有半毛钱关系，所以题主的问题有效代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> A = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;; <br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;&#125;;<span class="hljs-comment">// 这里的空对象为对象1 </span><br> <br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>(); <br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;&#125;;<span class="hljs-comment">// 这里的空对象为对象2 </span><br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>(); <br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a <span class="hljs-keyword">instanceof</span> A);<span class="hljs-comment">//false </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b <span class="hljs-keyword">instanceof</span> A);<span class="hljs-comment">//true </span><br></code></pre></td></tr></table></figure><p>特别注意我添加的两个注释，对象1和对象2并非同一个对象！</p><p>再来解释instanceof，具体可以参考ECMAScript官方文档和IBM 开发者社区的解释，简而言之，instanceof运算符返回 A 的 prototype 对象是否存在 a 的原型链中。</p><p>那么上面代码就可以用下面的图示说明：</p><p><img src="/images/articles/prototype_contructor_1.png" alt="prototype_contructor" title="prototype_contructor"></p><p>可以看到，a 的原型链上已经不存在 A 的 prototype 对象，因此console.log(a instanceof A);//false，而 b 的原型链上存在 A 的 prototype 对象，因此console.log(b instanceof A);//true</p><h4 id="解答2："><a href="#解答2：" class="headerlink" title="解答2："></a>解答2：</h4><ol><li>a instancof A 检查a的原型链中是否存在A.prototype</li></ol><p>2)每一个js对象都有一个proto属性(标准表示[[prototype]])</p><p>proto是普通对象的隐式属性，在new的时候，会指向prototype所指的对象;new出来的对象是没有prototype属性的</p><p>proto实际上是某个对象的属性，而prototype则是属于构造函数的属性,prototype指向的是一个实体对象，也就是其有proto属性;</p><p>通过proto属性的串联构建了一个对象的原型访问链，起点为一个具体的对象，终点在Object.prototype,其proto( [[ prototype ]]) )为null</p><p>3)constrcutor 为对象的构造函数对象，存在于prototype对象(原型对象)中，只要不对prototype对象重新复制,constructor都指向构造函数自身</p><p>默认的构造函数为function object()</p><p>那么我们来分析下题目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//和 function A()&#123;&#125; 相同，只不过原题通过匿名函数表达式的方式而非函数声明的方式来生成一个函数对象 </span><br><span class="hljs-keyword">var</span> A = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;; <br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;&#125;; <br><span class="hljs-comment">//此时对构造函数对象A的prototype属性重新复制,constructor属性不见了，此时  console.log(A.prototype.constructor == A);//false, console.log(A.prototype.constructor);// function Object() </span><br><span class="hljs-comment">//如果不执行  A.prototype = &#123;&#125;; 那么 console.log(A.prototype.constructor == A);//true , console.log(A.prototype.constructor);// function A() </span><br><span class="hljs-comment">//为了和第2次出现 A.prototype = &#123;&#125;;有直观的区别，我们添加以下语句 </span><br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<span class="hljs-attr">first</span>:<span class="hljs-string">&#x27;first&#x27;</span>&#125;; <br> <br><span class="hljs-keyword">var</span> B = &#123;&#125;; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(A.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//Function 函数的构造函数为 function Function() </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(B.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//Object 普通object的构造函数为 function Object() </span><br> <br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<span class="hljs-comment">//新建一个对象a, </span><br><span class="hljs-comment">//此时执行  </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//function Object()  </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">constructor</span>==A);<span class="hljs-comment">//false  </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a <span class="hljs-keyword">instanceof</span> A);<span class="hljs-comment">//true a.__proto__指向A构造函数的prototype对象  Object &#123;first: &quot;first&quot;&#125; </span><br> <br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;&#125;;<span class="hljs-comment">//修改构造函数A的prototype属性，与第1次出现有所区别，添加以下语句 </span><br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<span class="hljs-attr">second</span>:<span class="hljs-string">&quot;second&quot;</span>&#125;;<span class="hljs-comment">//此时的A构造函数的prototype属性值和定义A的时候就不同了 </span><br><span class="hljs-comment">//这个时候我们再调用 </span><br><span class="hljs-comment">//console.log(a.constructor==A); </span><br><span class="hljs-comment">//console.log(a instanceof A); </span><br><span class="hljs-comment">// 会出现什么情况呢 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">constructor</span>==A);<span class="hljs-comment">//false </span><br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a <span class="hljs-keyword">instanceof</span> A);<span class="hljs-comment">//false </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a.<span class="hljs-property">__proto__</span> );<span class="hljs-comment">//Object &#123;first: &quot;first&quot;&#125; 和 当前A.prototype已经不同了，也就是说构造函数prototype的变话不影响已经创建的对象， </span><br><span class="hljs-comment">//这个道理和 var b=2,a=b;console.log(a); console.log(b); b=3; ;console.log(a); console.log(b);相同 </span><br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//function Object() </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(A.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//function Function () </span><br> <br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<span class="hljs-comment">//在新建一个对象B,在修改了的A.prototype的基础上 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( b.<span class="hljs-property">__proto__</span> );<span class="hljs-comment">//Object &#123;second:&quot;second&quot;&#125; </span><br> <br>b.<span class="hljs-property">constructor</span> = A.<span class="hljs-property">constructor</span>;<span class="hljs-comment">//此时不会修改原型链上的constructor属性，实在对象不上添加了一个 名为constructor的普通属性，和原型上的constructor完全无关 </span><br><span class="hljs-comment">//多说一句,读取属性值或调用方法时会涉及到原型链上属性的查找规则，设置属性不适用，直接把属性添加到b上 (会有些细小的不同，具体可参考你不知道的javascript P144 5.1.2) </span><br><span class="hljs-comment">// b.constructor 为 Function </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">constructor</span> == A);<span class="hljs-comment">//false  a.constructor 为 Object </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">constructor</span> == b.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//false   b.constructor 为 Function </span><br><span class="hljs-comment">// A.prototype -&gt; &#123;second:&quot;second&quot;&#125;; </span><br><span class="hljs-comment">// b.__proto__ -&gt; Object &#123;second:&quot;second&quot;&#125; </span><br><span class="hljs-comment">// a. __proto__ -&gt;Object &#123;first: &quot;first&quot;&#125; </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a <span class="hljs-keyword">instanceof</span> A);<span class="hljs-comment">//false  </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b <span class="hljs-keyword">instanceof</span> A);<span class="hljs-comment">//true </span><br></code></pre></td></tr></table></figure><h4 id="解答3"><a href="#解答3" class="headerlink" title="解答3"></a>解答3</h4><ol><li><p>首先，instanceof 到底比较的什么？<br>instanceof 比较的是否能在实例的原型对象链中找到 与构造函数（第二个参数）的prototype属性所指向的原型对象，能找到就返回true，反之false；</p></li><li><p>方法A的原型被篡改为 Object （A.prototype = {}）经过这一步之后，</p></li></ol><p>实例 a.[[proto]] = function A(){}.prototype !!//注意，此时这个加粗的prototype已经变成了{}了!</p><p>而constructor是原型对象的属性，所以 a.constructor == function Object(){} !!// {}根据自身的原型链找到</p><p>A.[[proto]] = function Function(){}.prototype //</p><p>A.constructor = function Function(){} //</p><p>显然 A.constructor != a.constructor ;</p><p>下一个比较就同理了。</p><h4 id="解答4"><a href="#解答4" class="headerlink" title="解答4"></a>解答4</h4><p>constructor是挂在prototype下的，当A.prototype={}的时候，constructor被删除了。所以a是false,而b又从新设置了constructor指向A,这时候b是true</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash FAQ</title>
      <link href="/2015/08/06/2015-bash-FAQ/"/>
      <url>/2015/08/06/2015-bash-FAQ/</url>
      
        <content type="html"><![CDATA[<ul><li><p>pstree</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">straysh ~]<span class="hljs-variable">$ps</span> -ef|grep nginx<br>root      7342  1962  0 10:11 ?        00:00:00 nginx: master process nginx<br>www       7343  7342  0 10:11 ?        00:00:00 nginx: worker process<br>www       7344  7342  0 10:11 ?        00:00:00 nginx: worker process<br>www       7345  7342  0 10:11 ?        00:00:00 nginx: worker process<br>www       7346  7342  0 10:11 ?        00:00:00 nginx: worker process<br>www       7347  7342  0 10:11 ?        00:00:00 nginx: worker process<br>www       7348  7342  0 10:11 ?        00:00:00 nginx: worker process<br>www       7349  7342  0 10:11 ?        00:00:00 nginx: worker process<br>www       7350  7342  0 10:11 ?        00:00:00 nginx: worker process<br>straysh   7595  7328  0 10:17 pts/4    00:00:00 grep --color=auto nginx<br>straysh ~]<span class="hljs-variable">$pstree</span> -ph 7342<br>nginx(7342)─┬─nginx(7343)<br>            ├─nginx(7344)<br>            ├─nginx(7345)<br>            ├─nginx(7346)<br>            ├─nginx(7347)<br>            ├─nginx(7348)<br>            ├─nginx(7349)<br>            └─nginx(7350)<br></code></pre></td></tr></table></figure></li><li><p>ps </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">straysh ~]<span class="hljs-variable">$ps</span> -Lf 1656<br>UID        PID  PPID   LWP  C NLWP STIME TTY      STAT   TIME CMD<br>root      1656     1  1656  0    1 08:52 ?        Ss     0:00 /usr/sbin/apache2 -k start<br></code></pre></td></tr></table></figure></li><li><p>pstack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pstack 4551<br>Thread 7 (Thread 1084229984 (LWP 4552)):<br><span class="hljs-comment">#0  0x000000302afc63dc in epoll_wait () from /lib64/tls/libc.so.6</span><br><span class="hljs-comment">#1  0x00000000006f0730 in ub::EPollEx::poll ()</span><br><span class="hljs-comment">#2  0x00000000006f172a in ub::NetReactor::callback ()</span><br><span class="hljs-comment">#3  0x00000000006fbbbb in ub::UBTask::CALLBACK ()</span><br><span class="hljs-comment">#4  0x000000302b80610a in start_thread () from /lib64/tls/libpthread.so.0</span><br><span class="hljs-comment">#5  0x000000302afc6003 in clone () from /lib64/tls/libc.so.6</span><br><span class="hljs-comment">#6  0x0000000000000000 in ?? ()</span><br></code></pre></td></tr></table></figure></li><li><p>find and mv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find cache_bak/ -<span class="hljs-built_in">type</span> f |xargs -i <span class="hljs-built_in">mv</span> <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span> cache/<br></code></pre></td></tr></table></figure></li><li><p>quick delete files</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -<span class="hljs-built_in">type</span> f -d<br></code></pre></td></tr></table></figure></li><li><p>重命名文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rename -v <span class="hljs-string">&#x27;s/1_//&#x27;</span> *.html<br></code></pre></td></tr></table></figure></li><li><p>去除重复的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;!x[$0]++&#x27;</span> 8.txt &gt; 8_no_dup.txt<br></code></pre></td></tr></table></figure></li><li><p>删除文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">find . -type f -exec grep -H &#x27;您要查看的商户不存在&#x27; &#123;&#125; \; -delete<br></code></pre></td></tr></table></figure></li><li><p>从文本中匹配特定的字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s <span class="hljs-string">&quot;http://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=1&amp;tn=baidu&amp;wd=热干面&amp;rsv_pq=bd5722370004bbe0&amp;rsv_t=5d19sLQJWuSZFFDWWaH%2Bd%2BVzn9pzgmbLu23Z%2FnUrfAjj%2FaEyTSFswdcEbX0&amp;rsv_enter=1&amp;rsv_sug3=12&amp;rsv_sug1=2&amp;rsv_sug2=0&amp;inputT=3330&amp;rsv_sug4=3628&quot;</span> | sed -nr <span class="hljs-string">&#x27;s/.*百度为您找到相关结果约(.*)个.*/\1/p&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>字符串替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#http://tldp.org/LDP/abs/html/string-manipulation.html</span><br>result=1,280,000<br>result=<span class="hljs-variable">$&#123;result//,/&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;result&#125;</span> <span class="hljs-comment">#1280000</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浮动</title>
      <link href="/2015/08/04/2015-%E6%B5%AE%E5%8A%A8/"/>
      <url>/2015/08/04/2015-%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="浮动的定义"><a href="#浮动的定义" class="headerlink" title="浮动的定义"></a>浮动的定义</h4><p>A float is a box that is shifted to the left or right on the current line. The most interesting characteristic of a float (or “floated” or “floating” box) is that content may flow along its side (or be prohibited from doing so by the “clear” property). Content flows down the right side of a left-floated box and down the left side of a right-floated box.</p><h4 id="浮动优先"><a href="#浮动优先" class="headerlink" title="浮动优先"></a>浮动优先</h4><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js动画</title>
      <link href="/2015/08/04/2015-js%E5%8A%A8%E7%94%BB/"/>
      <url>/2015/08/04/2015-js%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>游戏动画，Flash动画里一个比较重要的概念是 帧频 ，即每秒播放多少帧动画，一般动画是30帧/秒，单位为fps（frames per second）。</p><p>对于匀速运动来说：如果一个动画的持续时间duration为500ms，帧频frequence为30fps，则总帧数frames为 (500/1000)*30 = 15 ，即该动画过程有15个“画面”，每走一帧，都计算出一个画面： 画面当前位置 = 开始位置 + (当前帧/总帧数)(结束位置-开始位置) ，如果当前帧是最后一帧，则动画结束。其中setTimeout或setInterval每隔 (500/15)ms 时间段调用一次函数，即计算一个画面。</p><p>来看下线性运动Linear缓动算法函数，t表示当前帧，b表示开始位置，c表示发生偏移的距离值，即当前位置-开始位置，d表示总帧数，符合上面的推理解释，对于其他的算法函数，道理其实都是一样，只不过在运动过程中的曲线不同，有些呈现抛物线，有些呈现线性指数，对于数学感兴趣的可以研究下这些算法函数，我也是略知皮毛：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Linear</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">t, b, c, d</span>) &#123;<br>  <span class="hljs-keyword">return</span> c * t / d + b;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVN_FAQ</title>
      <link href="/2015/08/04/2015-SVN-FAQ/"/>
      <url>/2015/08/04/2015-SVN-FAQ/</url>
      
        <content type="html"><![CDATA[<h1 id="从trunk向branch合并"><a href="#从trunk向branch合并" class="headerlink" title="从trunk向branch合并"></a>从trunk向branch合并</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /branch<br>svn merge ^/trunk<br></code></pre></td></tr></table></figure><h1 id="从branch合并到trunk"><a href="#从branch合并到trunk" class="headerlink" title="从branch合并到trunk"></a>从branch合并到trunk</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn merge -rooxx:HEAD ^/branch/abcd ^/trunk<br></code></pre></td></tr></table></figure><h1 id="回滚一个文件到指定版本"><a href="#回滚一个文件到指定版本" class="headerlink" title="回滚一个文件到指定版本"></a>回滚一个文件到指定版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn revert -r125:123 foo.php<br></code></pre></td></tr></table></figure><h1 id="撤销所有修改"><a href="#撤销所有修改" class="headerlink" title="撤销所有修改"></a>撤销所有修改</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn revert -R .<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache_faqs</title>
      <link href="/2015/08/04/2015-apache-faqs/"/>
      <url>/2015/08/04/2015-apache-faqs/</url>
      
        <content type="html"><![CDATA[<ul><li>反向代理<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;VirtualHost *:80&gt;<br>    ... ...<br>    <br>    #反向代理设置<br>    ProxyPass /dev http://activity.lifemenu.local:8010<br>    ProxyPassReverse /dev http://activity.lifemenu.local:8010<br>&lt;/VirtualHost&gt;<br>&lt;VirtualHost *:8010&gt;<br>    ServerName activity.lifemenu.local<br>    DocumentRoot /data0/www/Lifemenu/branches/weixin_20151026/public<br><br>    ErrorLog /data3/logs/apache/error.log<br>    CustomLog /data3/logs/apache/access.log combined<br>    &lt;Directory /data0/www/Lifemenu/branches/weixin_20151026/public&gt;<br>        AllowOverride All<br>        Options -Indexes +FollowSymLinks -MultiViews<br>        Require all granted<br>    &lt;/Directory&gt;<br>&lt;/VirtualHost&gt;<br>#针对单独的ip做反向代理<br>&lt;Location /bar&gt;<br>    Allow from 1.2.3.4 2.3.4.5 ...<br>    ProxyPass http://example.com/bar<br>    ProxyPassReverse http://example.com/bar<br>&lt;/Location&gt;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx+lua+shell动态剪切图片</title>
      <link href="/2015/08/04/2015-nginx-lua-shell%E5%8A%A8%E6%80%81%E5%89%AA%E5%88%87%E5%9B%BE%E7%89%87/"/>
      <url>/2015/08/04/2015-nginx-lua-shell%E5%8A%A8%E6%80%81%E5%89%AA%E5%88%87%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>假设<a href="http://static.yumcircle.com/1.jpg%E8%BF%99%E4%B8%AA%E6%98%AF%E6%BA%90%E5%9B%BE%E7%89%87">http://static.yumcircle.com/1.jpg这个是源图片</a></p><p>那么在调用缩略图时，使用<a href="http://static.yumcircle.com/1!200%C3%97100.jpg">http://static.yumcircle.com/1!200×100.jpg</a> 就会生成一张200宽100高的图片 !200×100就是具体的参数</p><p>ok，下面说一下我定义的参数:</p><h4 id="1-固定尺寸缩放-这个参数会将源图强制缩放到这个尺寸，所以可能会有所变形"><a href="#1-固定尺寸缩放-这个参数会将源图强制缩放到这个尺寸，所以可能会有所变形" class="headerlink" title="1.固定尺寸缩放(这个参数会将源图强制缩放到这个尺寸，所以可能会有所变形)"></a>1.固定尺寸缩放(这个参数会将源图强制缩放到这个尺寸，所以可能会有所变形)</h4><ul><li>!200×100 将源图缩放为宽200x高100</li><li>!200 将源图缩放为宽200x高200</li><li>!200×100-50 将源图缩放为宽200x高100 并且图片质量为50 （这个是为了给手机端使用的，因为手机端可能需要图片的size更小一些)</li><li>!200-50 将源图缩放为宽200x高200 并且图片质量为50</li></ul><h4 id="2-等比缩放"><a href="#2-等比缩放" class="headerlink" title="2.等比缩放"></a>2.等比缩放</h4><ul><li>:w200 将源图宽缩放为200，高度=原图宽高比自适应，（意思是，强制将源图的宽缩到200，高按原图比例缩放)</li><li>:h200 将源图高缩放为200，宽自适应</li><li>:m200 将源图以（宽，高那个值大，以哪个为准，进行缩放，比如源图是300×400，那就会以高为准，先将高缩到200），但是如果宽高都没有达到，而不处理<br>同时也支持 :w200-50 :h200-50 :m200-50 的图片质量</li></ul><h4 id="3-中心剪辑"><a href="#3-中心剪辑" class="headerlink" title="3.中心剪辑"></a>3.中心剪辑</h4><ul><li>@200×300 将源图以（宽，高那个值小，以哪个为准，进行缩放，并在缩放后的图片，以另一边中间点（就是正中间，进行剪辑）</li><li>@200×300-50 同时支持图片质量</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#固定大小</span><br><span class="hljs-section">location</span> <span class="hljs-regexp">~ (.*)!(\d+)x(\d+).(gif|jpg|jpeg|png)$</span> &#123;<br>    <span class="hljs-attribute">root</span>   /data0/www/yumCircle/public;<br><br>    <span class="hljs-comment">#bucketname = static</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$bucketname</span> static;<br>    <span class="hljs-comment">#原图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$srcPath</span> /data0/www/yumCircle/public;<br>    <span class="hljs-comment">#目标图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$destPath</span> /data0/www/yumCircle/public;<br><br>    <span class="hljs-comment">#处理类型</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$type</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-attribute">if</span> (!-f <span class="hljs-variable">$request_filename</span>)&#123;<br>        <span class="hljs-comment">#rewrite ~* /public/images/tpl-design/profile-photo-02.jpg;</span><br>        <span class="hljs-attribute">rewrite_by_lua_file</span> conf/image_resize_thumb.lua;<br>    &#125;<br>    <span class="hljs-comment">#expires 30d;</span><br>&#125;<br><br><span class="hljs-comment">#宽高相等</span><br><span class="hljs-section">location</span> <span class="hljs-regexp">~ (.*)!(\d+).(gif|jpg|jpeg|png)$</span>  &#123;<br>    <span class="hljs-attribute">root</span>   /data0/www/yumCircle/public/images/uploaded/thumbnails;<br><br>    <span class="hljs-comment">#bucketname = static</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$bucketname</span> static;<br>    <span class="hljs-comment">#原图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$srcPath</span> /data0/www/yumCircle/public/images/uploaded/origin;<br>    <span class="hljs-comment">#目录图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$destPath</span> /data0/www/yumCircle/public/images/uploaded/thumbnails;<br><br>    <span class="hljs-comment">#处理类型</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$type</span> <span class="hljs-number">3</span>;<br><br>    <span class="hljs-attribute">if</span> (!-f <span class="hljs-variable">$request_filename</span>) &#123;<br>        <span class="hljs-attribute">rewrite_by_lua_file</span> /data0/www/yumCircle/image_resize_thumb.lua;<br>    &#125;<br>    <span class="hljs-comment">#expires 30d;</span><br>&#125;<br><br><span class="hljs-comment">#宽高相等 质量</span><br><span class="hljs-section">location</span> <span class="hljs-regexp">~ (.*)!(\d+)-(\d+).(gif|jpg|jpeg|png)$</span>  &#123;<br>    <span class="hljs-attribute">root</span>   /data0/www/yumCircle/public/images/uploaded/thumbnails;<br><br>    <span class="hljs-comment">#bucketname = static</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$bucketname</span> static;<br>    <span class="hljs-comment">#原图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$srcPath</span> /data0/www/yumCircle/public/images/uploaded/origin;<br>    <span class="hljs-comment">#目录图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$destPath</span> /data0/www/yumCircle/public/images/uploaded/thumbnails;<br><br>    <span class="hljs-comment">#处理类型</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$type</span> <span class="hljs-number">4</span>;<br><br>    <span class="hljs-attribute">if</span> (!-f <span class="hljs-variable">$request_filename</span>) &#123;<br>        <span class="hljs-attribute">rewrite_by_lua_file</span> /data0/www/yumCircle/image_resize_thumb.lua;<br>    &#125;<br>    <span class="hljs-comment">#expires 30d;</span><br>&#125;<br><br><span class="hljs-comment">#宽高指定且等比</span><br><span class="hljs-section">location</span> <span class="hljs-regexp">~ (.*):(w|h|m)(\d+).(gif|jpg|jpeg|png)$</span>  &#123;<br>    <span class="hljs-attribute">root</span>   /data0/www/yumCircle/public/images/uploaded/thumbnails;<br><br>    <span class="hljs-comment">#bucketname = static</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$bucketname</span> static;<br>    <span class="hljs-comment">#原图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$srcPath</span> /data0/www/yumCircle/public/images/uploaded/origin;<br>    <span class="hljs-comment">#目录图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$destPath</span> /data0/www/yumCircle/public/images/uploaded/thumbnails;<br><br>    <span class="hljs-comment">#处理类型</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$type</span> <span class="hljs-number">5</span>;<br><br>    <span class="hljs-attribute">if</span> (!-f <span class="hljs-variable">$request_filename</span>) &#123;<br>        <span class="hljs-attribute">rewrite_by_lua_file</span> /data0/www/yumCircle/image_resize_thumb.lua;<br>    &#125;<br>    <span class="hljs-comment">#expires 30d;</span><br>&#125;<br><br><span class="hljs-comment">#宽高指定且等比 质量</span><br><span class="hljs-section">location</span> <span class="hljs-regexp">~ (.*):(w|h|m)(\d+)-(\d+).(gif|jpg|jpeg|png)$</span>  &#123;<br>    <span class="hljs-attribute">root</span>   /data0/www/yumCircle/public/images/uploaded/thumbnails;<br><br>    <span class="hljs-comment">#bucketname = static</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$bucketname</span> static;<br>    <span class="hljs-comment">#原图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$srcPath</span> /data0/www/yumCircle/public/images/uploaded/origin;<br>    <span class="hljs-comment">#目录图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$destPath</span> /data0/www/yumCircle/public/images/uploaded/thumbnails;<br><br>    <span class="hljs-comment">#处理类型</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$type</span> <span class="hljs-number">6</span>;<br><br>    <span class="hljs-attribute">if</span> (!-f <span class="hljs-variable">$request_filename</span>) &#123;<br>        <span class="hljs-attribute">rewrite_by_lua_file</span> /data0/www/yumCircle/image_resize_thumb.lua;<br>    &#125;<br>    <span class="hljs-comment">#expires 30d;</span><br>&#125;<br><br><span class="hljs-comment">#宽高指定且剪切</span><br><span class="hljs-section">location</span> <span class="hljs-regexp">~ (.*)\@(\d+)x(\d+).(gif|jpg|jpeg|png)$</span>  &#123;<br>    <span class="hljs-attribute">root</span>   /data0/www/yumCircle/public/images/uploaded/thumbnails;<br><br>    <span class="hljs-comment">#bucketname = static</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$bucketname</span> static;<br>    <span class="hljs-comment">#原图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$srcPath</span> /data0/www/yumCircle/public/images/uploaded/origin;<br>    <span class="hljs-comment">#目录图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$destPath</span> /data0/www/yumCircle/public/images/uploaded/thumbnails;<br><br>    <span class="hljs-comment">#处理类型</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$type</span> <span class="hljs-number">7</span>;<br><br>    <span class="hljs-attribute">if</span> (!-f <span class="hljs-variable">$request_filename</span>) &#123;<br>        <span class="hljs-attribute">rewrite_by_lua_file</span> /data0/www/yumCircle/image_resize_thumb.lua;<br>    &#125;<br>    <span class="hljs-comment">#expires 30d;</span><br>&#125;<br><br><span class="hljs-comment">#宽高指定且剪切 质量</span><br><span class="hljs-section">location</span> <span class="hljs-regexp">~ (.*)\@(\d+)x(\d+)-(\d+).(gif|jpg|jpeg|png)$</span>  &#123;<br>    <span class="hljs-attribute">root</span>   /data0/www/yumCircle/public/images/uploaded/thumbnails;<br><br>    <span class="hljs-comment">#bucketname = static</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$bucketname</span> static;<br>    <span class="hljs-comment">#原图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$srcPath</span> /data0/www/yumCircle/public/images/uploaded/origin;<br>    <span class="hljs-comment">#目录图片路径</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$destPath</span> /data0/www/yumCircle/public/images/uploaded/thumbnails;<br><br>    <span class="hljs-comment">#处理类型</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$type</span> <span class="hljs-number">8</span>;<br><br>    <span class="hljs-attribute">if</span> (!-f <span class="hljs-variable">$request_filename</span>) &#123;<br>        <span class="hljs-attribute">rewrite_by_lua_file</span> /data0/www/yumCircle/image_resize_thumb.lua;<br>    &#125;<br>    <span class="hljs-comment">#expires 30d;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>豆瓣电影TOP250</title>
      <link href="/2015/08/03/2015-%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250/"/>
      <url>/2015/08/03/2015-%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1TOP250/</url>
      
        <content type="html"><![CDATA[<p>一些深度影迷可能会想到 imdb.com (互联网电影数据库) 所采用的贝叶斯公式[见附注]，这个公式的思路就是通过每部影片的［评分人数］作为调节排序的杠杆：如果这部影片的评分人数低于一个预设值，则影片的最终得分会向全部影片的平均分拉低。</p><p>由此可见，平衡评分人数和得分，避免小众高分影片排前，是这个计算方法的出发点。可问题在于：调节整个榜单的排序主要依赖于这个［评分人数预设值］。如果它设置的很低，那么最终的排序结果，就是每部影片自身评分从高到低在排序；如果它被设置得过高，那么只适用高曝光率的影片。据说 imdb.com 的这个预设值从500一路调整到了25000，遗憾的是这个算法仍然无法很好的解决他们的问题。</p><p>附录： <a href="http://www.imdb.com/chart/top">imdb.com 的top榜单公开公式</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">The formula for calculating the Top Rated 250 Titles gives a true Bayesian estimate:<br><br>weighted rating (WR) = (v ÷ (v+m)) × R + (m ÷ (v+m)) × C<br><br>where:<br><br>R = average for the movie (mean) = (Rating) -单部电影的得分<br>v = number of votes for the movie = (votes) -单部电影的有效评分人数<br>m = minimum votes required to be listed in the Top 250 (currently 25000)  -入选top250榜单所需最低的有效评分人数<br>C = the mean vote across the whole report (currently 7.0)  -所有影片的平均分<br></code></pre></td></tr></table></figure><hr><ul><li><a href="http://blog.douban.com/douban/2013/07/04/2630/">算法工程师如何改进豆瓣电影 TOP250</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Little Redis Book</title>
      <link href="/2015/07/22/2015-The-Little-Redis-Book/"/>
      <url>/2015/07/22/2015-The-Little-Redis-Book/</url>
      
        <content type="html"><![CDATA[<h1 id="关于本书"><a href="#关于本书" class="headerlink" title="关于本书"></a>关于本书</h1><h2 id="许可"><a href="#许可" class="headerlink" title="许可"></a>许可</h2><p>本书《 The Little Redis Book 》基于 Attribution-NonCommercial 3.0 Unported license。你无须为本书付款。</p><p>你可以自由的复制，分发，修改和传阅本书。但请认可该书属于作者 Karl Seguin，并请勿将本书用于任何商业目的。</p><p>你可以在以下链接查看<em>完整的</em> <strong>许可文档</strong>:</p><p><a href="http://creativecommons.org/licenses/by-nc/3.0/legalcode">http://creativecommons.org/licenses/by-nc/3.0/legalcode</a></p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>Karl Seguin 在多领域有着丰富经验。他参与贡献 OSS 项目, 还是技术文档撰写人而且偶尔做做演讲。他写了许多关于 Redis 的文档，以及一些工具。他用 Redis，为休闲游戏开发者写了一个免费的评级和统计服务: <a href="http://mogade.com/">mogade.com</a>.</p><p>Karl 还编写了 <a href="http://openmymind.net/2011/3/28/The-Little-MongoDB-Book/">The Little MongoDB Book</a>，一本关于 MongoDB 的免费且流行的好书。<em>1</em></p><p>你可以在 <a href="http://openmymind.net/">http://openmymind.net</a> 找到他的 Blog，或者通过 <a href="http://twitter.com/karlseguin">@karlseguin</a>在 Twitter 上关注他。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>特别感谢 <a href="https://twitter.com/perryneal">Perry Neal</a>， 赐予我你的视野，精神，和热情。你赐予了我无尽的力量。感恩。</p><h2 id="最新版本"><a href="#最新版本" class="headerlink" title="最新版本"></a>最新版本</h2><p>本书最新代码可以在这里获得:<br><a href="http://github.com/karlseguin/the-little-redis-book">http://github.com/karlseguin/the-little-redis-book</a></p><h3 id="中文版本"><a href="#中文版本" class="headerlink" title="中文版本"></a>中文版本</h3><p>Karl 在 <a href="https://github.com/karlseguin/the-little-redis-book">the-little-redis-book</a> 的 Github 链接中给出了 <a href="https://github.com/JasonLai256">JasonLai256</a> 的 <a href="https://github.com/JasonLai256/the-little-redis-book">the-little-redis-book</a> 链接。但貌似 JasonLai256 最后一次更新是2012年了。内容上也和原文稍微有点出入，并且由于本人水平有限，无法提交自信正确的内容。因此重开一项目。如果你被搜索引擎引导到本工程，在此向你致歉，并希望有能力者且有时间者一同完善和同步本工程。你可以通过我的 邮箱 <a href="mailto:&#103;&#101;&#109;&#x69;&#x6e;&#x69;&#121;&#101;&#x6c;&#x6c;&#x6f;&#119;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#101;&#109;&#x69;&#x6e;&#x69;&#121;&#101;&#x6c;&#x6c;&#x6f;&#119;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a> 来联系我，或者通过 <a href="https://twitter.com/geminiyellow">@geminiyellow</a> 在 Twitter 上关注我。</p><p>最新中文版本基于在 <a href="https://github.com/karlseguin">karlseguin</a> Feb 9, 2014 提交的 <a href="https://github.com/karlseguin/the-little-redis-book/commit/3584df2c55ddcf9e2e3c06b3bd2d21723d3b1a54">#36</a> SHA 是：3584df2c55ddcf9e2e3c06b3bd2d21723d3b1a54</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在过去的几年中，在数据持久化和查询领域，技术和工具以惊人的速度在发展。可以这样说，终于再也不是关系型数据库独霸天下了，也就是说，数据库生态圈开始繁荣起来。</p><p>在众多的解决案和工具里面，对于我来说，Redis 是最激动人心的。为什么？首先因为它太容易学了。要掌握 Redis，用小时做单位足矣。其次，它在处理同一类问题的时候，用的方法基本类似。什么意思？Redis 并没有试图解决关于数据的一切问题。当你了解 Reids 之后，它能做什么不能做什么一目了然。当可以用它来做的时候，作为开发者，实在太爽了。</p><p>虽然你可以只用 Redis 结构件一个完整的系统，我想大多数人都会发现作为通用数据解决案的补充会更合适 - 不管是传统的关系型数据库，面向文档系统，或者是其他什么。它是那种用来实现特定功能的解决案。就是说，它更类似于一个索引引擎。你不会把你的整个应用都构筑在 Lucene 上。但当你需要一个好的搜索引擎的时候，它会提供更好的体验 - 不管对你还是你的用户。当然，这和 Redis 之于索引引擎之间的关系类似。</p><p>本书的目的在于为你掌握 Redis 打好基础。我们将把重点放在学习使用 Redis 的五种数据结构以及各种数据建模方法上。我们还会涉及一些关键的管理细节和调试技术。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>大家的学习方式不一样: 有些人喜欢动手实践，有些人喜欢看视频，还有些喜欢读文章。但是要理解 Redis ，没有什么会比动手实践更有效了。Redis 的安装非常容易，还有一个简单的 shell，我们可以在上面实现一切。让我们花几分钟将它安装到你机器上并运行起来。</p><h2 id="Windows-环境"><a href="#Windows-环境" class="headerlink" title="Windows 环境"></a>Windows 环境</h2><p>Redis 本身并不正式支持 Windows ，但也有可用选项。你当然是不会把它用到生产环境上的，但用在开发的时候，我从没遇到过什么限制。</p><p>来自微软开源技术公司(Microsoft Open Technologies, Inc.)的副本在这里 <a href="https://github.com/MSOpenTech/redis">https://github.com/MSOpenTech/redis</a>。同样,该解决案并不是为了生产环境准备的。</p><p>另一个方案，已经有一段时间了，在<a href="https://github.com/dmajkic/redis/downloads">https://github.com/dmajkic/redis/downloads</a>。你可以下载最新版本(应该是列表中最上面一个)。解压 zip 文件，根据你的环境架构，选择使用 <code>64bit</code> 或 <code>32bit</code> </p><h2 id="nix-和-MacOSX-环境"><a href="#nix-和-MacOSX-环境" class="headerlink" title="*nix 和 MacOSX 环境"></a>*nix 和 MacOSX 环境</h2><p>对于 *nix 和 Mac 用户，users, 从源码编译应该是你最好的选择。该版本，最新可用版本，在这里下载 <a href="http://redis.io/download">http://redis.io/download</a>。 编写本书时，最新版本是 2.6.2；用以下命令安装该版本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://redis.googlecode.com/files/redis-2.6.2.tar.gz<br>tar xzf redis-2.6.2.tar.gz<br><span class="hljs-built_in">cd</span> redis-2.6.2<br>make<br></code></pre></td></tr></table></figure><p>(当然，Redis 也可以通过各种包管理工具安装。比如说，MacOSX 用户通过 Homebrew 安装,只需要简单输入 <code>brew install redis</code>即可。)</p><p>如果你从源码编译，二进制文件被放在 <code>src</code> 文件夹下。进入 <code>src</code> 文件夹，通过 <code>cd src</code>。</p><h2 id="运行和链接-Redis"><a href="#运行和链接-Redis" class="headerlink" title="运行和链接 Redis"></a>运行和链接 Redis</h2><p>如果一切正常，一套可用的 Redis 二进制文件将在你手中诞生。Redis 有一套可执行文件。我们主要使用 Redis 服务和 Redis 命令行界面 (Redis-cli，一个类 DOS 客户端)。先让我们启动服务。在 Window 上，双击 <code>redis-server</code>。在 *nix/MacOSX 上，执行 <code>./redis-server</code>。</p><p>如果你读一下启动信息，你会看到有个警告是关于 <code>redis.conf</code> 文件找不到的。Redis 会转而使用内建的默认项，这对我们接下来的学习毫无影响。</p><p>下一步，打开 Redis 控制台，双击 <code>redis-cli</code> (Windows) 或者执行 <code>./redis-cli</code> (*nix/MacOSX)。它将会链接到本地运行的默认服务端口上 (6379)。</p><p>你可以测试一下是否所有运转正常，在命令行界面输入 <code>info</code> 。你应该会看到一大堆的键值对，它提供了大量的关于服务状态的信息。</p><p>如果你的安装有问题，我建议你到<a href="https://groups.google.com/forum/#!forum/redis-db">official Redis support group</a>去寻求帮助。</p><h1 id="Redis-驱动"><a href="#Redis-驱动" class="headerlink" title="Redis 驱动"></a>Redis 驱动</h1><p>很快你就会学到，Redis 的 API 描述做得非常好，就像代码中的一组方法一样。它非常简单并易于编程。也就是说，不管你是用命令行工具，或者用你喜欢的语言，所做的事情基本类似。因此，如果你想从一个编程语言开始学习它，完全没有问题。如果你想的话，去 <a href="http://redis.io/clients">client page</a> 下载相应的驱动。</p><h1 id="第一章-基础知识"><a href="#第一章-基础知识" class="headerlink" title="第一章 - 基础知识"></a>第一章 - 基础知识</h1><p>Redis 有什么特别之处？它主要用来解决什么类型的问题？在使用过程中，开发者应该注意什么问题？在我们开始回答这些问题之前，首先让我们来了解一下，Redis 是什么。</p><p>Redis 通常被描述为一个基于内存的，可持久化的，键值对方式的存储。我觉得这个描述不太准确。Redis 确实把所有的数据都放到内存中(稍后详述)，并且它确实可以把数据写到硬盘上用以持久化，但是它不单单是一个简单的键值对存储。纠正这种误解是非常重要的，否则你对 Redis 的看法，以及对它所能解决问题的能力的理解就会变得狭隘起来。</p><p>实际上，在 Redis 提供的五种不同的数据结构中，只有一种是典型的键值对结构。深刻理解这五种数据结构，它们的工作原理，它们提供的方法，以及怎样用这些数据结构去建模，是学习理解 Redis 的关键。 首先，让我们来弄明白，这些数据结构的具体含义。</p><p>如果我们把数据结构这个概念放到关系型数据库世界的话，那么我们可以说，关系型数据库提供了唯一一种数据结构 - 表。表又复杂又灵活。基本没有什么问题是表不能处理的，包括建模，存储或者是管理数据。然而，这种通用性也不是没有缺点。比如说，并不是所有东西都是那么简单，不是那么快捷，看起来像它应有的样子一样。就算可以，我们也不会用一个大而全的结构，我们不是通常会用更小更专的结构吗？确实有些东西我们做不了(或者说，做得不好)，但是可以肯定的是这样做我们可以得到简单和快速，对吧？</p><p>具体问题具体分析？我们不就是这样写代码的吗？你当然不会对所有数据都套用哈希表，也不会用 scalar 变量。对我来说，这正是 Redis 的做法。如果你要处理 scalars, lists, hashes, 或者 sets, 为什么不把他们直接存为 scalars, lists, hashes 和 sets？为什么仅仅是为了确认存在值，要去调用比 <code>exists(key)</code> 更复杂的方式或者要用比 O(1) (不管数据量有多少，查询的时间都是固定不变的)更慢的方式？</p><h1 id="The-Building-Blocks"><a href="#The-Building-Blocks" class="headerlink" title="The Building Blocks"></a>The Building Blocks</h1><h2 id="数据库-Databases"><a href="#数据库-Databases" class="headerlink" title="数据库(Databases)"></a>数据库(Databases)</h2><p>Redis 对数据库的定义和你熟知的概念是一致的。数据库中包含一组数据。典型的数据库用例是，把所有应用的数据都集中起来，但是以应用为单位把数据分隔保存。</p><p>在 Redis 中，数据库定位非常简单，通过一个标识数字，默认开始标识是 <code>0</code>。如果你想切换到不同的数据库，你可以通过使用 <code>select</code> 命令。在命令行界面，输入 <code>select 1</code>。Redis 会响应一个 <code>OK</code> 信息然后你的提示符应该会变成类似 <code>redis 127.0.0.1:6379[1]&gt;</code> 这样。如果你想切回默认数据库，只要在命令行界面输入 <code>select 0</code> 就可以了。</p><h2 id="命令，关键字和值-Commands-Keys-and-Values"><a href="#命令，关键字和值-Commands-Keys-and-Values" class="headerlink" title="命令，关键字和值(Commands, Keys and Values)"></a>命令，关键字和值(Commands, Keys and Values)</h2><p>虽然 Redis 不单是一个键值对存储，但是其核心，Redis 提供的五种数据结构至少都有一个 key 和一个 value。在我们开始更深入的讨论之前，理解 key 和 value 是非常重要的。</p><p>Key 定义了如何标识数据块。我们以后将会经常和 Key 打交道，但是现在，只要知道 key 看起来应该有像 <code>users:leto</code> 这样的格式就可以了。这样一个 key 一看就知道这条数据中有一个叫 <code>leto</code> 的用户的相关信息。冒号没什么意义，不过对 Redis 来说，用符号分隔 key 是一般常用方式。</p><p>Values 表示 key 的实际数据。它们可以是任何类型。你可以存储字符串，整数，或序列化对象(以 JSON, XML 或者其他什么格式)。大多数情况下，Redis 会把 value 作为字节数组对待，并不关心内容到底是什么。注意，使用驱动不一样处理序列化方式可能也不一样(有些会让你自己处理)，因此本书我们只讨论字符串，整数和 JSON。</p><p>让我们开始动手试试。输入下列命令:</p><pre><code>set users:leto &#39;&#123;&quot;name&quot;: &quot;leto&quot;, &quot;planet&quot;: &quot;dune&quot;, &quot;likes&quot;: [&quot;spice&quot;]&#125;&#39;</code></pre><p>这是一个基本的 Redis 命令。首先我们实际执行的命令，在这里是 <code>set</code>。然后是它的参数。<code>set</code> 命令有两个参数: 我们设定的 key 和为 key 设置的 value。大多数情况下，不过不是所有，命令通常都带 key 参数(存在情况下，通常会是第一个)。猜猜怎么拿到刚才的值？你肯定知道(不知道嘛也没关系!):</p><pre><code>get users:leto</code></pre><p>继续试试其他组合。Key 和 Value 是最基本的概念，<code>get</code> 和 <code>set</code> 命令是对它们最简单的操作。创建更多的 users，尝试不同类型的 key 和不同的 value。</p><h2 id="查询-Querying"><a href="#查询-Querying" class="headerlink" title="查询(Querying)"></a>查询(Querying)</h2><p>随着学习深入，有两件事变得越来越清楚。对 Redis 来说，key 是全部，而 value 无所谓。或者，换个说法，Redis 不允许你查询对象的值。上面的例子中，我们不可能查询那些生活在 <code>dune</code> 行星上的用户。</p><p>对一些人来说，这可能会造成些许困惑。我们的世界中，数据查询是那么灵活那么强大，可是 Redis 的做法看起来太原始太不务实了。不要被这种旧观念困扰你太久。记住，Redis 不是一揽子解决案。有些东西并不属于这里(由于查询的限制)。这样，在这种观念的引导下，在面临某些问题时，你会找到新的建模方案。</p><p>我们之后会看到更多的具体例子，不过重点在于我们应该理解 Redis 的这些基本事实。这有助于我们明白为什么 value 可以是任何类型 -  Redis 根本不需要去读取或者理解他们。同样，这会帮助我们用新思维在这新世界考虑新的建模方案。</p><h2 id="内存和持久化-Memory-and-Persistence"><a href="#内存和持久化-Memory-and-Persistence" class="headerlink" title="内存和持久化(Memory and Persistence)"></a>内存和持久化(Memory and Persistence)</h2><p>之前我们提到过，Redis 是一个基于内存的持久化存储。对于持久化，默认情况下，Redis 基于一定量 key 的变更，来触发对数据库进行快照，保存到硬盘上。你可以配置它，比如每 Y 秒钟内，如果有 X 个 key 改变了，那么将数据保存下来。默认情况下，Redis 会在每 60 秒，如果有 1000 及以上个 key 发生改变，将对数据快照保存。或每15分钟，即使少于9个 key 发生改变，也会把数据快照保存。</p><p>另外(或者和快照一起)，Redis 支持增量模式。一旦 key 发生变化，一个增量包会更新到硬盘上。某些情况下，允许数据60秒的更新延迟，用以换取性能上的提升，是值得的，虽然有可能会发生硬件或软件异常，导致数据丢失。在某些情况下确难以接受。Redis 还有一种可选方案，我们将会在第六章看到第三种选择，将持久化任务分流到从服务器上。</p><p>至于内存，Redis 把所有的数据都保存在内存中。这说明了使用 Redis 的成本并不低: RAM 仍然还是服务器硬件中最贵的部分。</p><p>我觉得应该有些开发者对数据会占用多少空间没什么概念。莎士比亚全集大概需要 5.5MB 的存储空间。至于扩展，其他方案倾向于IO-绑定 或者CPU-绑定。这些限制(RAM 或 IO)根据数据类型和你如何去排序和查询，会要求你把数据扩展切分到更多的机器上。除非你保存巨大的媒体文件到 Redis 中，否则基于内存的存储应该没有什么问题。而对 App 来说，这是个问题，你应该会倾向于用内存-绑定来取代IO-绑定 。</p><p>Redis 还支持虚拟内存。但是，这个功能貌似是失败了(Redis 开发者自己说的)，关于它的使用已经被声明为过期了。</p><p>(另一角度看，5.5MB 大小的莎士比亚全集可以压缩到 2MB。可是 Redis 不会自动执行压缩，你需要自己处理它。因为 Redis 把 value 作为字节数组来处理，没什么理由不让你通过压缩/解压数据来换取 RAM 。)</p><h2 id="整合-Putting-It-Together"><a href="#整合-Putting-It-Together" class="headerlink" title="整合(Putting It Together)"></a>整合(Putting It Together)</h2><p>我们谈到了许多高层面的话题。在深入 Redis 之前，我想做的最后一件事情是把这些话题整合起来。具体来说，包括查询限制，数据结构和 Redis 用内存保存数据的方式。</p><p>当你把三件事情整合起来的时候，你得到一个很棒的结果:速度。有些人会这样认为，”Redis 当然会快啊，把所有的东西都放在内存了。” 不过这仅仅是一方面。Redis 与其他解决案相比的闪光点在于它特别的数据结构。</p><p>有多快？这取决于多方面 - 你用的是哪个命令，数据的类型，等等。不过测量 Redis 的性能通常可以用<strong>每秒</strong>执行多少万，或者多少十万次为单位来表示。你可以自己试着执行 <code>redis-benchmark</code> (和 <code>redis-server</code> 及 <code>redis-cli</code> 在同一文件夹下) 来测试它。</p><p>我曾经尝试过把一组使用传统建模的代码转换到 Redis 上。一个负载测试，在关系模型中它花了五分钟跑完。而在 Redis 中，它只用了大概 150ms。当然你不能期望所有的转换都能得到那么大的收益，但是我希望这能给你一个概念，我们说的速度的改变是什么。</p><p>理解 Redis 的这个特性非常重要，因为它会影响你怎么和它进行交互。有 SQL 背景的开发者通常会最小化跟数据库之间的来回交互次数。这对所有的系统都是一个好习惯，包括 Redis。 但是，由于我们简单的数据结构，有时候为达成我们的查询目标，我们需要多次查询 Redis 服务。这种数据访问方式，刚开始的时候可能会觉得不太自然，但是对于我们所能获取的性能来说，其损失真的是微不足道。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>虽然我们几乎把 Redis 特性都介绍一遍，展开了很宽泛的讨论。不过别担心，弄不清楚也不要紧 - 比如说查询。在下一章我们将动手做，实践找出那些你想得到答案的所有问题。</p><p>这章中我们应该明白的几个点:</p><ul><li><p>Keys 是用来标识数据块(values)的字符串</p></li><li><p>Values 是一串任意字节数组，Redis 不关心这个</p></li><li><p>Redis 提供了 (实现了) 五种指定数据结构</p></li><li><p>综上，这让 Redis 易于使用并且很快，但是并不适用所有场景</p></li></ul><h1 id="第二章-数据结构"><a href="#第二章-数据结构" class="headerlink" title="第二章 - 数据结构"></a>第二章 - 数据结构</h1><p>现在是时候开始学习 Redis 的五种数据结构了。我们将会解释每种数据结构到底是什么，提供了什么方法，以及它们适用于何种类型的功能/数据。</p><p>到目前为止，我们理解的 Redis 结构包括命令，key 和 value。关于数据结构我们并没有涉及。在我们使用 <code>set</code> 的时候，Redis 是怎么知道用了何种数据结构的？实际上所有的命令都对应到了具体的数据结构上。比如说当你用 <code>set</code> 你会把 value 储存为字符串数据结构。当你用 <code>hset</code> 你会把它储存为一个哈希。由于 Redis 的关键字集很小，所以这是完全可以掌握的。</p><p><strong><a href="http://redis.io/commands">Redis’ website</a> 的引用文档非常好。在这里没有必要再重复一次他们已经完成的工作。我们只介绍那些在理解数据结构时必须的最重要的命令。</strong></p><p>这里没有比实践更有意思更重要了。你可以通过 <code>flushdb</code> 把数据库中的数据全部擦除，所以，别害羞我的小女孩，摇起来吧！</p><h2 id="字符串结构-Strings"><a href="#字符串结构-Strings" class="headerlink" title="字符串结构(Strings)"></a>字符串结构(Strings)</h2><p>字符串是 Redis 中最基本的数据结构。当你说键值对的时候，你肯定想到的是字符串。不要被名字迷惑，如前述，你的 value 可以是任何东西。我宁愿把它叫标量(Scalars)，不过大概只有我才这样。</p><p>我们已经看过一个用字符串的一般用例了，通过 key 保存对象实例。我们以后会经常用到类似这样的用法:</p><pre><code>set users:leto &#39;&#123;&quot;name&quot;: leto, &quot;planet&quot;: dune, &quot;likes&quot;: [&quot;spice&quot;]&#125;&#39;</code></pre><p>另外， Redis 还有一些字符串通用操作。比如 <code>strlen &lt;key&gt;</code> 可以用来获取 key 的对应 value 的长度; <code>getrange &lt;key&gt; &lt;start&gt; &lt;end&gt;</code> 返回 key 的 value 的指定范围的值; <code>append &lt;key&gt; &lt;value&gt;</code> 追加值到当前值上 (或者不存在的时候生成)。动手试试看，下面是我得到的结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; strlen <span class="hljs-built_in">users</span>:leto<br>(<span class="hljs-built_in">integer</span>) 50<br><br>&gt; getrange <span class="hljs-built_in">users</span>:leto 31 48<br><span class="hljs-string">&quot;\&quot;likes\&quot;: [\&quot;spice\&quot;]&quot;</span><br><br>&gt; append <span class="hljs-built_in">users</span>:leto <span class="hljs-string">&quot; OVER 9000!!&quot;</span><br>(<span class="hljs-built_in">integer</span>) 62<br></code></pre></td></tr></table></figure><p>现在，你肯定会觉得，说得好，但这毫无意义。光从 JSON 中抽出一段范围或者追加一个值完全没有意义。你说得对，这里的想说明的是，一些命令，特别是对于字符串类型数据结构，只有在指定类型的数据中才有意义。</p><p>原先我们讲过，Redis 不关心你的值是什么。多数情况下这是对的。但是，一小部分字符串命令对于某些类型或结构的值非常有用。比如说，我们可以上面的 <code>append</code> 和 <code>getrange</code> 命令，在处理一些 custom space-efficient serialization 的时候非常有用。一个更具体的例子，你可是试试看 <code>incr</code>, <code>incrby</code>, <code>decr</code> 和 <code>decrby</code> 命令。下面字符串的值进行增减操作:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; incr stats:page:about<br>(<span class="hljs-built_in">integer</span>) 1<br>&gt; incr stats:page:about<br>(<span class="hljs-built_in">integer</span>) 2<br><br>&gt; incrby ratings:video:12333 5<br>(<span class="hljs-built_in">integer</span>) 5<br>&gt; incrby ratings:video:12333 3<br>(<span class="hljs-built_in">integer</span>) 8<br></code></pre></td></tr></table></figure><p>如你所想，Redis 的字符串结构对于分析操作非常有效。试试看 <code>users:leto</code> (非整形值) 会怎样 (你会拿到个异常)。</p><p>再来一个更高级的例子，<code>setbit</code> 和 <code>getbit</code> 命令。这有篇 <a href="http://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps/">wonderful post</a>，关于 <a href="http://blog.getspool.com/">Spool</a> 如何结合使用这两个命令，来高效的回答 “今天有多少独立用户访问了我” 这个问题的。一亿两千八百万用户，在笔记本上测试，50ms 内做出了回答，而且只占用了16MB的内存。</p><p>你不明白 bitmap 的工作原理没关系，不知道 Spool 怎么用这两个命令也没关系，只想让你明白 Redis 字符串操作比看起来要强大得多得多。好了话说回来，最常用的场景是我们上面给出的场景:排序(不管简单复杂)和计数。还有，因为根据 key 拿 value 超快，所以字符串结构也通常用于缓存数据。</p><h2 id="哈希结构-Hashes"><a href="#哈希结构-Hashes" class="headerlink" title="哈希结构(Hashes)"></a>哈希结构(Hashes)</h2><p>哈希结构是一个很好的例子，说明了为什么说 Redis 是个单纯的键值对存储是不对的。你看，在多数情况下，哈希结构看起来就跟字符串结构一样。但最大的不同是，它们还有另外一层中间层: 字段。所以，哈希的 <code>set</code> 和 <code>get</code> 是这样的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hset <span class="hljs-built_in">users</span>:goku powerlevel 9000<br>hget <span class="hljs-built_in">users</span>:goku powerlevel<br></code></pre></td></tr></table></figure><p>我们可以一次设定多个字段，一次获取多个字段，获取所有的字段和值，列出所有的字段清单或者删除指定字段:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hmset <span class="hljs-built_in">users</span>:goku race saiyan age 737<br>hmget <span class="hljs-built_in">users</span>:goku race powerlevel<br>hgetall <span class="hljs-built_in">users</span>:goku<br>hkeys <span class="hljs-built_in">users</span>:goku<br>hdel <span class="hljs-built_in">users</span>:goku age<br></code></pre></td></tr></table></figure><p>如你所见，相比纯字符串结构，哈希结构给了我们更多的控制权限。相比把用户单纯保存为一个序列化之后的字符串，我们可以用一个哈希做更精确的描述。好处就是你可以拉取和更新/删除指定的数据片段，而不用获取或者重写整个值。</p><p>从优化定义对象的角度出发学习哈希，比如说定义一个用户，是学习理解它的工作原理的关键。而且确实，从性能方面来看，更细颗粒的操作是必须的。那么，在下一章，我们将看看怎样用哈希结构组织数据结构以及怎样用它来优化查询。在我看来，这是哈希结构真正厉害的地方。</p><h2 id="列表结构-Lists"><a href="#列表结构-Lists" class="headerlink" title="列表结构(Lists)"></a>列表结构(Lists)</h2><p>列表结构可以让你，为指定的 key 保存和处理数组形式的 value 。你可以向数组插入值，获取第一个或者最后一个值，以及操作指定索引位置上的值。列表结构会维护这些值的排序，并且有基于索引的高效操作。比如我们可以创建一个 <code>newusers</code> 列表用来跟踪我们网站最新的注册用户:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lpush newusers goku<br>ltrim newusers 0 49<br></code></pre></td></tr></table></figure><p>首先我们 push 一个新用户到列表的最前面，然后我们再 trim 它，这样就只保持了最新的 50 个用户了。这是一个常见的模式。 <code>ltrim</code> 是一个 O(N) 操作，其中 N 是我们删除数据的数量。这个例子中，我们总是在一个单项插入之后做 trim ,所以它实际上会有一个恒定的 O(1) 性能(因为 N 总是等于 1)。</p><p>而下面这个例子，我们将第一次接触到，把 key 作为查询结果得到之后，再用于查询 value 的例子。比如我们想拿到最后 10 位用户的详细信息，我们可以这样操作:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ids = redis.lrange(<span class="hljs-string">&#x27;newusers&#x27;</span>, 0, 9)<br>redis.mget(*ids.map &#123;|u| <span class="hljs-string">&quot;users:#&#123;u&#125;&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>上面这个 Ruby 的小例子演示了我们之前说过的多次查询操作。</p><p>当然，列表结构的好处不单单是用来保存另外的 key 引用。value 可以是任何东西。你可以用列表结构来存储日志或者跟踪用户访问网站的路径足迹。如果你用来做游戏，你可以拿来记录玩家的动作队列。</p><h2 id="集合结构-Sets"><a href="#集合结构-Sets" class="headerlink" title="集合结构(Sets)"></a>集合结构(Sets)</h2><p>集合结构被用于存储唯一值，并且提供了一组基于集合的操作，比如说并集运算。集合是无序的，但是它提供了许多高效的基于值的操作。朋友圈就是最经典的使用集合的例子了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sadd friends:leto ghanima paul chani jessica<br>sadd friends:duncan paul jessica alia<br></code></pre></td></tr></table></figure><p>不管一个用户有多少个朋友，我们都可以迅速的说出 (O(1)) userX 是否是 userY 的朋友:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sismember friends:leto jessica<br>sismember friends:leto vladimir<br></code></pre></td></tr></table></figure><p>而且我们可以看看是否两个或者多个用户之间是否有共同好友:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sinter friends:leto friends:duncan<br></code></pre></td></tr></table></figure><p>甚至直接可以把这个结果存到一个新 key 中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sinterstore friends:leto_duncan friends:leto friends:duncan<br></code></pre></td></tr></table></figure><p>集合非常适用于这种难解的情况:需要标记或者跟踪那些有重复属性的值的时候(或者我们希望使用集合的交并操作的时候)。</p><h2 id="有序集合结构-Sorted-Sets"><a href="#有序集合结构-Sorted-Sets" class="headerlink" title="有序集合结构(Sorted Sets)"></a>有序集合结构(Sorted Sets)</h2><p>最后一个也是最强力的一个数据结构是有序集合结构。如果说哈希结构看起来像字符串结构，但是有字段，那么有序集合结构就像集合结构一样，但是有权重(score)。权重提供了排序和排名功能。如果我们想看朋友排名，我们可以这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zadd friends:duncan 70 ghanima 95 paul 95 chani 75 jessica 1 vladimir<br></code></pre></td></tr></table></figure><p>想找出 <code>duncan</code> 有多少朋友的权重是在 90 及以上的？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zcount friends:duncan 90 100<br></code></pre></td></tr></table></figure><p>那怎么找出 <code>chani</code> 的排名呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zrevrank friends:duncan chani<br></code></pre></td></tr></table></figure><p>我们用 <code>zrevrank</code> 来代替 <code>zrank</code> 是因为 Redis 默认排序是从低到高的(但这里我们需要从高到低排序)。有序集合最常见的用例就是排行榜系统了。事实上，任何你想以整数做为权重排序的东西，以及那些用权重可以很好处理的操作，都适用于有序集。</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>本章从概要层面来讲解了 Redis 的五种数据结构。使用 Redis 有一个很棒的特点就是，你能做的通常比你开始所认为的要来得多。对于 string 和 sorted sets ，肯定还有许多未被发现的用法。当你理解了正常的用例之后，你会发现 Redis 处理所有类型的问题都得心应手。还有，虽然 Redis 只提供了五种数据结构，以及相应的方法，但是不要觉得你需要把它们全用上。很少在建立一个功能的时候会这样做，只有某些很难的命令的时候才会考虑。</p><h1 id="第三章-数据结构用例"><a href="#第三章-数据结构用例" class="headerlink" title="第三章 - 数据结构用例"></a>第三章 - 数据结构用例</h1><p>上一章中我们介绍了五种数据结构并针对它们适用的情况给出了一些例子。现在我们来看看更高级，更通用，的话题和设计模式。</p><h2 id="Big-O-Notation"><a href="#Big-O-Notation" class="headerlink" title="Big O Notation"></a>Big O Notation</h2><p>在本书中，我们用 <code>O(n)</code> 或 <code>O(1)</code> 来表示 <code>Big O notation</code>。Big O notation 用于表示，处理某事物时基于指定处理元素的数量，将会出现怎样特定的行为。在 Redis 中，用它来表示，基于我们处理的数据的数量，命令执行的速度将会如何。</p><p>Redis 文档给出了它的每个命令的 Big O notation。还告诉我们影响性能的因素是什么。让我们来看看例子。</p><p>最快的应该是 O(1) ，一个常量。不管我们处理五条项目还是五百万条项目，都会有同样的性能。<code>sismember</code> 命令，用于查询一个值是否属于一个集合，就是 O(1)。<code>sismember</code> 是个强力的命令，很大一个原因就是快。Redis 中的大多数命令都是 O(1)。</p><p>Logarithmic, 或者说 O(log(N)), 应该是第二快的，因为它需要扫描的区间范围越来越小。通过使用这种类型的切分和处理方法，一个非常大的集合仅需要做几次迭代就会被迅速的分解。<code>zadd</code> 是一个 O(log(N)) 命令，N 是在有序集合中的元素个数。</p><p>之后是线性复杂度，或者说 O(N)。在表中查找没有做索引的列就是一个 O(N) 操作。就像用 <code>ltrim</code> 命令一样。但是，在 <code>ltrim</code> 中，N 不是列表的元素个数，而是要移除的元素的个数。比如用 <code>ltrim</code> 从有百万项目的列表中移除一条，会比从一个只有一千条项目的列表中移除十条要快。(虽然都挺快，可能快到你根本就测不到它们的差别)。</p><p><code>zremrangebyscore</code> 用来从有序列表中删除那些权重在最小值和最高值之间的元素，拥有复杂度 O(log(N)+M)。这有点复杂。通过查阅文档我们可以看到 N 是集合中所有的元素的个数，而 M 是需要删除的元素的个数。也就是说，在性能方面，比起集合中所有元素的个数，需要删除的元素的个数对性能影响更明显。</p><p><code>sort</code> 命令，我们在下一章会进行更详细的讨论，在这里我们要知道它有复杂度 O(N+M*log(M))。从它的性能特点来说，我们可以这样说，它是 Redis 最复杂命令中的一个。</p><p>还有另外一些复杂度，这里还有两个比较常用的是 O(N^2) 和 O(C^N)。N 越大，性能越差。Redis 没有这种复杂度的命令。</p><p>值得指出的是，Big O notation 说的是最坏情况。比如我们说某操作的复杂性是 O(N)，那我们就有可能一开始就找到它或者在最后才找到它。</p><h2 id="Pseudo-Multi-Key-Queries"><a href="#Pseudo-Multi-Key-Queries" class="headerlink" title="Pseudo Multi Key Queries"></a>Pseudo Multi Key Queries</h2><p>一个常见的情况是，你会想用不同关键字查到同样的值。比如说，你想查找一个用户信息，通过 email (比如说他第一次登陆的时候) 或者通过 id (当他已经登陆之后)。一个很糟糕的做法是，你用两条一样的字符串来保存冗余的用户对象:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> <span class="hljs-built_in">users</span>:leto@dune.gov <span class="hljs-string">&#x27;&#123;&quot;id&quot;: 9001, &quot;email&quot;: &quot;leto@dune.gov&quot;, ...&#125;&#x27;</span><br><span class="hljs-built_in">set</span> <span class="hljs-built_in">users</span>:9001 <span class="hljs-string">&#x27;&#123;&quot;id&quot;: 9001, &quot;email&quot;: &quot;leto@dune.gov&quot;, ...&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>糟糕的原因是当你要维护这些数据的时候，这绝对是个噩梦，并且它们会占用你两倍内存。</p><p>如果 Redis 允许你把一个 key 链接到映射一个的话，那就最好不过了，可是不能(并且应该永远也不可能)。Reids 开发的一个主要驱动就是要保持代码和 API 的简洁。内部实现链接 key (还有好多我们可以用 key 来做的事情没说到呢) 毫无意义，如果你意识到 Redis 提供的另一个方案的话: 哈希结构</p><p>使用哈希结构，我们可以删除冗余内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> <span class="hljs-built_in">users</span>:9001 <span class="hljs-string">&#x27;&#123;&quot;id&quot;: 9001, &quot;email&quot;: &quot;leto@dune.gov&quot;, ...&#125;&#x27;</span><br>hset <span class="hljs-built_in">users</span>:lookup:email leto@dune.gov 9001<br></code></pre></td></tr></table></figure><p>我们要做的仅仅是用字段作为伪二阶索引，并把它指向用户对象。如想通过 id 获取 用户，我们可以用普通的 <code>get</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">get <span class="hljs-built_in">users</span>:9001<br></code></pre></td></tr></table></figure><p>想要通过 email 来获取用户，我们用 <code>hget</code> 配合 <code>get</code> (Ruby):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span> = redis.hget(<span class="hljs-string">&#x27;users:lookup:email&#x27;</span>, <span class="hljs-string">&#x27;leto@dune.gov&#x27;</span>)<br>user = redis.get(<span class="hljs-string">&quot;users:#&#123;id&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p>这样的操作以后会经常用到，这就是哈希结构真正厉害的地方，不过如果你没这种需求，似乎这也不是一个很好的例子。</p><h2 id="引用和索引-References-and-Indexes"><a href="#引用和索引-References-and-Indexes" class="headerlink" title="引用和索引(References and Indexes)"></a>引用和索引(References and Indexes)</h2><p>我们已经看过许多关于怎样用一个 value 引用另一个的例子。在的列表结构的例子中看到过，在上一节的用哈希结构优化查询的例子中也看到过。总结一下就是，必须手工维护你的 value 之间的索引和引用。老实说，我觉得这真的好不爽，特别是当你想到要手工去维护/更新/删除这些引用的时候。不过在 Redis 中确实没什么好办法。</p><p>我们已经知道集合通常是怎样实现这种手工索引了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sadd friends:leto ghanima paul chani jessica<br></code></pre></td></tr></table></figure><p>该集合的每个成员都指向一条保存有实际用户信息的 Redis 字符串。但如果 <code>chani</code> 改名了怎么办，或者删掉她的账号了怎么办？也许应该再跟踪一下反向关系:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sadd friends_of:chani leto paul<br></code></pre></td></tr></table></figure><p>维护另说，如果你像我这样做，肯定会被这些额外的索引值的处理和内存开销给吓到。在下一章，我们将会谈谈通过使用额外的查询次数降低性能开销(我们在第一章中已经简单的提到过了)。</p><p>如果你仔细想一下，其实关系型数据库也有一样的开销。索引会占用内存，必须扫描或者定位，然后找到需要的记录。当然这些开销被抽象得很好(他们为此作了许多优化，而且运作的非常好)。</p><p>再次，在 Redis 中手工管理引用确实不幸。但是对于你所担心的性能和内存的问题，都应该先测试一下。我想你会发现其实它不是问题。</p><h2 id="Round-Trips-and-Pipelining"><a href="#Round-Trips-and-Pipelining" class="headerlink" title="Round Trips and Pipelining"></a>Round Trips and Pipelining</h2><p>我们已经提到过，在 Redis 中，频繁访问服务器端是很常见的模式。因为有些操作你会不停的用到，值得我们去仔细看一下我们能从哪些特性中获取更多收益。</p><p>首先，许多命令都可以接收一个或者多个参数，或者有一个带有多个参数的子查询。我们早些时候看到的 <code>mget</code> ，带有多个 key 和可以返回多个 value:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ids = redis.lrange(<span class="hljs-string">&#x27;newusers&#x27;</span>, 0, 9)<br>redis.mget(*ids.map &#123;|u| <span class="hljs-string">&quot;users:#&#123;u&#125;&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>或者 <code>sadd</code> 命令向集合中添加一个或多个记录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sadd friends:vladimir piter<br>sadd friends:paul jessica leto <span class="hljs-string">&quot;leto II&quot;</span> chani<br></code></pre></td></tr></table></figure><p>Redis 也支持管道。通常，一个客户端向 Redis 发送一个请求，然后在下次请求之前会一直等待返回。而用管道你可以发送一堆请求却不用等待它们的响应。这不单降低了网络开销，也在性能上有显著提高。</p><p>值得指出的是， Redis 会用内存给命令排队，因此一个好办法是给它们做批处理。你需要根据你使用的命令来决定批处理应该有多大，更具体就是，用多大的参数。不过，如果你用的是 ~50 字符长度的 key 的话，你大约可以把批处理规模放宽到几千或者上万。</p><p>在管道中执行命令的顺序根据驱动不同而不同。比如在 Ruby 中你给 <code>pipelined</code> 方法传入一个代码块:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis.pipelined <span class="hljs-keyword">do</span><br>  9001.<span class="hljs-built_in">times</span> <span class="hljs-keyword">do</span><br>    redis.incr(<span class="hljs-string">&#x27;powerlevel&#x27;</span>)<br>  end<br>end<br></code></pre></td></tr></table></figure><p>如你所想，批处理会被管道加速。</p><h2 id="事务-Transactions"><a href="#事务-Transactions" class="headerlink" title="事务(Transactions)"></a>事务(Transactions)</h2><p>Redis 所有的命令都是原子性的，包括那些一次可以执行多项操作的命令也一样。此外，在使用多命令的时候，Redis 支持事务。</p><p>你可能不知道，但是 Redis 确实是单线程的，这就是为什么每个命令都是原子性的原因。一次只能执行一个命令，其他的命令不能执行。(We’ll briefly talk about scaling in a later chapter.) 这在你考虑用那些一次可执行多项操作的命令时候特别有用。比如说:</p><p><code>incr</code> 实际上是一个 <code>get</code> 后面跟个 <code>set</code></p><p><code>getset</code> 设置一个新值之后返回原值</p><p><code>setnx</code> 首先检查 key 是否存在，当它不存在的时候设值</p><p>虽然这些命令很有用，但不可避免的，你肯定会遇到需要以组为单位执行多个命令的情况。首先你需要 <code>multi</code> 命令，然后接下来是你希望作为一组事务执行的所有命令，最后用 <code>exec</code> 来实际执行命令，或者用 <code>discard</code> 来放弃取消执行所有的命令。Redis 的事务可以保证什么？</p><ul><li><p>命令将被顺序执行</p></li><li><p>命令组将以单原子模式执行(命令组执行途中不会插入别的客户端的命令操作)</p></li><li><p>在事务中的命令，要么全部执行成功，要么全部执行失败</p></li></ul><p>你可以，也应该，在命令行界面测试一下这个。Also note that there’s no reason why you can’t combine pipelining and transactions.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">multi<br>hincrby <span class="hljs-built_in">groups</span>:1percent balance -9000000000<br>hincrby <span class="hljs-built_in">groups</span>:99percent balance 9000000000<br><span class="hljs-built_in">exec</span><br></code></pre></td></tr></table></figure><p>最后，Redis 允许你指定监视一个 key(或一组 key)，如果 key(s) 改变了，那将根据情况选择执行事务。这可以用于当你在同一个事务中需要取值，并基于取得结果执行操作的情况。上面的代码中，我们不能自己实现 <code>incr</code> 命令，因为命令总是在 <code>exec</code> 执行之后一起顺序执行。用代码来说就是，我们不能这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis.multi()<br>current = redis.get(<span class="hljs-string">&#x27;powerlevel&#x27;</span>)<br>redis.set(<span class="hljs-string">&#x27;powerlevel&#x27;</span>, current + 1)<br>redis.exec()<br></code></pre></td></tr></table></figure><p>这不在 Redis 事务的责任范围之内。但是，如果我们加上 <code>watch</code> 给 <code>powerlevel</code>，我们可以这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis.watch(<span class="hljs-string">&#x27;powerlevel&#x27;</span>)<br>current = redis.get(<span class="hljs-string">&#x27;powerlevel&#x27;</span>)<br>redis.multi()<br>redis.set(<span class="hljs-string">&#x27;powerlevel&#x27;</span>, current + 1)<br>redis.exec()<br></code></pre></td></tr></table></figure><p>如果另一个客户端在调用 <code>watch</code> 之后，改变了 <code>powerlevel</code> 的话，我们的事务将会失败。如果值没有变化，那么 set 将会起作用。我们可以在循环中不断执行这段代码直到它成功为止。</p><h2 id="Keys-Anti-Pattern"><a href="#Keys-Anti-Pattern" class="headerlink" title="Keys Anti-Pattern"></a>Keys Anti-Pattern</h2><p>在下一章中，我们将讨论一些和具体数据结构无关的命令。某些是关于管理或者调试工具的。不过在这里有一个我特别想说一说的是: <code>keys</code> 命令。该命令通过指定模式返回所有匹配的 key。这个命令看起来在某些情况下很适用，但是它绝对不应当用在产品代码中。为什么？因为它为了查找匹配的 key 会对所有的 key 做一个线性扫描。或者，简单的说，它慢死了。</p><p>那为什么有人会尝试用它？比如说你在做一个 bug 跟踪服务。每个账户有字段 <code>id</code> ，并且你想把每个 bug 存到一个字符串值里面去，对应的 key 看起来像 <code>bug:account_id:bug_id</code>。如果你需要找出一个账号下所有的 bug (显示它们，或者删除账号之后把 bug 一同删除),你应该试试 (因为我就这样!) 使用 <code>keys</code> 命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">keys bug:1233:*<br></code></pre></td></tr></table></figure><p>好一点的解决案是用哈希结构。就像我们可以用哈希来暴露二级索引那样，所以我们也可以用它来组织我们的数据:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hset bugs:1233 1 <span class="hljs-string">&#x27;&#123;&quot;id&quot;:1, &quot;account&quot;: 1233, &quot;subject&quot;: &quot;...&quot;&#125;&#x27;</span><br>hset bugs:1233 2 <span class="hljs-string">&#x27;&#123;&quot;id&quot;:2, &quot;account&quot;: 1233, &quot;subject&quot;: &quot;...&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>为了取得一个账户下的所有 bug 标识符，我们只需要调用 <code>hkeys bugs:1233</code>。要删除指定 bug 我们可以 <code>hdel bugs:1233 2</code>，要删除账户的话我们可以通过 <code>del bugs:1233</code> 来删除 key。</p><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>通过本章以及前一章，希望你已经开始有感觉知道应当怎么用 Redis 去处理实际问题了。还有很多的方式，你可以用来处理所有类型的东西，不过真正的关键是理解基础数据结构，并拥有那么一种视野，知道如何摆脱原有观念，利用它们来处理新问题。</p><h1 id="第四章-数据结构以外"><a href="#第四章-数据结构以外" class="headerlink" title="第四章 - 数据结构以外"></a>第四章 - 数据结构以外</h1><p>在 Redis 五种基本数据结构以外，还有一些命令是和数据结构没有关系的。我们已经看过一些了: <code>info</code>, <code>select</code>, <code>flushdb</code>, <code>multi</code>, <code>exec</code>, <code>discard</code>, <code>watch</code> 和 <code>keys</code>。本章再来看看其他的重要的一些。</p><h2 id="Expiration"><a href="#Expiration" class="headerlink" title="Expiration"></a>Expiration</h2><p>Redis 允许你指定 key 的存活时间。你可以以 Unix 时间戳格式指定一个具体的时间 (从1970年01月01日开始的秒数)或指定以秒为单位的存活时间。这是一个基于 key 的命令，和 key 所对应的数据结构无关。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">expire pages:about 30<br>expireat pages:about 1356933600<br></code></pre></td></tr></table></figure><p>第一个命令会在三十秒后删除 key (当然包括关联的值) 。第二个会在2012年12月31日上午 12:00 删除 key。</p><p>这让 Redis 成为一个理想的缓存引擎。通过 <code>ttl</code> 命令，你可以找出一条数据还能活多久。通过 <code>persist</code> 命令你可以删除那些过期的数据:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ttl pages:about<br>persist pages:about<br></code></pre></td></tr></table></figure><p>最后，还有一个特殊的字符串命令, <code>setex</code> 允许你在一个单独的原子命令中设置一个字符串并指定它的存活时间 (这比什么都方便):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">setex pages:about 30 <span class="hljs-string">&#x27;&lt;h1&gt;about us&lt;/h1&gt;....&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="发布订阅-Publication-and-Subscriptions"><a href="#发布订阅-Publication-and-Subscriptions" class="headerlink" title="发布订阅(Publication and Subscriptions)"></a>发布订阅(Publication and Subscriptions)</h2><p>Redis 的列表结构有 <code>blpop</code> 和 <code>brpop</code> 命令，可以从列表中返回并删除第一个(或最后一个)元素，或者堵塞到有可用元素为止。这可以用于作成简单的队列。</p><p>除此之外，Redis 对发布信息/订阅频道有着一流的支持。你可以打开第二个 <code>redis-cli</code> 窗口自己试试。首先在第一个窗口中订阅频道。(我们假设它叫 <code>warnings</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">subscribe warnings<br></code></pre></td></tr></table></figure><p>命令返回你订阅的信息。然后，在另外一个窗口中，发布一条信息到 <code>warnings</code> 频道:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">publish warnings <span class="hljs-string">&quot;it&#x27;s over 9000!&quot;</span><br></code></pre></td></tr></table></figure><p>如果你切回你的第一个窗口，你会发现接收到了 <code>warnings</code> 频道的消息。</p><p>你可以订阅多个频道 (<code>subscribe channel1 channel2 ...</code>)，订阅某种模式的一组频道 (<code>psubscribe warnings:*</code>) 或用 <code>unsubscribe</code> 和 <code>punsubscribe</code> 命令来停止监听一个，多个，或者某种模式的一组频道。</p><p>最后，注意 <code>publish</code> 命令的返回值 1。这是收到消息的客户端的个数。</p><h2 id="Monitor-and-Slow-Log"><a href="#Monitor-and-Slow-Log" class="headerlink" title="Monitor and Slow Log"></a>Monitor and Slow Log</h2><p><code>monitor</code> 命令让你监控 Redis 的状态。它是一个很棒的调试工具，能让你深入了解你的应用是怎样和 Redis 交互的。在你的两个 redis-cli 窗口中的一个 (如果它还在订阅状态，你可以用 <code>unsubscribe</code> 命令或者直接关掉窗口然后再开一个新的) 输入 <code>monitor</code> 命令。在另一个，执行其他的任意类型的命令 (比如 <code>get</code> 或者 <code>set</code>)。你可以看到这些命令，以及它们的参数，会在第一个窗口中显示。</p><p>你应该注意不要在生产环境中使用监控命令，它就是一个调试和开发的工具而已。除此之外，没得说。它就是一个很棒的开发工具。</p><p>和 <code>monitor</code>一起的，Redis 还有一个 <code>slowlog</code> ，也是一个很棒的性能分析工具。它会记录所有执行时间超过指定 <strong>微</strong>秒 的命令。在下一章我们会概述怎样配置 Redis，不过现在你可以像这样配置 Redis ，对所有的命令做日志记录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">config <span class="hljs-built_in">set</span> slowlog-log-slower-than 0<br></code></pre></td></tr></table></figure><p>然后，执行几个命令。然后你可以检索所有日志，或者最新日志，通过:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">slowlog get<br>slowlog get 10<br></code></pre></td></tr></table></figure><p>你可以获取 slow log 中记录条数，通过 <code>slowlog len</code></p><p>对你执行的每个命令，你可以看到四个参数:</p><ul><li><p>一个自增的 id</p></li><li><p>一个 Unix 时间戳，表示命令开始时间</p></li><li><p>执行时间，用微秒表示的, 记录了命令执行总时间</p></li><li><p>命令和它的参数</p></li></ul><p>slow log 在内存中维护，所以在生产环境中执行，即使使用低阈值，应该也没问题。默认，它会跟踪最新 1024 条日志。</p><h2 id="排序-Sort"><a href="#排序-Sort" class="headerlink" title="排序(Sort)"></a>排序(Sort)</h2><p><code>sort</code> 是Redis 最强力命令之一。它允许你对列表，集合，有序集合中的值进行排序 (有序集是依照权重排序的，而不是集合中的成员)。最简单的情况，它允许我们这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpush <span class="hljs-built_in">users</span>:leto:guesses 5 9 10 2 4 10 19 2<br><span class="hljs-built_in">sort</span> <span class="hljs-built_in">users</span>:leto:guesses<br></code></pre></td></tr></table></figure><p>将会返回从低到高顺序排列的值。还有一些更高级例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sadd friends:ghanima leto paul chani jessica alia duncan<br><span class="hljs-built_in">sort</span> friends:ghanima <span class="hljs-built_in">limit</span> 0 3 desc alpha<br></code></pre></td></tr></table></figure><p>上面的命令演示了怎么对已排序记录分页 (通过 <code>limit</code>)，如何以降序返回结果 (通过 <code>desc</code>) 以及如何按照字典序排序而不是按照数值 (通过 <code>alpha</code>).</p><p><code>sort</code> 真正强力的地方在于它可以对基于引用的对象进行排序。之前我们演示了列表，集合和有序集合是怎样用于引用其他 Redis 对象的。<code>sort</code> 命令可以解引用这些关系，并且根据值进行排序。比如，假设我们有一个 bug 跟踪系统，可以让用户查看异常。我们会用一个集合来跟踪被监控的异常:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sadd watch:leto 12339 1382 338 9338<br></code></pre></td></tr></table></figure><p>可能通过 id 对异常进行排序很不错 (默认就是就这样做的)，可是我们也希望能按照严重度来排序的。于是，我们得告诉 Redis 用什么模式来排序。首先，让我们添加一些数据，这样可以让我们看到比较有意义的测试结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> severity:12339 3<br><span class="hljs-built_in">set</span> severity:1382 2<br><span class="hljs-built_in">set</span> severity:338 5<br><span class="hljs-built_in">set</span> severity:9338 4<br></code></pre></td></tr></table></figure><p>然后按照 bug 的严重度来排序，从高到低，你可以这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> watch:leto by severity:* desc<br></code></pre></td></tr></table></figure><p>Redis 会将我们指定的模式(用 <code>by</code> 标记部分) 中的 <code>*</code> ，用我们的列表/集合/有序集的值来替换。然后 Redis 会以此创建 key 名，查询实际值之后再根据结果进行排序。</p><p>虽然你可以有上百万的 key 在 Redis 中，但是我觉得上面还是有点乱了。不过好在 <code>sort</code> 对哈希结构和它的字段也有用。你可以利用哈希结构取代一堆顶级 key:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">hset bug:12339 severity 3<br>hset bug:12339 priority 1<br>hset bug:12339 details <span class="hljs-string">&#x27;&#123;&quot;id&quot;: 12339, ....&#125;&#x27;</span><br><br>hset bug:1382 severity 2<br>hset bug:1382 priority 2<br>hset bug:1382 details <span class="hljs-string">&#x27;&#123;&quot;id&quot;: 1382, ....&#125;&#x27;</span><br><br>hset bug:338 severity 5<br>hset bug:338 priority 3<br>hset bug:338 details <span class="hljs-string">&#x27;&#123;&quot;id&quot;: 338, ....&#125;&#x27;</span><br><br>hset bug:9338 severity 4<br>hset bug:9338 priority 2<br>hset bug:9338 details <span class="hljs-string">&#x27;&#123;&quot;id&quot;: 9338, ....&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>不单事情变简单了，可以根据 <code>severity</code> 或 <code>priority</code>排序了，我们还可以告诉 <code>sort</code> 我们需要取什么值:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> watch:leto by bug:*-&gt;priority get bug:*-&gt;details<br></code></pre></td></tr></table></figure><p>和刚才一样有做替换操作，不过 Redis 可以识别 <code>-&gt;</code> 序列，用它来查找我们哈希结构中指定的字段。我们还加入了 <code>get</code> 命令，同样有替换操作和字段查询，用于获取 bug 的详细信息。</p><p>对于大集合，<code>sort</code> 可能会慢。好消息是 <code>sort</code> 的输出结构可以保存起来:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> watch:leto by bug:*-&gt;priority get bug:*-&gt;details store watch_by_priority:leto<br></code></pre></td></tr></table></figure><p><code>sort</code> 的 <code>store</code> 功能，以及我们已经学过的 <code>expiration</code> 命令，可以组成一个非常棒的组合。</p><h2 id="扫描-Scan"><a href="#扫描-Scan" class="headerlink" title="扫描(Scan)"></a>扫描(Scan)</h2><p>在上一章，我们看到了如何使用 <code>keys</code> 命令，它很有用，但是不应该用到生产环境中。Redis 2.8 引入了 <code>scan</code> 命令，它对生产环境是无害的。虽然 <code>scan</code> 的目的和 <code>keys</code> 类似，但是它们之间还是存在一些不同。说实话，大多数 <em>不同</em> 应当看成是 <em>特质</em>，但这是作为一个有用的命令所需的开销。</p><p>首先在众多的不同中的的第一个是，一次调用 <code>scan</code> 无需返回所有匹配结果。没什么奇怪的，就是一个被分页的结果;但是, <code>scan</code> 返回的结果条数不定，它不能被精确的控制。你可以用 <code>count</code> 选项，默认是 10，不过它完全有可能拿到比指定的 <code>count</code> 更多或更少的结果。</p><p>和通过使用 <code>limit</code> 和 <code>offset</code>来实现分页不同，<code>scan</code> 用 <code>cursor</code>。第一次调用 <code>scan</code> ，指定 <code>0</code> 作为游标。下面我们看看一个初始调用 <code>scan</code> 的例子，它指定了匹配模式 (可选) 和计数 (可选):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scan 0 match bugs:* count 20<br></code></pre></td></tr></table></figure><p>作为返回值的一部分，<code>scan</code> 返回下一个可用游标。或者，返回 <code>0</code> 来表示结果扫描结束。注意下一个游标的值，不代表结果的个数，也不是服务端可用的任何东西。</p><p>一个典型的流程应该看起来像这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">scan 0 match bugs:* count 2<br>&gt; 1) <span class="hljs-string">&quot;3&quot;</span><br>&gt; 2) 1) <span class="hljs-string">&quot;bugs:125&quot;</span><br>scan 3 match bugs:* count 2<br>&gt; 1) <span class="hljs-string">&quot;0&quot;</span><br>&gt; 2) 1) <span class="hljs-string">&quot;bugs:124&quot;</span><br>&gt;    2) <span class="hljs-string">&quot;bugs:123&quot;</span><br></code></pre></td></tr></table></figure><p>第一次调用返回了下个游标(3)和一个结果。第二次调用，使用了这个游标(3)，返回了结束标记(0)和最后两条数据。这是个<em>典型的</em>流程。由于 <code>count</code> 只是一个提示，有可能 <code>scan</code> 返回下一个(非 0) <code>cursor</code> 时不带任何结果。也就是说，一个空结果集并不意味着没有其他的结果存在。只有一个 0 游标，才意味着没有更多的结果。</p><p>从好的一面看，站在 Redis 的角度来看， <code>scan</code> 是完全无状态的。因此不需要关闭游标，而且没有完全读取结果集也是无害的。如果你想，你可以随时终止遍历结果集，即使 Redis 返回一个有效的游标。</p><p>这有两点需要牢记。首先，<code>scan</code> 可以多次返回相同的 key 。你需要自己处理(比如说保存一个已有值集合)。其次，<code>scan</code> 只保证在迭代的整个持续过程中的存在值会被返回。如果在迭代中有值被添加或者被删除，新值可能被返回，旧值可能被忽略。再强调一次，这就是 <code>scan</code> 所谓的无状态; 它不会对存在值做快照(就像你在许多数据库中看到的那样，提供了强一致性保证)，仅仅是遍历同一块内存空间，不管空间有没有发生变更。</p><p>除了 <code>scan</code> ,还添加了 <code>hscan</code>, <code>sscan</code> 和 <code>zscan</code> 命令。这可以让你遍历哈希，集合和有序集。为什么需要这些命令？好吧，就像因为 <code>keys</code> 堵塞了其他所有的调用，于是有了哈希命令 <code>hgetall</code> 和集合命令 <code>smembers</code>。如果你想遍历一个非常大的哈希或集合，你可以考虑用这些命令。<code>zscan</code> 看起来没什么用，因为对一个有序集合分页，通过 <code>zrangebyscore</code> 或 <code>zrangebyrank</code> 已经可以达到目的。不过，如果你真的想全遍历一个大的有序集合，<code>zscan</code> 也不是没有价值。</p><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p>本章主要讲了非特定数据结构命令。和其他一样，这些命令需要按需使用。不是创建一个应用或者功能时都要用到期限，发布/订阅 和/或 排序。不过最好应当知道它们的存在。并且，我们只讲了其中一部分命令。还有更多的，当你消化了本书内容之后，应当去看看<a href="http://redis.io/commands">完整功能列表</a>。</p><h1 id="第五章-Lua-脚本"><a href="#第五章-Lua-脚本" class="headerlink" title="第五章 - Lua 脚本"></a>第五章 - Lua 脚本</h1><p>Redis 2.6 开始内置 Lua 解析器，开发者可以用来为 Redis 编写更高级的查询。没错，就像你想的那样，这种功能和大多数关系型数据库提供的存储过程是一样的。</p><p>掌握该功能最难的部分是学习 Lua。好在，Lua 和大多数通用语言一样，有好的文档，有一个活跃的社区，除了写 Redis 脚本外当然还有更强大的功能。本章不会涉及 Lua 的任何细节；不过我们看几个例子，希望可以当成是一个简单的介绍。</p><h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><p>在开始学习如何使用 Lua 脚本之前，你会想，为什么需要用它。许多开发者并不喜欢传统的存储过程，这有什么不一样吗？简单的说，没有。使用不当的 Redis Lua 脚本会导致代码测试困难，逻辑和数据访问紧耦合，甚至是重复逻辑。</p><p>但是使用得当，它就是一种能力，可以简化代码提高性能。所有这些便利，很大程度上都是通过良好的组织多命令，一些简单的逻辑，结合到自定义方法中。由于 Lua 脚本执行时不能中断，因此提供了更简洁的方式来创建自己的原子性命令 (根本上避免了使用繁琐的 <code>watch</code> 命令)。它可以改善性能，通过移除那些需要返回的中间临时计算结果 - 最终输出结果可以在脚本中计算。</p><p>下一节给出的例子能更好的说明这些点。</p><h2 id="Eval"><a href="#Eval" class="headerlink" title="Eval"></a>Eval</h2><p><code>eval</code> 命令包含一个 Lua 脚本参数 (字符串形式)，我们要操作的 key 组参数，及一个附加参数。让我们看看一个简单的例子 (从 Ruby 执行，因为在 Redis 的命令行工具里面执行多行命令非常不爽):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">script = &lt;&lt;-<span class="hljs-string">eos</span><br><span class="hljs-string">  local friend_names = redis.call(&#x27;smembers&#x27;, KEYS[1])</span><br><span class="hljs-string">  local friends = &#123;&#125;</span><br><span class="hljs-string">  for i = 1, #friend_names do</span><br><span class="hljs-string">    local friend_key = &#x27;user:&#x27; .. friend_names[i]</span><br><span class="hljs-string">    local gender = redis.call(&#x27;hget&#x27;, friend_key, &#x27;gender&#x27;)</span><br><span class="hljs-string">    if gender == ARGV[1] then</span><br><span class="hljs-string">      table.insert(friends, redis.call(&#x27;hget&#x27;, friend_key, &#x27;details&#x27;))</span><br><span class="hljs-string">    end</span><br><span class="hljs-string">  end</span><br><span class="hljs-string">  return friends</span><br><span class="hljs-string">eos</span><br>Redis.new.eval(script, [<span class="hljs-string">&#x27;friends:leto&#x27;</span>], [<span class="hljs-string">&#x27;m&#x27;</span>])<br></code></pre></td></tr></table></figure><p>上面的代码获取了 Leto 的所有男性朋友。注意在我们的脚本中调用 Redis 命令，需要用 <code>redis.call(&quot;command&quot;, ARG1, ARG2, ...)</code> 这种方式。</p><p>如果你是 Lua 新手，你应该认真看看每一行。知道下面这些对你的理解会有帮助的，比如 <code>&#123;&#125;</code> 创建一个空的 <code>table</code> (可以把它当成一个数组或者一个字典)， <code>#TABLE</code> 能拿到在表中的元素个数，<code>..</code> 用来链接字符串。</p><p><code>eval</code> 实际上应该有四个参数。第二个实际上是 key 组参数中 key 的个数；Ruby 驱动自动为我们创建了。但为什么要这样？考虑一下上面的代码在 CLI 里应该是怎样的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;.....&quot;</span> <span class="hljs-string">&quot;friends:leto&quot;</span> <span class="hljs-string">&quot;m&quot;</span><br>vs<br><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;.....&quot;</span> 1 <span class="hljs-string">&quot;friends:leto&quot;</span> <span class="hljs-string">&quot;m&quot;</span><br></code></pre></td></tr></table></figure><p>第一种情况 (不正确) 中，Redis 怎么知道哪些是 key 而哪些是附加参数？第二种情况中，不存在多义性。</p><p>这引出了第二个问题:为什么要显式的把 key 列出来？所有 Redis 命令，在运行时，都需要确定哪些 key 是需要的。这允许以后的一些工具，比如说 Redis 集群，可以在多个 Redis 服务器中正确分发请求。你可能已经发现，我们上面的代码其实是动态读取 key 的(没把它们传给 <code>eval</code>)。<code>hget</code> 可以拿到 Leto 的所有男性朋友。这就是为什么需要把 key 列出来，当然这更多是一个建议，而不是一个硬性规则。上述代码在一个单例中会运行得很好，或者在副本中，但是肯定不会在未发行的 Redis 集群中。</p><h2 id="脚本管理-Script-Management"><a href="#脚本管理-Script-Management" class="headerlink" title="脚本管理(Script Management)"></a>脚本管理(Script Management)</h2><p>尽管通过 <code>eval</code> 执行的脚本会被 Redis 缓存起来，但是你在执行的时候，每次把整个内容发送过去看起来会很傻。或者，你可以把脚本注册到 Redis，然后通过脚本的 key 来执行。这需要你调用 <code>script load</code> 命令，然后拿到脚本的 SHA1 摘要:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis = Redis.new<br>script_key = redis.script(:load, <span class="hljs-string">&quot;THE_SCRIPT&quot;</span>)<br></code></pre></td></tr></table></figure><p>一旦我们加载了脚本，我们可以用 <code>evalsha</code> 来执行它:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis.evalsha(script_key, [<span class="hljs-string">&#x27;friends:leto&#x27;</span>], [<span class="hljs-string">&#x27;m&#x27;</span>])<br></code></pre></td></tr></table></figure><p>你可以用来管理 Lua 脚本的其他三个命令是 <code>script kill</code>, <code>script flush</code> 和 <code>script exists</code>。它们分别用来中断执行中的脚本，移除内部缓存中的所有脚本，以及查找在缓存中是否存在一个脚本。</p><h2 id="库-Libraries"><a href="#库-Libraries" class="headerlink" title="库(Libraries)"></a>库(Libraries)</h2><p>Redis 的 Lua 实现中附带了许多有用的库。尽管 <code>table.lib</code>, <code>string.lib</code> 和 <code>math.lib</code> 非常棒，对我来说，在这里我想单独拿出来强调的是 <code>cjson.lib</code> 。首先，如果你发现你需要向脚本传入多个参数的时候，以 JSON 格式将会显得更简洁:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis.evalsha <span class="hljs-string">&quot;.....&quot;</span>, [KEY1], [JSON.fast_generate(&#123;gender: <span class="hljs-string">&#x27;m&#x27;</span>, ghola: <span class="hljs-literal">true</span>&#125;)]<br></code></pre></td></tr></table></figure><p>然后你可以在 Lua 脚本中反序列化:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">local</span> arguments = cjson.decode(ARGV[1])<br></code></pre></td></tr></table></figure><p>当然，这个 JSON 库还可以用来解析 Redis 自己保存的值。我们上面的例子可以这样改写:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">local</span> friend_names = redis.call(<span class="hljs-string">&#x27;smembers&#x27;</span>, KEYS[1])<br><span class="hljs-built_in">local</span> friends = &#123;&#125;<br><span class="hljs-keyword">for</span> i = 1, <span class="hljs-comment">#friend_names do</span><br>    <span class="hljs-built_in">local</span> friend_raw = redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;user:&#x27;</span> .. friend_names[i])<br>    <span class="hljs-built_in">local</span> friend_parsed = cjson.decode(friend_raw)<br>    <span class="hljs-keyword">if</span> friend_parsed.gender == ARGV[1] <span class="hljs-keyword">then</span><br>        table.insert(friends, friend_raw)<br>    end<br>end<br><span class="hljs-built_in">return</span> friends<br></code></pre></td></tr></table></figure><p>于是我们可以从保存的朋友数据本身来查找性别，而不是从指定的哈希字段。(这个解决案相当慢，我个人更喜欢原先的那个，但是它确实演示了什么另一可行方案)。</p><h2 id="原子性-Atomic"><a href="#原子性-Atomic" class="headerlink" title="原子性(Atomic)"></a>原子性(Atomic)</h2><p>由于 Redis 是单线程的，你不需要担心你的 Lua 脚本会被其他的 Redis 命令打断。其中一个最明显的好处就是，有 TTL 的 key 在执行中不会半路过期。如果在脚本开始的时候，key 存在，那么它会在之后一直存在 - 除非你把它删了。</p><h2 id="Administration"><a href="#Administration" class="headerlink" title="Administration"></a>Administration</h2><p>下一章将更详细的讨论 Redis 的管理和配置。现在，你只要简单的知道，<code>lua-time-limit</code> 定义了一个 Lua 脚本最长可执行时间。默认的是五秒。考虑降低它。</p><h2 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h2><p>本章介绍了 Redis 的 Lua 脚本功能。和其他任何事物一样，这个功能可能会被滥用。但是，谨慎使用，用以实现你所关注的和自定义的命令时，不但可以简化你的代码，还可以提高性能。Lua 脚本和 Redis 的其他功能/命令一样:你要作的仅仅是，如果需要，在一开始就使用它，然后你会发现它会用得越来越频繁熟练。</p><h1 id="第六章-Administration"><a href="#第六章-Administration" class="headerlink" title="第六章 - Administration"></a>第六章 - Administration</h1><p>我们的最后一章将用来讨论 Redis 使用中的一些管理方面的内容。这是一份不完全的 Redis 管理指南。我们尽可能的回答一些 Redis 新手最有可能遇到的基本问题。</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>当你第一次启动 Redis 服务器，它会提醒你，<code>redis.conf</code> 文件找不到。这个文件用于配置 Redis 的各方面。有一份对所有版本 Redis 都可用的通用 <code>redis.conf</code> 文档模板。该模板中包含了默认的配置选项，对于理解各种选项的作用以及选项的默认值都很有帮助。你可以在这里找到它: <a href="http://download.redis.io/redis-stable/redis.conf">http://download.redis.io/redis-stable/redis.conf</a>。</p><p>因为这个文件定义得很详细，我们不再进行重复说明。</p><p>除了通过 <code>redis.conf</code> 文件对 Redis 进行配置外，我们还可以通过 <code>config set</code> 命令来个别值进行设置。实际上，我们已经用过它了，在之前将 <code>slowlog-log-slower-than</code> 设置为 0 的时候。</p><p>这里还可以通过 <code>config get</code> 命令来显示配置中的值。该命令支持匹配模式。所以如果你想找出所有和 logging 有关的选项，可以这样:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">config get *<span class="hljs-built_in">log</span>*<br></code></pre></td></tr></table></figure><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p>Redis 可以配置为需要密码才可使用。通过使用 <code>requirepass</code> 设置 (用 <code>redis.conf</code> 文件或者 <code>config set</code> 命令)。当 <code>requirepass</code> 被设置(也就是密码), 客户端将需要使用 <code>auth password</code> 命令。</p><p>客户端被认证后，它们可以对任何的数据库用任何的命令。包括使用 <code>flushall</code> 命令抹除所有数据库上的所有值。通过配置，你可以重命名混淆命令来达到一定程度的安全性:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rename-command CONFIG 5ec4db169f9d4dddacbfb0c26ea7e5ef<br>rename-command FLUSHALL 1041285018a942a4922cbf76623b741e<br></code></pre></td></tr></table></figure><p>或者你可以禁用一个命令，通过将命令重命名为空字符串。</p><h2 id="Size-Limitations"><a href="#Size-Limitations" class="headerlink" title="Size Limitations"></a>Size Limitations</h2><p>你开始用 Redis 的时候，你肯定会想知道 “我最多能用多少 key ？”，或者是想知道一个哈希结构里面最多能有多少字段(尤其当你考虑用它组织数据的时候)，或者每个列表结构或者集合能存多少元素？对每个 Redis 实例来说，所有的这些，实际的限制都达到了上亿(hundreds of millions)级别。</p><h2 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h2><p>Redis 支持复制，意思是说，当你把数据写到一个 Redis 实例(主服务)上的时候，一个或者多个实例(从服务)将会保持和主服务同步更新。配置从服务，可以通过修改配置文件的 <code>slaveof</code> 标签或者用 <code>slaveof</code> 命令(没有使用该配置的实例是或可以是主服务)。</p><p>复制通过把数据拷贝到不同的服务器上达到保护目的。复制还可以用于改善性能，因为读操作可以分发到从服务上。虽然可能会返回略微过期的数据，但是对于大多数应用来说，这是一个有价值的值得考虑的折中。</p><p>不过不幸的是，Redis 的复制还没提供自动故障转移。如果主服务挂了，你需要手动提升从服务。如果你希望实现 Redis 的高可用性，还是不得不考虑用传统的高可用性工具的心跳监控(heartbeat monitoring)以及用脚本自动切换当前服务器。</p><h2 id="备份-Backups"><a href="#备份-Backups" class="headerlink" title="备份(Backups)"></a>备份(Backups)</h2><p>备份 Redis 只需要简单的将 Redis 的快照拷贝到你想要的地方(S3, FTP, …)。默认的，Redis 把它的快照保存在名为 <code>dump.rdb</code> 的文件中。随时，你都可以 <code>scp</code>, <code>ftp</code> 或者 <code>cp</code> (或别的什么) 操作这个文件。</p><p>在主服务上禁用快照或者禁用增量文件(append-only file (aof))，转而让从服务去维护，这种做法并不少见。这有助于降低主服务器上的负载，并且允许在从服务上使用更积极的备份操作，而不会影响整个系统的响应速度。</p><h2 id="扩展和-Redis-集群-Scaling-and-Redis-Cluster"><a href="#扩展和-Redis-集群-Scaling-and-Redis-Cluster" class="headerlink" title="扩展和 Redis 集群(Scaling and Redis Cluster)"></a>扩展和 Redis 集群(Scaling and Redis Cluster)</h2><p>复制是那些负荷高速成长的网站用到的第一个工具。有些命令的开销比其他高(比如说 <code>sort</code> )，于是可以把它们放到从服务上执行，从而保持整个系统对传入的查询的响应。</p><p>此外，真正的扩展 Redis，可以归结为，横跨多个 Redis 实体(可以执行在同一个 box 中，记住，Redis 是单线程的)使用你的 key。就目前而言，这就是你需要注意的东西(虽然许多 Redis 驱动都提供了一致性哈希算法(consistent-hashing))。考虑如何将你的数据水平切分不在本书的讨论范围之内。这些事情一时半会你也还不用担心，不过不管你用什么解决案，总是需要意识到的。</p><p>这好消息是，Redis 集群中这些都可以实现。不单止提供水平扩展，包括均衡，还提供高可用性的自动失败转移。</p><p>只要你愿意花更多的时间和精力，高可用性和扩展性在今天是完全可以做到的。以后，Redis 集群会让事情变得更简单。</p><h2 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h2><p>鉴于已经开始使用 Redis 的网站以及工程的数量级，毋庸置疑，Redis 已经可用于成产，并且已经用于生产中了。但是，对于某些工具，尤其是在安全性和可用性发面，仍然略显年轻。Redis 集群，我们应该很快就可以看到的，将帮助我们解决目前管理方面的一些挑战。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说，Redis 代表了数据处理方式的简化。它剥离了众多的复杂性和抽象性，并可与其他系统一同使用。一些场合 Redis 并不是最好选择。但在某些场合，Redis 简直就是为你的数据量身定做一样。</p><p>最后回到我一开始说的: Redis 简单易学。不停的有新技术出现，你很难说哪些值得花时间去学习。当你真正认识到 Redis 的简洁所带来的好处的时候，我由衷相信，它是你和你的团队所能做到的，在学习方面，最值得的投资之一。</p><hr><p><em>1</em> : 中文版本 <a href="https://github.com/geminiyellow/the-little-mongodb-book/blob/master/zh-cn/mongodb.markdown">the-little-mongodb-book</a></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SphinxQL</title>
      <link href="/2015/07/20/2015-SphinxQL/"/>
      <url>/2015/07/20/2015-SphinxQL/</url>
      
        <content type="html"><![CDATA[<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>参考页底的配置文件</p><h1 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$mysql</span> -h127.0.0.1 -P9306<br>mysql&gt; SELECT * FROM `restaurant_index` WHERE MATCH(<span class="hljs-string">&#x27;(@name a)&#x27;</span>) ORDER BY `<span class="hljs-built_in">id</span>` ASC LIMIT 0, 10;<br>+------+--------------------------------+--------------------------------+-------+----------+------------------+------------------+----------+----------+------------+---------+<br>| <span class="hljs-built_in">id</span>   | name                           | social_name                    | price | rating   | collected_amount | tabletalk_amount | city     | state_id | country_id | cuisine |<br>+------+--------------------------------+--------------------------------+-------+----------+------------------+------------------+----------+----------+------------+---------+<br>|  150 | A Bite To Eat, A Drink As Well | A Bite To Eat, A Drink As Well |     2 | 4.400000 |           691623 |           885097 | Chifley  |        1 |          1 | 5,25,28 |<br>|  437 | Just a Bite                    | Just a Bite                    |     1 | 0.600000 |           835971 |           913061 | Mawson   |        1 |          1 | 5,6     |<br>|  886 | Wok In A Box Canberra          | Wok In A Box Canberra          |     1 | 0.300000 |            80784 |           124537 | Canberra |        1 |          1 | 2,12,25 |<br>|  902 | A. Baker                       | A. Baker                       |     3 | 3.300000 |           593557 |           197168 | Canberra |        1 |          1 | 7,22    |<br>| 1007 | A Hereford Beefstouw           | A Hereford Beefstouw           |     4 | 2.300000 |           435698 |           401660 | Adelaide |        5 |          1 | 53      |<br>| 1043 | A Mother<span class="hljs-string">&#x27;s Milk                | A Mother&#x27;</span>s Milk                |     1 | 2.600000 |           637110 |           825623 | Unley    |        5 |          1 | 5,6,85  |<br>| 1336 | Signature A Fusion Of Coffee   | Signature A Fusion Of Coffee   |     1 | 3.900000 |           415182 |           771096 | Adelaide |        5 |          1 | 5,6,10  |<br>| 1347 | Zero - A little slice of Italy | Zero - A little slice of Italy |     1 | 4.600000 |           269857 |            11684 | Maylands |        5 |          1 | 6,28,37 |<br>| 1500 | Thai <span class="hljs-keyword">in</span> a Wok                  | Thai <span class="hljs-keyword">in</span> a Wok                  |     2 | 3.800000 |           465388 |            70699 | Adelaide |        5 |          1 | 4       |<br>| 1631 | Michelangelos Dial a Pizza     | Michelangelos Dial a Pizza     |     1 | 4.300000 |           325638 |           339890 | Adelaide |        5 |          1 | 28      |<br>+------+--------------------------------+--------------------------------+-------+----------+------------------+------------------+----------+----------+------------+---------+<br>10 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h1 id="使用php"><a href="#使用php" class="headerlink" title="使用php"></a>使用php</h1><p><a href="https://github.com/FoolCode/SphinxQL-Query-Builder">https://github.com/FoolCode/SphinxQL-Query-Builder</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br></pre></td><td class="code"><pre><code class="hljs conf">#<br># Sphinx configuration file sample<br>#<br># WARNING! While this sample file mentions all available options,<br># it contains (very) short helper descriptions only. Please refer to<br># doc/sphinx.html for details.<br>#<br><br>#############################################################################<br>## 商家索引 data source definition<br>#############################################################################<br><br>source restaurant_src<br>&#123;<br>    type= mysql<br>    sql_host= localhost<br>    sql_user= root<br>    sql_pass= 123456<br>    sql_db= yumCircle<br>    sql_port= 3306# optional, default is 3306<br>    sql_query_pre   = SET NAMES UTF8<br><br>    sql_query_range = SELECT MIN(id),MAX(id) FROM restaurant<br>    sql_range_step  = 10000<br>    sql_query = select id, id as restaurant_id, name, social_name, telephone, price, rating, collected_amount, tabletalk_amount, photo_amount,  \<br>                    locality, suburb, street, city, state_id, country_id, postcode, \<br>                    CONCAT(suburb, &#x27; &#x27;, postcode) as suburb_postcode \<br>                from restaurant \<br>                WHERE id&gt;=$start AND id&lt;=$end<br><br>    sql_field_string   = name<br>    sql_field_string   = social_name<br><br>    sql_attr_multi = uint cuisine from ranged-query; \<br>        SELECT restaurant_id as id, cuisine_id as cuisine FROM restaurant_cuisine WHERE id&gt;=$start AND id&lt;=$end; \<br>        SELECT MIN(id), MAX(id) FROM restaurant_cuisine;<br>    sql_attr_uint      = country_id<br>    sql_attr_uint      = state_id<br>    sql_attr_string    = city<br>    sql_attr_string    = suburb_postcode<br>    sql_attr_uint      = price<br>    sql_attr_float     = rating<br>    sql_attr_uint      = collected_amount<br>    sql_attr_uint      = tabletalk_amount<br>&#125;<br><br>#############################################################################<br>## index definition<br>#############################################################################<br><br>index restaurant_index<br>&#123;<br>    source = restaurant_src<br>    path = /home/straysh/softwares/sphinx/var/data/restaurant<br>    docinfo = extern<br>    #dict   = keywords<br>    mlock = 0<br>    morphology   = none<br>    min_word_len = 1<br>    min_infix_len = 1<br>    html_strip   = 0<br>&#125;<br><br>#############################################################################<br>## indexer settings<br>#############################################################################<br><br>indexer<br>&#123;<br>    # memory limit, in bytes, kiloytes (16384K) or megabytes (256M)<br>    # optional, default is 128M, max is 2047M, recommended is 256M to 1024M<br>    mem_limit= 1024M<br><br>    # maximum IO calls per second (for I/O throttling)<br>    # optional, default is 0 (unlimited)<br>    #<br>    # max_iops= 40<br><br><br>    # maximum IO call size, bytes (for I/O throttling)<br>    # optional, default is 0 (unlimited)<br>    #<br>    # max_iosize= 1048576<br><br><br>    # maximum xmlpipe2 field length, bytes<br>    # optional, default is 2M<br>    #<br>    # max_xmlpipe2_field= 4M<br><br><br>    # write buffer size, bytes<br>    # several (currently up to 4) buffers will be allocated<br>    # write buffers are allocated in addition to mem_limit<br>    # optional, default is 1M<br>    #<br>    # write_buffer= 1M<br><br><br>    # maximum file field adaptive buffer size<br>    # optional, default is 8M, minimum is 1M<br>    #<br>    # max_file_field_buffer= 32M<br><br><br>    # how to handle IO errors in file fields<br>    # known values are &#x27;ignore_field&#x27;, &#x27;skip_document&#x27;, and &#x27;fail_index&#x27;<br>    # optional, default is &#x27;ignore_field&#x27;<br>    #<br>    # on_file_field_error = skip_document<br><br><br>    # how to handle syntax errors in JSON attributes<br>    # known values are &#x27;ignore_attr&#x27; and &#x27;fail_index&#x27;<br>    # optional, default is &#x27;ignore_attr&#x27;<br>    #<br>    # on_json_attr_error = fail_index<br><br><br>    # whether to auto-convert numeric values from strings in JSON attributes<br>    # with auto-conversion, string value with actually numeric data<br>    # (as in &#123;&quot;key&quot;:&quot;12345&quot;&#125;) gets stored as a number, rather than string<br>    # optional, allowed values are 0 and 1, default is 0 (do not convert)<br>    #<br>    # json_autoconv_numbers = 1<br><br><br>    # whether and how to auto-convert key names in JSON attributes<br>    # known value is &#x27;lowercase&#x27;<br>    # optional, default is unspecified (do nothing)<br>    #<br>    # json_autoconv_keynames = lowercase<br><br><br>    # lemmatizer cache size<br>    # improves the indexing time when the lemmatization is enabled<br>    # optional, default is 256K<br>    #<br>    # lemmatizer_cache = 512M<br>&#125;<br><br>#############################################################################<br>## searchd settings<br>#############################################################################<br><br>searchd<br>&#123;<br>    # [hostname:]port[:protocol], or /unix/socket/path to listen on<br>    # known protocols are &#x27;sphinx&#x27; (SphinxAPI) and &#x27;mysql41&#x27; (SphinxQL)<br>    #<br>    # multi-value, multiple listen points are allowed<br>    # optional, defaults are 9312:sphinx and 9306:mysql41, as below<br>    #<br>    # listen= 127.0.0.1<br>    # listen= 192.168.0.1:9312<br>    # listen= 9312<br>    # listen= /var/run/searchd.sock<br>    listen    = 9312<br>    listen    = localhost:9306:mysql41<br><br>    # log file, searchd run info is logged here<br>    # optional, default is &#x27;searchd.log&#x27;<br>    log= /home/straysh/softwares/sphinx/var/log/searchd.log<br><br>    # query log file, all search queries are logged here<br>    # optional, default is empty (do not log queries)<br>    query_log= /home/straysh/softwares/sphinx/var/log/query.log<br><br>    # client read timeout, seconds<br>    # optional, default is 5<br>    read_timeout= 5<br><br>    # request timeout, seconds<br>    # optional, default is 5 minutes<br>    client_timeout= 300<br><br>    # maximum amount of children to fork (concurrent searches to run)<br>    # optional, default is 0 (unlimited)<br>    max_children= 30<br><br>    # maximum amount of persistent connections from this master to each agent host<br>    # optional, but necessary if you use agent_persistent. It is reasonable to set the value<br>    # as max_children, or less on the agent&#x27;s hosts.<br>    persistent_connections_limit= 30<br><br>    # PID file, searchd process ID file name<br>    # mandatory<br>    pid_file= /home/straysh/softwares/sphinx/var/log/searchd.pid<br><br>    # seamless rotate, prevents rotate stalls if precaching huge datasets<br>    # optional, default is 1<br>    seamless_rotate= 1<br><br>    # whether to forcibly preopen all indexes on startup<br>    # optional, default is 1 (preopen everything)<br>    preopen_indexes= 1<br><br>    # whether to unlink .old index copies on succesful rotation.<br>    # optional, default is 1 (do unlink)<br>    unlink_old= 1<br><br>    # attribute updates periodic flush timeout, seconds<br>    # updates will be automatically dumped to disk this frequently<br>    # optional, default is 0 (disable periodic flush)<br>    #<br>    # attr_flush_period= 900<br><br><br>    # MVA updates pool size<br>    # shared between all instances of searchd, disables attr flushes!<br>    # optional, default size is 1M<br>    mva_updates_pool= 1M<br><br>    # max allowed network packet size<br>    # limits both query packets from clients, and responses from agents<br>    # optional, default size is 8M<br>    max_packet_size= 8M<br><br>    # max allowed per-query filter count<br>    # optional, default is 256<br>    max_filters= 256<br><br>    # max allowed per-filter values count<br>    # optional, default is 4096<br>    max_filter_values= 4096<br><br><br>    # socket listen queue length<br>    # optional, default is 5<br>    #<br>    # listen_backlog= 5<br><br><br>    # per-keyword read buffer size<br>    # optional, default is 256K<br>    #<br>    # read_buffer= 256K<br><br><br>    # unhinted read size (currently used when reading hits)<br>    # optional, default is 32K<br>    #<br>    # read_unhinted= 32K<br><br><br>    # max allowed per-batch query count (aka multi-query count)<br>    # optional, default is 32<br>    max_batch_queries= 32<br><br><br>    # max common subtree document cache size, per-query<br>    # optional, default is 0 (disable subtree optimization)<br>    #<br>    # subtree_docs_cache= 4M<br><br><br>    # max common subtree hit cache size, per-query<br>    # optional, default is 0 (disable subtree optimization)<br>    #<br>    # subtree_hits_cache= 8M<br><br><br>    # multi-processing mode (MPM)<br>    # known values are none, fork, prefork, and threads<br>    # threads is required for RT backend to work<br>    # optional, default is threads<br>    workers= threads # for RT to work<br><br><br>    # max threads to create for searching local parts of a distributed index<br>    # optional, default is 0, which means disable multi-threaded searching<br>    # should work with all MPMs (ie. does NOT require workers=threads)<br>    #<br>    # dist_threads= 4<br><br><br>    # binlog files path; use empty string to disable binlog<br>    # optional, default is build-time configured data directory<br>    #<br>    # binlog_path= # disable logging<br>    # binlog_path= /home/straysh/softwares/sphinx/var/data # binlog.001 etc will be created there<br><br><br>    # binlog flush/sync mode<br>    # 0 means flush and sync every second<br>    # 1 means flush and sync every transaction<br>    # 2 means flush every transaction, sync every second<br>    # optional, default is 2<br>    #<br>    # binlog_flush= 2<br><br><br>    # binlog per-file size limit<br>    # optional, default is 128M, 0 means no limit<br>    #<br>    # binlog_max_log_size= 256M<br><br><br>    # per-thread stack size, only affects workers=threads mode<br>    # optional, default is 64K<br>    #<br>    # thread_stack= 128K<br><br><br>    # per-keyword expansion limit (for dict=keywords prefix searches)<br>    # optional, default is 0 (no limit)<br>    #<br>    # expansion_limit= 1000<br><br><br>    # RT RAM chunks flush period<br>    # optional, default is 0 (no periodic flush)<br>    #<br>    # rt_flush_period= 900<br><br><br>    # query log file format<br>    # optional, known values are plain and sphinxql, default is plain<br>    #<br>    # query_log_format= sphinxql<br><br><br>    # version string returned to MySQL network protocol clients<br>    # optional, default is empty (use Sphinx version)<br>    #<br>    # mysql_version_string= 5.0.37<br><br><br>    # trusted plugin directory<br>    # optional, default is empty (disable UDFs)<br>    #<br>    # plugin_dir= /usr/local/sphinx/lib<br><br><br>    # default server-wide collation<br>    # optional, default is libc_ci<br>    #<br>    # collation_server= utf8_general_ci<br><br><br>    # server-wide locale for libc based collations<br>    # optional, default is C<br>    #<br>    # collation_libc_locale= ru_RU.UTF-8<br><br><br>    # threaded server watchdog (only used in workers=threads mode)<br>    # optional, values are 0 and 1, default is 1 (watchdog on)<br>    #<br>    # watchdog= 1<br><br>    <br>    # costs for max_predicted_time model, in (imaginary) nanoseconds<br>    # optional, default is &quot;doc=64, hit=48, skip=2048, match=64&quot;<br>    #<br>    # predicted_time_costs= doc=64, hit=48, skip=2048, match=64<br><br><br>    # current SphinxQL state (uservars etc) serialization path<br>    # optional, default is none (do not serialize SphinxQL state)<br>    #<br>    # sphinxql_state= sphinxvars.sql<br><br><br>    # maximum RT merge thread IO calls per second, and per-call IO size<br>    # useful for throttling (the background) OPTIMIZE INDEX impact<br>    # optional, default is 0 (unlimited)<br>    #<br>    # rt_merge_iops= 40<br>    # rt_merge_maxiosize= 1M<br><br><br>    # interval between agent mirror pings, in milliseconds<br>    # 0 means disable pings<br>    # optional, default is 1000<br>    #<br>    # ha_ping_interval= 0<br><br><br>    # agent mirror statistics window size, in seconds<br>    # stats older than the window size (karma) are retired<br>    # that is, they will not affect master choice of agents in any way<br>    # optional, default is 60 seconds<br>    #<br>    # ha_period_karma= 60<br><br><br>    # delay between preforked children restarts on rotation, in milliseconds<br>    # optional, default is 0 (no delay)<br>    #<br>    # prefork_rotation_throttle= 100<br><br><br>    # a prefix to prepend to the local file names when creating snippets<br>    # with load_files and/or load_files_scatter options<br>    # optional, default is empty<br>    #<br>    # snippets_file_prefix= /mnt/common/server1/<br>&#125;<br><br>#############################################################################<br>## common settings<br>#############################################################################<br><br>common<br>&#123;<br><br>    # lemmatizer dictionaries base path<br>    # optional, defaut is /usr/local/share (see ./configure --datadir)<br>    #<br>    # lemmatizer_base = /usr/local/share/sphinx/dicts<br><br>    # path to RLP root directory<br>    # optional, defaut is /usr/local/share (see ./configure --datadir)<br>    #<br>    # rlp_root = /usr/local/share/sphinx/rlp<br><br>    # path to RLP environment file<br>    # optional, defaut is /usr/local/share/rlp-environment.xml (see ./configure --datadir)<br>    #<br>    # rlp_environment = /usr/local/share/sphinx/rlp/rlp/etc/rlp-environment.xml<br>&#125;<br><br># --eof--<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sphinx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sphinx进阶</title>
      <link href="/2015/07/20/2015-Sphinx%E8%BF%9B%E9%98%B6/"/>
      <url>/2015/07/20/2015-Sphinx%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li>在官网下载<a href="http://sphinxsearch.com/downloads/release/">源码包</a></li><li>解压,然后就是常规的源码编译:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tar xzvf sphinx-2.2.8-release.tar.gz<br>$ <span class="hljs-built_in">cd</span> sphinx<br>$ ./configure<br>$ make<br>$ make install<br></code></pre></td></tr></table></figure><p>在执行<code>./configure</code>的时候,可以指定一些选项,这些选项可以通过 <code>--help</code>来查看.最重要的一些选项是:</p><ul><li><code>--prefix</code> 指定了要将sphinx安装到何位置,例如 <code>--prefix=/usr/local/sphinx</code></li><li><code>--with-mysql</code> 指定了在自动检测失败时,到何处可以找到MySQL的include和library文件.</li><li><code>--with-static-mysql</code> 将Sphinx编译为使用静态Mysql链接.</li><li><code>--with-pgsql</code> 使用PostgreSQL</li><li><code>--with-static-pgsql</code> 使用静态PostgreSQL</li></ul><p>编者注: 本文使用SphinxQL方式,不需要在php上再编译sphinxClient扩展,而是使用php-mysql扩展.</p><h1 id="Sphinx快速使用指南"><a href="#Sphinx快速使用指南" class="headerlink" title="Sphinx快速使用指南"></a>Sphinx快速使用指南</h1><p>假定sphinx安装于目录<code>/usr/local/sphinx</code>中(下文相同)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$ cd /usr/local/sphinx/etc<br>$ cp sphinx.conf.dist sphinx.conf<br>$ vi sphinx.conf<br>$ mysql -u test &lt; /usr/local/sphinx/etc/example.sql<br>$ cd /usr/local/sphinx/etc<br>$ /usr/local/sphinx/bin/indexer --all<br>$ mysql -h0 -P9306<br>SELECT * FROM test1 WHERE MATCH(&#x27;my document&#x27;);<br>INSERT INTO rt VALUES (1, &#x27;this is&#x27;, &#x27;a sample text&#x27;, 11);<br>INSERT INTO rt VALUES (2, &#x27;some more&#x27;, &#x27;text here&#x27;, 22);<br>SELECT gid/11 FROM rt WHERE MATCH(&#x27;text&#x27;) GROUP BY gid;<br>SELECT * FROM rt ORDER BY gid DESC;<br>SHOW TABLES;<br>SELECT *, WEIGHT() FROM test1 WHERE MATCH(&#x27;&quot;document one&quot;/1&#x27;);SHOW META;<br>SET profiling=1;SELECT * FROM test1 WHERE id IN (1,2,4);SHOW PROFILE;<br>SELECT id, id%3 idd FROM test1 WHERE MATCH(&#x27;this is | nothing&#x27;) GROUP BY idd;SHOW PROFILE;<br>SELECT id FROM test1 WHERE MATCH(&#x27;is this a good plan?&#x27;);SHOW PLAN;<br>SELECT COUNT(*) c, id%3 idd FROM test1 GROUP BY idd HAVING COUNT(*)&gt;1;<br>SELECT COUNT(*) FROM test1;<br>CALL KEYWORDS (&#x27;one two three&#x27;, &#x27;test1&#x27;);<br>CALL KEYWORDS (&#x27;one two three&#x27;, &#x27;test1&#x27;, 1);<br></code></pre></td></tr></table></figure><h1 id="全文索引-Full-text-fields"><a href="#全文索引-Full-text-fields" class="headerlink" title="全文索引|Full-text fields"></a>全文索引|Full-text fields</h1><p>全文本字段(或简称字段),是被Sphinx索引的文档中的文字内容,并可以通过关键字来快速搜索.</p><p>字段是命名的,可以限制只搜索一个字段(例如搜索’title’字段)或者多个字段(如仅’title’和’abstract’字段).Sphinx的索引结构最多支持256个字段.但,&lt;=2.0.1-beta,被强制限制为32个字段.</p><p>注意,字段用之来构建全文索引(一个特殊的数据结构,用来通过关键字快速搜索), 其原始内容不会存储在索引中.之后原始的文本内容就被丢弃了.这些原始的内容需要到数据源中(MySQL)中重新查询.</p><p>另外,想要重构原始文本内容是不可能的,因为指定的(配置文件中指定的)空白字符/大小写/标点符号在建立索引时都被丢失了.</p><h1 id="属性-Attributes"><a href="#属性-Attributes" class="headerlink" title="属性|Attributes"></a>属性|Attributes</h1><p><code>属性</code>是和文档关联的额外的值,可以用来过滤和排序.</p><p>全文检索通常不仅仅是匹配文档id和相关度的排序(rank), 还要处理基于每个文档的许多参数.例如,希望先按时间再按相关度排序来显示新闻,或者在指定的价格区间搜索商品,或限制搜索指定用户发布的博客,或者按照月份分组.为了高效的做到这一点,Sphinx允许向每个文档添加一系列的<code>属性</code>,并在全文索引中存储这些<code>属性</code>的值.然后就可以使用这些值在全文搜索时来过滤/排序/分组.</p><p><code>属性</code>与<code>索引</code>不同,他们不是全文索引的.他们存储在索引中,但不能将他们当做全文索引来搜索,尝试这样做会引发错误.</p><p>例如,假设<code>column</code>列是<code>属性</code>,则不能使用<code>@column 1</code>来搜索<code>column</code>值为1的文档. <code>and this is still true even if the numeric digits are normally indexed.</code></p><p><code>属性</code>可以用来做过滤,限制返回的行数,同样也可以做排序或者结果分组.简单的基于<code>属性</code>的排序,且不使用相关度工具是完全可行的.另外,<code>属性</code>会通过<code>search daemon</code>返回,而<code>索引</code>则不会.</p><p>对于<code>属性</code>的最佳例子是论坛的post表.假设只有<code>title</code>和<code>content</code>字段需要全文检索,但有时也需要检索特定用户或子论坛的帖子.或者按照发布日期排序.或者按照发布日期来分组检索的结果并计算每个分组的数量.</p><h1 id="多值属性-MVA-multi-valued-attributes"><a href="#多值属性-MVA-multi-valued-attributes" class="headerlink" title="多值属性|MVA (multi-valued attributes)"></a>多值属性|MVA (multi-valued attributes)</h1><p><code>多值属性</code>是Sphinx中非常重要的文档<code>属性</code>.<code>多值属性</code>可以给文档添加数值集合.用来实现文章标签/商品分类非常合适.在<code>多值属性</code>上可以过滤/分组(排序不能).</p><p>集合的规模是无限制的,只要内存允许你可以添加.(包含MVA的.spm文件会在searchd预缓存到内存中).MVA的数据源可以是独立的查询或者文档的字段.对于第一种方式,查询需要返回一对值:文档id和MVA值,第二种方式字段会被解析为整数.对输入的数据的顺序完全没有要求.在构建索引时,MVA值会被自动按照文档id分组(并在内部排序).</p><p>过滤时,MVA值中的任意一个符合过滤条件,文档就会被匹配.(因此,对于排他过滤器,返回的文档不会包含任何被禁止的值).</p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a><strong>TODO</strong></h2><p><a href="http://wenku.baidu.com/view/4ebf3505bed5b9f3f90f1caf.html">http://wenku.baidu.com/view/4ebf3505bed5b9f3f90f1caf.html</a><br><a href="http://www.douban.com/group/topic/30286342/">http://www.douban.com/group/topic/30286342/</a></p><p>试了一下，美团前台的搜索是索引了套餐的标题（包括网站编辑加上的部分）、店名、地址，其中套餐标题拆词也能搜到相应结果，而地址拆词搜不到。应该是用了两种方式，地址部分经过了分词用的是类似Xunsearch的分词索引插件，标题和店名是Sphinx之类的全文索引。</p><p>后台借了个账号看了下，单子、商家、套餐，都是按地址和标题搜索，和前台用的一个搜索接口，只是多个了ID。</p><p>考虑到Mongo对全文检索的响应速度，折中的解决方法是分词入MySQL，准确率一般，完美的方法只能是整合搜索引擎。热门、推荐、位置类别那些都好说。</p><hr><p>商品搜索的话，这个重点在于商品页面的主题提取 和 查询推荐</p><p>再具体点就是对每个页面抽取主题、关键词</p><p>比如上面例子如果能发现页面主题是“衣服”，归类到服饰类别</p><p>然后搜索面膜时，主动就给分类到“化妆品”类了</p><p>通过在搜索结果的相关性排序中加入类别参数，不能保证完全不出现，但是可以通过权重让靠谱的结果出现在前边</p><p>ps：如果是问sphinx里面怎么操作的话，没有具体用过</p><p>直接简单的文本聚类、分类算法就行，也可以去搞一个商品分类语料库</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sphinx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sphinx基础</title>
      <link href="/2015/07/16/2015-Sphinx%E5%9F%BA%E7%A1%80/"/>
      <url>/2015/07/16/2015-Sphinx%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Sphinx"><a href="#什么是Sphinx" class="headerlink" title="什么是Sphinx"></a>什么是Sphinx</h1><p>Sphinx 是SQL Phrase Index的缩写;Sphinx是一个在GPLv2下分发的全文检索引擎;一般而言，Sphinx是一个独立的全文搜索引擎;可以非常容易的与SQL数据库和脚本语言集成;搜索API支持PHP、Python、Perl、Rudy和Java，并且也可以用作MySQL存储引擎.</p><h1 id="Sphinx-的主要特性："><a href="#Sphinx-的主要特性：" class="headerlink" title="Sphinx 的主要特性："></a>Sphinx 的主要特性：</h1><ul><li>索引和搜索性能优异；</li><li>先进的索引和查询工具 (灵活且功能丰富的文本分析器，查询语言，以及多种不同的排序方式等等);</li><li>先进的结果集分析处理 (SELECT 可以使用表达式, WHERE, ORDER BY, GROUP BY 等对全文搜索结果集进行过滤)；</li><li>实践证实可扩展性支持数十亿文档记录，TB级别的数据，以及每秒数千次查询;</li><li>易于集成SQL和XML数据源，并可使用SphinxAPI、SphinxQL或者SphinxSE搜索接口</li><li>易于通过分布式搜索进行扩展</li></ul><h1 id="Sphinx-的详细特性："><a href="#Sphinx-的详细特性：" class="headerlink" title="Sphinx 的详细特性："></a>Sphinx 的详细特性：</h1><ul><li>高速的索引建立(在当代CPU上，峰值性能可达到10 ~ 15MB/秒);</li><li>高性能的搜索 (在1.2G文本，100万条文档上进行搜索，支持高达每秒150~250次查询);</li><li>高扩展性 (最大的索引集群超过30亿条文档，最繁忙时刻的查询峰值达到每天5千万次);</li><li>提供了优秀的相关度算法，基于短语相似度和统计（BM25）的复合Ranking方法;</li><li>支持分布式搜索功能;</li><li>提供文档片段（摘要以及高亮）生成功能;</li><li>内建支持SphinxAPI和SphinxQL搜索箭口，也可作为MySQL的存储引擎提供搜索服务;</li><li>支持布尔、短语、词语相似度等多种检索模式;</li><li>文档支持多个全文检索字段(缺省配置下，最大不超过32个);</li><li>文档支持多个额外的属性信息(例如：分组信息，时间戳等);</li><li>支持查询停止词;</li><li>支持词形学处理;</li><li>支持特殊词汇处理;</li><li>支持单一字节编码和UTF-8编码;</li><li>内建支持英语、俄语、捷克语词干化处理; 对 法语，西班牙语，葡萄牙语，意大利语，罗马尼亚语，德国，荷兰，瑞典，挪威，丹麦，芬兰，匈牙利等语言 的支持可通过第三方的 libstemmer 库 建立);</li><li>原生的MySQL支持(同时支持MyISAM 、InnoDB、NDB、Archive等所有类型的数据表 );</li><li>原生的PostgreSQL 支持;</li><li>原生的ODBC兼容数据库支持 (MS SQL, Oracle, 等) ;</li><li>…多达50多项其他功能没有在此一一列出，请参阅API和配置手册！</li></ul><h1 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h1><p>索引的数据可以来自各种各样不同的来源：SQL数据库、纯文本、HTML文件、邮件等等。从CoreSeek/Sphinx的视角看，索引数据是一个结构化的文档的集合，其中每个文档是字段的集合，这种结构更利于SQL数据获取，其中每一行代表一个文档，每一列代表一个字段。</p><p>由于数据来源的不同，需要不同的代码来获取数据、处理数据以供CoreSeek/Sphinx进行索引的建立。这种代码被称之为数据源驱动程序（简称：驱动或数据源）。</p><p>在本文撰写时，CoreSeek/Sphinx中包括MySQL和PostgreSQL数据源的驱动程序，这些驱动使用数据库系统提供的C/C++原生接口连接到数据库服务器并获取数据。此外，CoreSeek/Sphinx还提供了额外的被称为xmlpipe的数据源驱动，该驱动运行某个具体的命令，并从该命令的stdout中读入数据。数据的格式在 第 3.8 节 “xmlpipe 数据源” 中有介绍。经过长足的发展，Coreseek还提供了具有特色的Python数据源驱动，可以使用Python编写数据获取脚本自定义数据源，从而得以获取任何已知世界和未知世界的数据。</p><p>如果确有必要，一个索引的数据可以来自多个数据源。这些数据将严格按照配置文件中定义的顺序进行处理。所有从这些数据源获取到的文档将被合并，共同产生一个索引，如同他们来源于同一个数据源一样。</p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>属性是附加在每个文档上的额外的信息（值），可以在搜索的时候用于过滤和排序。</p><p>搜索结果通常不仅仅是进行文档的匹配和相关度的排序，经常还需要根据其他与文档相关联的值，对结果进行额外的处理。例如，用户可能需要对新闻检索结果依次按日期和相关度排序，检索特定价格范围内的产品，检索某些特定用户的blog日志，或者将检索结果按月分组。为了高效地完成上述工作，Sphinx允许给文档附加一些额外的属性，并把这些值存储在全文索引中，以便在对全文匹配结果进行过滤、排序或分组时使用。</p><p>属性与字段不同，不会被全文索引。他们仅仅是被存储在索引中，属性进行全文检索式不可能的。如果要对属性进行全文检索，系统将会返回一个错误。</p><p>例如，如果column被设置为属性，就不能使用扩展表达式@column 1去匹配column为1的文档；如果数字字段按照普通的方式被索引，那么就可以这样来匹配。</p><p>属性可用于过滤，或者限制返回的数据，以及排序或者 结果分组; 也有可能是完全基于属性排序的结果, 而没有任何搜索相关功能的参与. 此外, 属性直接从搜索服务程序返回信息, 而被索引的文本内容则没有返回.</p><p>论坛帖子表是一个很好的例子。假设只有帖子的标题和内容这两个字段需要全文检索，但是有时检索结果需要被限制在某个特定的作者的帖子或者属于某个子论坛的帖子中（也就是说，只检索在SQL表的author_id和forum_id这两个列上有特定值的那些行），或者需要按post_date列对匹配的结果排序，或者根据post_date列对帖子按月份分组，并对每组中的帖子计数。</p><p>为实现这些功能，可以将上述各列（除了标题和内容列）作为属性做索引，之后即可使用API调用来设置过滤、排序和分组。以下是一个例子：</p><p>示例： sphinx.conf 片段:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs conf">...<br>sql_query = SELECT id, title, content, \<br>    author_id, forum_id, post_date FROM my_forum_posts<br>sql_attr_uint = author_id<br>sql_attr_uint = forum_id<br>sql_attr_timestamp = post_date<br>...<br></code></pre></td></tr></table></figure><p>示例： 应用程序代码 (使用 PHP):</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 仅搜索ID为123的作者发布的内容</span><br><span class="hljs-variable">$cl</span>-&gt;<span class="hljs-title function_ invoke__">SetFilter</span> ( <span class="hljs-string">&quot;author_id&quot;</span>, <span class="hljs-keyword">array</span> ( <span class="hljs-number">123</span> ) );<br><br><span class="hljs-comment">// 仅在id为1，3，7的子论坛中搜索</span><br><span class="hljs-variable">$cl</span>-&gt;<span class="hljs-title function_ invoke__">SetFilter</span> ( <span class="hljs-string">&quot;forum_id&quot;</span>, <span class="hljs-keyword">array</span> ( <span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span> ) );<br><br><span class="hljs-comment">// 按照发布时间倒序排列获取的结果</span><br><span class="hljs-variable">$cl</span>-&gt;<span class="hljs-title function_ invoke__">SetSortMode</span> ( SPH_SORT_ATTR_DESC, <span class="hljs-string">&quot;post_date&quot;</span> );<br></code></pre></td></tr></table></figure><p>可以通过名字来指示特定的属性，并且这个名字是大小写无关的。属性并不会被全文索引，他们只是按原封不动的存储在索引文件中。目前支持的属性类型如下：</p><ul><li>无符号整数（1-32位宽）;</li><li>UNIX 时间戳（timestamps）;</li><li>浮点值（32位，IEEE 754单精度）;</li><li>字符串序列 (专指尤其计算出来的字符串序列整数值);</li><li>字符串 (版本 1.10-beta 开始支持);</li><li>多值属性 MVA(32位无符号整型值的变长序列).</li></ul><p>由各个文档的全部的属性信息构成了一个集合，它也被称为文档信息 docinfo. 文档信息可以按如下两种方式之一存储：</p><ul><li>与全文索引数据分开存储（“外部存储extern”，在.spa文件中存储）, 或者</li><li>在全文索引数据中，每出现一次文档ID 就出现相应的文档信息（“内联存储inline”，在.spd文件中存储）</li></ul><p>在大多数情况下，外部存储可令建立索引和检索的效率都大幅提高。</p><p>检索时，采用外部存储方式产生的的内存需求为 (1+属性总数)<em>文档总数</em>4字节，也就是说，带有两个属性和一个时间戳的1千万篇文档会消耗(1+2+1)<em>10M</em>4 = 160 MB的RAM。这是每个检索的守护进程（PER DAEMON）消耗的量，而不是每次查询，searchd仅在启动时分配160MB的内存，读入数据并在不同的查询之间保持这些数据。子进程并不会对这些数据做额外的拷贝。</p><h1 id="MVA-多值属性"><a href="#MVA-多值属性" class="headerlink" title="MVA (多值属性)"></a>MVA (多值属性)</h1><p>多值属性MVA (multi-valued attributes)是文档属性的一种重要的特例，MVA使得向文档附加一系列的值作为属性的想法成为可能。这对文章的tags，产品类别等等非常有用。MVA属性支持过滤和分组（但不支持分组排序）。</p><p>目前MVA列表项的值被限制为32位无符号整数。列表的长度不受限制，只要有足够的RAM，任意个数的值都可以被附加到文档上（包含MVA值的.spm文件会被searchd预缓冲到RAM中）。MVA的源数据来源既可以是一个单独的查询，也可以是文档属性，参考 sql_attr_multi中的来源类型。在第一种情况中，该查询须返回文档ID和MVA值的序对；而在第二种情况中，该字段被分析为整型值。对于多值属性的输入数据的顺序没有任何限制，在索引过程中这些值会自动按文档ID分组（而相同文档ID下的数据也会排序）。</p><p>在过滤过程中，MVA属性中的任何一个值满足过滤条件，则文档与过滤条件匹配（因此通过排他性过滤的文档不会包含任何被禁止的值）。按MVA属性分组时，一篇文档会被分到与多个不同MVA值对应的多个组。例如，如果文档集只包含一篇文档，它有一个叫做tag的MVA属性，该属性的值是5、7和11，那么按tag的分组操作会产生三个组，它们的@count都是1，@groupby键值分别是5、7和11。还要注意，按MVA分组可能会导致结果集中有重复的文档：因为每篇文文档可能属于不同的组，而且它可能在多个组中被选为最佳结果，这会导致重复的ID。由于历史原因，PHP API对结果集的行进行按文档ID的有序hash，因此用PHP API进行对MVA属性的分组操作时你还需要使用 SetArrayResult().</p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>为了快速地相应响应查询，Sphinx需要从文本数据中建立一种为查询做优化的特殊的数据结构。这种数据结构被称为索引（index）；而建立索引的过程也叫做索引或建立索引（indexing）。</p><p>不同的索引类型是为不同的任务设计的。比如，基于磁盘的B-Tree存储结构的索引可以更新起来比较简单（容易向已有的索引插入新的文档），但是搜起来就相当慢。</p><p>目前在Sphinx中实现的唯一一种索引类型是为最优化建立索引和检索的速度而设计的。随之而来的代价是更新索引相当的很慢。理论上讲，更新这种索引甚至可能比从头重建索引还要慢。不过大多数情况下这可以靠建立多个索引来解决索引更新慢的问题，细节请参考 第 3.11 节 “实时索引更新”.</p><p>每个配置文件都可以按需配置足够多的索引。indexer 工具可以将它们同时重新索引（如果使用了–all选项）或者仅更新明确指出的一个。 searchd工具会为所有被指明的索引提供检索服务，而客户端可以在运行时指定使用那些索引进行检索。</p><h1 id="字符集、大小写转换和转换表"><a href="#字符集、大小写转换和转换表" class="headerlink" title="字符集、大小写转换和转换表"></a>字符集、大小写转换和转换表</h1><p>当建立索引时，Sphinx从指定的数据源获得文本文档，将文本分成词的集合，再对每个词做大小写转换，于是“Abc”，“ABC”和“abc”都被当作同一个词（word，或者更学究一点，词项term）</p><p>为了正确完成上述工作，Sphinx需要知道：</p><ul><li>源文本是什么编码的;</li><li>那些字符是字母，哪些不是;</li><li>哪些字符需要被转换，以及被转换成什么.</li></ul><p>这些都可以用 charset_type 和 charset_table 选项为每个索引单独配置. charset_type 指定文档的编码是单字节的（SBCS）还是UTF-8的。在Coreseek中，如果通过charset_dictpath设置中文词典启动了中文分词模式后，不仅可以使用UTF-8编码的，还可以使用GBK及BIG5的编码（需要编译时提供iconv支持）；但是在内部实现中，仍然是预先转换成UTF-8编码在进行处理的. charset_table 则指定了字母类字符到它们的大小写转换版本的对应表，没有在这张表中出现的字符被认为是非字母类字符，并且在建立索引和检索时被当作词的分割符来看待。</p><p>注意，尽管默认的转换表并不包含空格符 (ASCII code 0x20, Unicode U+0020) , 但是这么做是 完全合法的。 这在某些情况下可能有用，比如在对tag云构造索引的时候，这样一个用空格分开的词集就可以被当作一个单独的查询项了.</p><h1 id="实时索引更新-作者注-然并卵"><a href="#实时索引更新-作者注-然并卵" class="headerlink" title="实时索引更新(作者注:然并卵)"></a>实时索引更新(作者注:然并卵)</h1><p>当前主要有两种方法来维护全文索引的内容是最新的。请注意，但是，这两种处理方法 的任务是应对全文数据更新，而不是 属性更新。从版本0.9.8开始支持即时的属性更新。参看 UpdateAttributes() API 调用了解详情。</p><p>方法一，使用基于磁盘的索引，手动分区，然后定期重建较小的分区（被称为“增量”）。通过尽可能的减小重建部分的大小，可以将平均索引滞后时间降低到30~60秒。在0.9.x版本中，这是唯一可用的方法。在一个巨大的文档集上，这可能是最有效的一种方法。参看第 3.12 节 “增量索引更新”了解详情。</p><p>方法二，版本1.x（从版本1.10-beta开始）增加了实时索引（简写为Rt索引）的支持，用于及时更新全文数据。在RT索引上的更新，可以在1~2毫秒（0.001-0.002秒）内出现在搜索结果中。然而，RT实时索引在处理较大数据量的批量索引上效率并不高。参看 第 4 章 RT实时索引 了解详情。</p><h1 id="增量索引更新"><a href="#增量索引更新" class="headerlink" title="增量索引更新"></a>增量索引更新</h1><p>有这么一种常见的情况：整个数据集非常大，以至于难于经常性的重建索引，但是每次新增的记录却相当地少。一个典型的例子是：一个论坛有1000000个已经归档的帖子，但每天只有1000个新帖子。</p><p>在这种情况下可以用所谓的“主索引＋增量索引”（main+delta）模式来实现“近实时”的索引更新。</p><p>这种方法的基本思路是设置两个数据源和两个索引，对很少更新或根本不更新的数据建立主索引，而对新增文档建立增量索引。在上述例子中，那1000000个已经归档的帖子放在主索引中，而每天新增的1000个帖子则放在增量索引中。增量索引更新的频率可以非常快，而文档可以在出现几分种内就可以被检索到。</p><p>确定具体某一文档的分属那个索引的分类工作可以自动完成。一个可选的方案是，建立一个计数表，记录将文档集分成两部分的那个文档ID，而每次重新构建主索引时，这个表都会被更新。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs conf"># in MySQL<br>CREATE TABLE sph_counter<br>(<br>    counter_id INTEGER PRIMARY KEY NOT NULL,<br>    max_doc_id INTEGER NOT NULL<br>);<br><br># in sphinx.conf<br>source main<br>&#123;<br>    # ...<br>    sql_query_pre = SET NAMES utf8<br>    sql_query_pre = REPLACE INTO sph_counter SELECT 1, MAX(id) FROM documents<br>    sql_query = SELECT id, title, body FROM documents \<br>        WHERE id&lt;=( SELECT max_doc_id FROM sph_counter WHERE counter_id=1 )<br>&#125;<br><br>source delta : main<br>&#123;<br>    sql_query_pre = SET NAMES utf8<br>    sql_query = SELECT id, title, body FROM documents \<br>        WHERE id&gt;( SELECT max_doc_id FROM sph_counter WHERE counter_id=1 )<br>&#125;<br><br>index main<br>&#123;<br>    source = main<br>    path = /path/to/main<br>    # ... all the other settings<br>&#125;<br><br># note how all other settings are copied from main,<br># but source and path are overridden (they MUST be)<br>index delta : main<br>&#123;<br>    source = delta<br>    path = /path/to/delta<br>&#125;<br></code></pre></td></tr></table></figure><p>请注意，上例中我们显示设置了数据源delta的sql_query_pre选项，覆盖了全局设置。必须显示地覆盖这个选项，否则对delta做索引的时候也会运行那条REPLACE查询，那样会导致delta源中选出的数据为空。可是简单地将delta的sql_query_pre设置成空也不行，因为在继承来的数据源上第一次运行这个指令的时候，继承来的所有值都会被清空，这样编码设置的部分也会丢失。因此需要再次显式调用编码设置查询。</p><h1 id="索引合并"><a href="#索引合并" class="headerlink" title="索引合并"></a>索引合并</h1><p>合并两个已有的索引比重新对所有数据做索引更有效率，而且有时候必须这样做（例如在“主索引＋增量索引”分区模式中应合并主索引和增量索引，而不是简单地重新索引“主索引对应的数据）。因此indexer有这个选项。合并索引一般比重新索引快，但在大型索引上仍然不是一蹴而就。基本上，待合并的两个索引都会被读入内存一次，而合并后的内容需要写入磁盘一次。例如，合并100GB和1GB的两个索引将导致202GB的IO操作（但很可能还是比重新索引少）</p><p>基本的命令语法如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">indexer --merge DSTINDEX SRCINDEX [--rotate]<br></code></pre></td></tr></table></figure><p>SRCINDEX的内容被合并到DSTINDEX中，因此只有DSTINDEX索引会被改变。 若DSTINDEX已经被searchd于提供服务，则–rotate参数是必须的。 最初设计的使用模式是，将小量的更新从SRCINDEX合并到DSTINDEX中。 因此，当属性被合并时，一旦出现了重复的文档ID，SRCINDEX中的属性值更优先（会覆盖DSTINDEX中的值）。 不过要注意，“旧的”关键字在这个过程中并不会被自动删除。 例如，在DSTINDEX中有一个叫做“old”的关键字与文档123相关联，而在SRCINDEX中则有关键字“new”与同一个文档相关，那么在合并后用这两个关键字都能找到文档123。 您可以给出一个显式条件来将文档从DSTINDEX中移除，以便应对这种情况，相关的开关是–merge-dst-range:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">indexer --merge main delta --merge-dst-range deleted 0 0<br></code></pre></td></tr></table></figure><p>这个开关允许您在合并过程中对目标索引实施过滤。过滤器可以有多个，只有满足全部过滤条件的文档才会在最终合并后的索引中出现。在上述例子中，过滤器只允许“deleted”为0的那些条件通过，而去除所有标记为已删除（“deleted”）的记录（可以通过调用UpdateAttributes()设置文档的属性）。</p><p>这个开关允许您在合并过程中对目标索引实施过滤。过滤器可以有多个，只有满足全部过滤条件的文档才会在最终合并后的索引中出现。在上述例子中，过滤器只允许“deleted”为0的那些条件通过，而去除所有标记为已删除（“deleted”）的记录（可以通过调用UpdateAttributes()设置文档的属性）。</p><h1 id="RT实时索引"><a href="#RT实时索引" class="headerlink" title="RT实时索引"></a>RT实时索引</h1><h2 id="RT实时索引概览"><a href="#RT实时索引概览" class="headerlink" title="RT实时索引概览"></a>RT实时索引概览</h2><h2 id="RT实时索引使用注意事项"><a href="#RT实时索引使用注意事项" class="headerlink" title="RT实时索引使用注意事项"></a>RT实时索引使用注意事项</h2><h2 id="RT实时索引原理"><a href="#RT实时索引原理" class="headerlink" title="RT实时索引原理"></a>RT实时索引原理</h2><h2 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h2><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索##"></a>搜索##</h1><h1 id="SphinxQL-指南-作者注-很重要-更何况search工具在新版后不这么好用了"><a href="#SphinxQL-指南-作者注-很重要-更何况search工具在新版后不这么好用了" class="headerlink" title="SphinxQL 指南(作者注:很重要,更何况search工具在新版后不这么好用了)"></a>SphinxQL 指南(作者注:很重要,更何况search工具在新版后不这么好用了)</h1><h1 id="sphinx-conf-csft-conf-配置选项参考"><a href="#sphinx-conf-csft-conf-配置选项参考" class="headerlink" title="sphinx.conf/csft.conf 配置选项参考"></a>sphinx.conf/csft.conf 配置选项参考</h1><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><ul><li><a href="http://sphinxsearch.com/wiki/doku.php?id=sphinx_manual_chinese#%E4%BB%80%E4%B9%88%E6%98%AFsphinx_coreseek">sphinx官方wiki(较老,建议只看介绍部分)</a></li><li><a href="http://www.coreseek.cn/docs/coreseek_4.1-sphinx_2.0.1-beta.html">CoreSeek中文文档(CoreSeek是基于sphinx的中文分词引擎)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sphinx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oAuth授权的过程</title>
      <link href="/2014/11/28/2014-oAuth%E6%8E%88%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2014/11/28/2014-oAuth%E6%8E%88%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developers.google.com/accounts/docs/OAuth2">查看原文，点击这里</a></p><p>####使用OAuth 2.0访问Google APIs####</p><p>Google APIs使用OAuth 2.0来认证和授权。Google APIs支持常用的OAuth 2.0场景，例如网页应用，需要安装的本地应用，和客户端应用。</p><p>OAuth 2.0 是一个相对简单的协议。首先，你需要从<a href="https://console.developers.google.com/">Google Developers Console</a>获取OAuth 2.0的凭证（译注：client_id、client_secret、redirect_uri等）。然后你的客户端应用程序从Google身份认证服务器请求一个accesss token，从http响应中解析出一个token，最后将携带这个token去访问google API。</p><p>这个页面给出了Google支持的OAuth 2.0身份认证场景的概览，并提供了更详细的链接。OAuth 2.0身份认证的详细文档，请点击<a href="https://developers.google.com/accounts/docs/OpenIDConnect">OpenID Connect</a>。</p><blockquote><p>既要正确实现功能又要保证安全，外面强烈推荐您在与Google OAuth 2.0终端交互时使用OAuth 2.0的库文件。使用这些比人well-debug过的代码是最佳实践，并且它能保护你的服务器和你的用户。更多信息，参考<a href="https://developers.google.com/accounts/docs/OAuth2#libraries">Client libraries</a>。</p></blockquote><p>####基础步骤####</p><hr><p>所有的应用在访问Google OAuth 2.0时都遵循一个模式。从高层次上来说，你需要4个步骤：</p><h5 id="1-从Google开发者控制台获取到凭证"><a href="#1-从Google开发者控制台获取到凭证" class="headerlink" title="1. 从Google开发者控制台获取到凭证#####"></a>1. 从Google开发者控制台获取到凭证#####</h5><p>至少你需要获取到client_id，可能也需要client_secret（译注：详细请参看上一篇文章<a href="http://www.straysh.info/article/27">创建Google App</a>）。需要哪些值取决于你在Google开发者控制台创建的是何种app。例如，一个javascript应用不需要client_secret，但是网页应用需要。</p><h5 id="2-从Google身份认证服务器上获取一个access-token"><a href="#2-从Google身份认证服务器上获取一个access-token" class="headerlink" title="2. 从Google身份认证服务器上获取一个access token#####"></a>2. 从Google身份认证服务器上获取一个access token#####</h5><p>在你的应用程序能使用Google API访问私有数据之前，你需要获取一个准许访问该API的token。单单一个access token能准许对多个API各种等级的访问权限。变量参数scope控制access token准许访问的一系列资源和操作。在获取access-token期间，你的应用程序会发送一个或者多个scope值。</p><p>有多种方法来发送这个请求，并且它们根据你创建的应用而变化。例如，一个javascript应用会使用浏览器跳转到google来获取token，而在设备上安装的应用程序则因没有浏览器转而使用web service请求token。</p><p>在用户使用google账户登陆时，需要数个授权步骤。在正确登陆之后，用户会被询问是否准许应用程序获取这些权限。这个过程称之为user consent。</p><p>若用户准许了这些权限，Google身份认证服务器会给你的应用程序发送一个access token（或者你可以用来获取access token的一个授权code）。若用户拒绝，则服务器返回一个error。</p><p>通常，增量的请求scope是最佳的实践：在需要时请求相应的scope，而不是在最开始就请求。例如，一个需要支持支付的应用就应该在用户点击”购买”时才请求访问Google钱包的权限。详情查看<a href="https://developers.google.com/accounts/docs/OAuth2WebServer#incrementalAuth">Incremental authorization</a>。</p><h5 id="3-将access-token-发送给一个API"><a href="#3-将access-token-发送给一个API" class="headerlink" title="3. 将access token 发送给一个API#####"></a>3. 将access token 发送给一个API#####</h5><p>应用获取到access token之后，它会在http身份认证头中发送token到Google API上。在URI的查询字符串中发送token也是可以的，单并不推荐。因为URI参数会被记录到日志文件中因此并不安全。一个良好的REST实践是：避免非必须的URI参数。</p><p>access token只能访问在获取该token时指定的scope中描述的资源和操作。例如，若token是为Google+ API产生的，它不被准许访问Google 联系人API。但是，你可以向Google+ API多次发送同一个token。</p><h5 id="4-如果需要，刷新access-token"><a href="#4-如果需要，刷新access-token" class="headerlink" title="4. 如果需要，刷新access token#####"></a>4. 如果需要，刷新access token#####</h5><p>access token有有限的生命时间。若你的应用程序需要在超出生命时间之后访问Google API，它可以获取一个refresh token。refresh token允许你的应用程序获取一个新的access token。</p><blockquote><p>将refresh token保存在一个长期的存储介质中，并在它有效时继续使用它。refresh token的数量是有限制的(这句不会翻译 囧)。若应用程序获取的refresh token超量，旧的refresh token将会失效。</p></blockquote><p>to be continued … …</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建Google App</title>
      <link href="/2014/11/28/2014-%E5%88%9B%E5%BB%BAGoogle-App/"/>
      <url>/2014/11/28/2014-%E5%88%9B%E5%BB%BAGoogle-App/</url>
      
        <content type="html"><![CDATA[<ul><li>第一步，打开<a href="https://console.developers.google.com,点击create/">https://console.developers.google.com，点击create</a> project</li></ul><p><img src="http://images.straysh.com/create-google-app-001.png" alt="001"></p><ul><li>点击app进入管理页面，下图中3处均需要修改</li></ul><p><img src="http://images.straysh.com/create-google-app-002.png" alt="001"></p><ul><li>首先，点击APIs，找到Google+ API 将off修改为on</li></ul><p><img src="http://images.straysh.com/create-google-app-003.png" alt="001"></p><ul><li>进入Consent screen  选择邮箱并设置app的名称</li></ul><p><img src="http://images.straysh.com/create-google-app-004.png" alt="001"></p><ul><li>进入 Credentials，点击 Create new Client ID</li></ul><p><img src="http://images.straysh.com/create-google-app-005.png" alt="001"><br><img src="http://images.straysh.com/create-google-app-006.png" alt="001"></p><p>ok，到这里，就可以使用网页登陆google+了。</p><p>下一章：<br><a href="http://www.straysh.info/article/28">oAuth授权的过程</a></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google+ oAuth 2.0 登陆</title>
      <link href="/2014/11/28/2014-Google-oAuth-2-0-%E7%99%BB%E9%99%86/"/>
      <url>/2014/11/28/2014-Google-oAuth-2-0-%E7%99%BB%E9%99%86/</url>
      
        <content type="html"><![CDATA[<p>今天要写的是一个系列，主题是使用google+账号登陆自己的网站。</p><ul><li><a href="/2014/11/28/%E5%88%9B%E5%BB%BAGoogle-App/">创建Goolge app</a> </li><li><a href="/2014/11/28/oAuth%E6%8E%88%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/">oAuth授权的过程</a></li><li>一个简单的网页登陆</li><li>进阶：让服务器替代用户请求google API (js版本的例子)</li><li>使用命令行调试google API（oAuth 授权过程为例）</li><li>Final：使用ios上使用google+账号登陆自己的网站</li></ul><hr><p>参考文献：</p><ol><li><a href="https://console.developers.google.com/">https://console.developers.google.com</a></li><li><a href="https://developers.google.com/analytics/devguides/reporting/core/v2/gdataAuthentication">https://developers.google.com/analytics/devguides/reporting/core/v2/gdataAuthentication</a></li><li><a href="https://developers.google.com/+/mobile/ios/sign-in">https://developers.google.com/+/mobile/ios/sign-in</a></li><li><a href="https://developers.google.com/+/quickstart/php">https://developers.google.com/+/quickstart/php</a></li><li><a href="https://developers.google.com/accounts/docs/OAuth2ForDevices">https://developers.google.com/accounts/docs/OAuth2ForDevices</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 5.4 on CentOS/RHEL 7.0, 6.5 and 5.10 via Yum</title>
      <link href="/2014/11/17/2014-PHP-5-4-on-CentOS-RHEL-7-0-6-5-and-5-10-via-Yum/"/>
      <url>/2014/11/17/2014-PHP-5-4-on-CentOS-RHEL-7-0-6-5-and-5-10-via-Yum/</url>
      
        <content type="html"><![CDATA[<p>###PHP 5.4 on CentOS/RHEL 7.0, 6.5 and 5.10 via Yum###<br><a href="https://webtatic.com/packages/php54/">原文</a></p><p>PHP 5.4.33 has been released on PHP.net on 18th September 2014, and is also available for CentOS/RHEL 5.10 and 6.5 at Webtatic via Yum.</p><p> <strong>Update 2013-07-21</strong> – A new package “php54w-mysqlnd” has been added as an alternative to “php54w-mysql”. This will instead provide mysql, mysqli, and pdo_mysql built against the PHP MySql native driver rather than the system default libmysqlclient. It will replace “php54w-mysql55″, as it will work with MySQL 5.0/5.1/5.5 server)<br> <strong>Update 2013-06-20</strong> – Webtatic now has released <a href="https://webtatic.com/packages/php55/">PHP 5.5.0 for CentOS/RHEL 5 and 6</a><br> <strong>Update 2013-05-26</strong> – CentOS/RHEL 5.x now supported.<br> <strong>Update 2013-05-18</strong> – A new package “php54w-pecl-zendopcache” has been added, Zend Optimizer Plus opcode cache.<br> <strong>Update 2012-08-26</strong> – APC is stable enough now and so the extension has been added<br> <strong>Update 2012-07-22</strong> – memcache and xdebug extensions have been added<br> <strong>Update 2012-04-29</strong> – mcrypt, tidy, mssql, interbase have been added back in to the repository.  </p><p>PHP 5.4.0 adds new features such as:</p><ul><li>Traits</li><li>Built-in web server</li><li>Array short notation</li><li>Array return value de-referencing</li><li>Finally killing off magic-quotes and safe-mode</li></ul><p>To see what else has been added, check out the <a href="http://php.net/ChangeLog-5.php">changelog</a>.</p><p>To install, first you must add the Webtatic EL yum repository information corresponding to your CentOS/RHEL version to yum:</p><p>CentOS/RHEL 7.x:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm<br>rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm<br></code></pre></td></tr></table></figure><p>CentOS/RHEL 6.x:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm<br></code></pre></td></tr></table></figure><p>CentOS/RHEL 5.x:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -Uvh https://mirror.webtatic.com/yum/el5/latest.rpm<br></code></pre></td></tr></table></figure><p>Now you can install php by doing:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install php54w<br></code></pre></td></tr></table></figure><p>If you would like to upgrade php to this version it is recommended that you check that your system will support the upgrade, e.g. making sure any CPanel-like software can run after the upgrade.</p><p>Unless you know what you are doing, it is risky upgrading an existing system. It’s much safer to do this by provisioning a separate server to perform the upgrade as a fresh install instead.</p><p>If you know what you are doing, you can upgrade PHP by:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install yum-plugin-replace<br> <br>yum replace php-common --replace-with=php54w-common<br></code></pre></td></tr></table></figure><p>It will likely give you a message “WARNING: Unable to resolve all providers …”. This is normal, and you can continue by tying “y“. You will be given a chance to see what packages will be installed and removed before again being given a chance to confirm.<br>Packages</p><blockquote><p><strong>Package</strong> Provides<br><strong>php54w</strong>     mod_php, php54w-zts<br><strong>php54w-bcmath</strong><br>**php54w-cli     php-cgi, php-pcntl, php-readline<br>**php54w-common     php-api, php-bz2, php-calendar, php-ctype, php-curl, php-date, php-exif, php-fileinfo, php-ftp, php-gettext, php-gmp, php-hash, php-iconv, php-json, php-libxml, php-openssl, php-pcre, php-pecl-Fileinfo, php-pecl-phar, php-pecl-zip, php-reflection, php-session, php-shmop, php-simplexml, php-sockets, php-spl, php-tokenizer, php-zend-abi, php-zip, php-zlib<br><strong>php54w-dba</strong><br><strong>php54w-devel</strong><br><strong>php54w-embedded</strong>     php-embedded-devel<br><strong>php54w-enchant</strong><br><strong>php54w-fpm</strong><br><strong>php54w-gd</strong><br><strong>php54w-imap</strong><br><strong>php54w-interbase</strong>     php_database, php-firebird<br><strong>php54w-intl</strong><br><strong>php54w-ldap</strong><br><strong>php54w-mbstring</strong><br><strong>php54w-mcrypt</strong><br><strong>php54w-mssql</strong><br><strong>php54w-mysql</strong>     php-mysqli, php_database<br><strong>php54w-mysqlnd</strong>     php-mysqli, php_database<br><strong>php54w-odbc</strong>     php-pdo_odbc, php_database<br><strong>php54w-pdo</strong><br><strong>php54w-pecl-apc</strong><br><strong>php54w-pecl-gearman</strong><br><strong>php54w-pecl-geoip</strong><br><strong>php54w-pecl-memcache</strong><br><strong>php54w-pecl-zendopcache</strong><br><strong>php54w-pecl-xdebug</strong><br><strong>php54w-pgsql</strong>     php-pdo_pgsql, php_database<br><strong>php54w-process</strong>     php-posix, php-sysvmsg, php-sysvsem, php-sysvshm<br><strong>php54w-pspell</strong><br><strong>php54w-recode</strong><br><strong>php54w-snmp</strong><br><strong>php54w-soap</strong><br><strong>php54w-tidy</strong><br><strong>php54w-xml</strong>     php-dom, php-domxml, php-wddx, php-xsl<br><strong>php54w-xmlrpc</strong>     </p></blockquote><p>Opcode Caches</p><p>A precompiled PHP APC package is available as an opcode cache, which is recommended for performance reasons. It can be installed via:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install php54w-pecl-apc<br></code></pre></td></tr></table></figure><p>Zend have now released Zend Optimizer Plus opcode cache as open source, and is now known as Zend OPcache. As it’s more actively maintained than APC, it has been added as a package to the Webtatic EL6 repository. It can be installed via:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install php54w-pecl-zendopcache<br></code></pre></td></tr></table></figure><p>#####error_reporting E_ALL now includes E_STRICT#####</p><p>You may get a lot more errors coming out of your error logs if by default your error_reporting is set to E_ALL now without explicitly turning off E_STRICT. The default php.ini that comes with the PHP package turns this off by default, but if you are upgrading from an existing installation, your php.ini may not be updated, meaning this will likely be turned on.</p><hr><h1 class="justcenter">Cent-OS 6 安装LAMP 精简版本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">更新Linux到最新内核</span><br>yum update -y<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装时间同步</span><br>yum install ntpdate<br><span class="hljs-meta prompt_"># </span><span class="language-bash">同步时间</span><br>ntpdate 210.72.145.44<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">CentOS6 增加PHP5.4源（推荐）</span><br>rpm -Uvh http://mirror.webtatic.com/yum/el6/latest.rpm<br><span class="hljs-meta prompt_"># </span><span class="language-bash">CentOS5 增加PHP5.4源</span><br>rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装LAMP</span><br>yum install php54w.x86_64 php54w-cli.x86_64 php54w-devel.x86_64 php54w-intl.x86_64 php54w-mysqlnd.x86_64 php54w-pdo.x86_64 php54w-soap.x86_64 php54w-tidy.x86_64 php54w-xml.x86_64 php54w-xmlrpc.x86_64 php54w-zts.x86_64 php54w-gd.x86_64 php54w-mbstring.x86_64 php54w-pecl-apc.x86_64 php54w-mcrypt.x86_64 httpd.x86_64 httpd-devel.x86_64 httpd-tools.x86_64 mysql.x86_64 mysql-devel.x86_64 mysql-server.x86_64 vsftpd.x86_64 unzip.x86_64 -y<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加自启动</span><br>chkconfig httpd on<br>chkconfig mysqld on<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动Apache和mysql</span><br>service httpd start<br>service mysqld start<br><span class="hljs-meta prompt_"># </span><span class="language-bash">当然要简单直接</span><br>reboot<br></code></pre></td></tr></table></figure><hr><p>参考：<br><a href="https://help.ubuntu.com/community/ApacheMySQLPHP" title="Ubuntu安装LAMP官方指南">sudo apt-get install lamp-server^</a><br><a href="http://blog.csdn.net/damaibao/article/details/8057860">CentOS6.3关于LAMP的配置apache-2.4.3、php-5.4.7、phpMyAdmin3.5(系列博文) </a></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Nginx图片服务器</title>
      <link href="/2014/11/13/2014-%E6%90%AD%E5%BB%BANginx%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2014/11/13/2014-%E6%90%AD%E5%BB%BANginx%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Part-I-安装Nginx"><a href="#Part-I-安装Nginx" class="headerlink" title="Part-I 安装Nginx"></a>Part-I 安装Nginx</h3><ol><li>安装PCRE</li><li>下载 ngx_cache_purge 并解压，用来清除缓存</li><li>下载Nginx并解压</li><li>cd nginx-1.7.7</li><li> 编译，–prefix使用默认值，则nginx安装在/usr/local/nginx<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure    --user=www    --group=www    --add-module=../ngx_cache_purge-1.0 <br>    --with-http_stub_status_module    --with-http_ssl_module<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure></li></ol><p>###Part-II 配置###<br>vim /usr/local/nginx/conf/nginx.conf，并编辑如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs conf">user  www www;<br>worker_processes  8;<br><br>error_log  /data3/nginx/error.log  crit;<br>#error_log  logs/error.log;<br>#error_log  logs/error.log  notice;<br>#error_log  logs/error.log  info;<br><br>pid        /usr/local/nginx/nginx.pid;<br><br><br>events &#123;<br>    use epoll;<br>    worker_connections  65535;<br>&#125;<br><br><br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br>    charset utf-8;<br>    <br>    server_names_hash_bucket_size 128;<br>    client_header_buffer_size 32k;<br>    large_client_header_buffers 4 32k;<br>    client_max_body_size 300m;<br><br>    sendfile on;<br>    tcp_nopush on;<br>    keepalive_timeout 60;<br>    tcp_nodelay on;<br><br>    client_body_buffer_size 512k;<br>    proxy_connect_timeout 5;<br>    proxy_read_timeout 60;<br>    proxy_send_timeout 5;<br>    proxy_buffer_size 16k;<br>    proxy_buffers 4 64k;<br>    proxy_busy_buffers_size 128k;<br>    proxy_temp_file_write_size 128k;<br><br>    gzip on;<br>    gzip_min_length 1k;<br>    gzip_buffers 4 16k;<br>    gzip_http_version 1.1;<br>    gzip_comp_level 2;<br>    gzip_types text/plainapplication/x-javascript text/css application/xml;<br>    gzip_vary on;<br><br># proxy_temp_path 和 proxy_cache_path 必须在同一分区<br>    proxy_temp_path /data0/proxy_temp_dir;<br># 设置web缓存区名称为cahche_one，内存缓存空间大小为200M,1天没有被访问的内容自动清除硬盘缓存空间大小为300G<br>    proxy_cache_path /data0/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;<br><br>#    upstream backend_server&#123;<br>#        server 192.168.1.121:80 weight=1 max_fail=2 fail_timeout=30s;<br>#        server 192.168.1.122:80 weight=1 max_fail=2 fail_timeout=30s;<br>#        server 192.168.1.123:80 weight=1 max_fail=2 fail_timeout=30s;<br>#    &#125;<br><br>#以下为缓存服务器<br><br>    log_format cache &#x27;***$time_local \n&#x27;<br>                    &#x27;   $upstream_cache_status \n&#x27;<br>                    &#x27;   $remote_addr, $http_x_forwarded_for \n&#x27;<br>                    &#x27;   Cache-Control: $upstream_http_cache_control \n&#x27;<br>                    &#x27;   Expires: $upstream_http_expires \n&#x27;<br>                    &#x27;   &quot;$request&quot;($status) \n&#x27;<br>                    &#x27;   &quot;$http_user_agent&quot; \n&#x27;;<br><br>    server &#123;<br>        listen       80;<br>        server_name  192.168.1.120;<br><br>        location / &#123;<br>            proxy_cache cache_one;<br>            # 对不同的HTTP状态码设置不同的缓存时间<br>            proxy_cache_valid 200 304 12h;<br>            #以域名、URI、参数组合成web服务器的key值，Ngnix根据key值哈希，存储缓存内容到二级缓存目录内<br>            proxy_cache_key  $host$uri$is_args$args;<br>            proxy_set_header Host $host;<br>            proxy_set_header X-Forwarded-For $remote_addr;<br>            #此处跳转到真实图片服务器<br>            proxy_pass http://192.168.1.120:8080;<br><br>            access_log /data3/nginx/cache.log cache;<br><br>            expires 1d;<br>        &#125;<br><br>        location ~ /purge(/.*)&#123;<br>            #设置只允许指定的ip或ip段才可以清除url缓存  <br>            #allow 127.0.0.1;<br>            #allow 192.168.0.0/16;<br>            #deny  all;<br>            proxy_cache_purge cache_one $host$1$is_args$args;<br>        &#125;<br><br>#        #扩展名为.php、.jsp、.cig结尾的动态应用程序不缓存<br>#        location ~.*\.(php|jsp|cgi)?$<br>#        &#123;<br>#            proxy_set_header Host $host;<br>#            proxy_set_header X-Forwarded-For $remote_addr;<br>#            proxy_pass http://backend_server;<br>#        &#125;<br><br>        access_log off;<br><br>        #error_page  404              /404.html;<br><br>        # redirect server error pages to the static page /50x.html<br>        #<br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br><br>        # proxy the PHP scripts to Apache listening on 127.0.0.1:80<br>        #<br>        #location ~ \.php$ &#123;<br>        #    proxy_pass   http://127.0.0.1;<br>        #&#125;<br><br>        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000<br>        #<br>        #location ~ \.php$ &#123;<br>        #    root           html;<br>        #    fastcgi_pass   127.0.0.1:9000;<br>        #    fastcgi_index  index.php;<br>        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;<br>        #    include        fastcgi_params;<br>        #&#125;<br><br>        # deny access to .htaccess files, if Apache&#x27;s document root<br>        # concurs with nginx&#x27;s one<br>        #<br>        #location ~ /\.ht &#123;<br>        #    deny  all;<br>        #&#125;<br>    &#125;<br><br>    #真实的图片服务器<br>    server&#123;<br>        listen 8080;<br>        server_name localhost;<br>        location /&#123;<br>            root /data0/images/;<br>        &#125;<br><br>        #访问日志，一般都off掉<br>        access_log /data3/nginx/access.log combined;<br>    &#125;<br><br><br>    # another virtual host using mix of IP-, name-, and port-based configuration<br>    #<br>    #server &#123;<br>    #    listen       8000;<br>    #    listen       somename:8080;<br>    #    server_name  somename  alias  another.alias;<br><br>    #    location / &#123;<br>    #        root   html;<br>    #        index  index.html index.htm;<br>    #    &#125;<br>    #&#125;<br><br><br>    # HTTPS server<br>    #<br>    #server &#123;<br>    #    listen       443 ssl;<br>    #    server_name  localhost;<br><br>    #    ssl_certificate      cert.pem;<br>    #    ssl_certificate_key  cert.key;<br><br>    #    ssl_session_cache    shared:SSL:1m;<br>    #    ssl_session_timeout  5m;<br><br>    #    ssl_ciphers  HIGH:!aNULL:!MD5;<br>    #    ssl_prefer_server_ciphers  on;<br><br>    #    location / &#123;<br>    #        root   html;<br>    #        index  index.html index.htm;<br>    #    &#125;<br>    #&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>到此，Nginx图片服务区搭建完毕。<br>在/data0/images/下放入一张图片 200.jpg测试之<br>访问 <a href="http://192.168.1.120/200.jpg%EF%BC%8C">http://192.168.1.120/200.jpg，</a><br>cache_log记录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs log">***12/Nov/2014:16:15:26 +0800 <br>   MISS <br>   192.168.1.19, - <br>   Cache-Control: - <br>   Expires: - <br>   &quot;GET /200.jpg HTTP/1.1&quot;(200) <br>   &quot;Mozilla/5.0 (X11; Linux x86_64; rv:30.0) Gecko/20100101 Firefox/30.0&quot; <br><br>***12/Nov/2014:16:15:38 +0800 <br>   HIT <br>   192.168.1.19, - <br>   Cache-Control: - <br>   Expires: - <br>   &quot;GET /200.jpg HTTP/1.1&quot;(200) <br>   &quot;Mozilla/5.0 (X11; Linux x86_64; rv:30.0) Gecko/20100101 Firefox/30.0&quot;<br></code></pre></td></tr></table></figure><p>访问 <a href="http://192.168.1.120/purge/200.jpg">http://192.168.1.120/purge/200.jpg</a> 清除缓存</p><p>【参考资料】：<br><a href="http://nginx.org/en/docs/configure.html" title="官方安装指南">http://nginx.org/en/docs/configure.html</a><br><a href="http://nginx.org/cn/#basic_http_features" title="Nginx中文文档">http://nginx.org/cn/#basic_http_features</a></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL分区</title>
      <link href="/2014/11/12/2014-MySQL%E5%88%86%E5%8C%BA/"/>
      <url>/2014/11/12/2014-MySQL%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<p><a href="http://dev.mysql.com/doc/refman/5.5/en/partitioning-limitations-partitioning-keys-unique-keys.html">http://dev.mysql.com/doc/refman/5.5/en/partitioning-limitations-partitioning-keys-unique-keys.html</a></p><p>19.5.1 分区索引，主键索引，和唯一索引</p><p>这一节讨论了分区索引同主键索引、唯一索引的关系。 掌握这一关系的基本原则可以表述如下：在分区表的分区表达式中所用到的列必须是该表的每一个唯一索引的一部分。</p><p>换而言之，该表的每一个唯一索引都必须使用了分区表达式中的每一列。（<code>唯一索引</code>也包括主键索引，因为从定义上将主键也是唯一索引。这个特殊的例子在后面后讨论。）如下例，下面的建表语句都是无效的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t1 (<br>    col1 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col2 <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col3 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col4 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> KEY (col1, col2)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH(col3)<br>PARTITIONS <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t2 (<br>    col1 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col2 <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col3 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col4 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> KEY (col1),<br>    <span class="hljs-keyword">UNIQUE</span> KEY (col3)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH(col1 <span class="hljs-operator">+</span> col3)<br>PARTITIONS <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><p>上述两例中，目标表将至少有一个唯一索引不是分区表达式中指定的列。</p><p>下面的例子时有效的，并指出了正确修改上述无效例子的方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t1 (<br>    col1 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col2 <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col3 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col4 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> KEY (col1, col2, col3)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH(col3)<br>PARTITIONS <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t2 (<br>    col1 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col2 <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col3 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col4 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> KEY (col1, col3)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH(col1 <span class="hljs-operator">+</span> col3)<br>PARTITIONS <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><p>下面的例子是错误的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t3 (<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     col1 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     col2 <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     col3 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     col4 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     <span class="hljs-keyword">UNIQUE</span> KEY (col1, col2),<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     <span class="hljs-keyword">UNIQUE</span> KEY (col3)<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> )<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH(col1 <span class="hljs-operator">+</span> col3)<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> PARTITIONS <span class="hljs-number">4</span>;<br>ERROR <span class="hljs-number">1491</span> (HY000): A <span class="hljs-keyword">PRIMARY</span> KEY must include <span class="hljs-keyword">all</span> columns <span class="hljs-keyword">in</span> the <span class="hljs-keyword">table</span><span class="hljs-string">&#x27;s partitioning function</span><br></code></pre></td></tr></table></figure><p>上述建表语句失败了，原因在于col1和col3这两列都在目标分区索引中，但是，没有任何一列出现在该表的全部唯一索引中。<br>如下时一种可能的改进方案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t3 (<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     col1 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     col2 <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     col3 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     col4 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     <span class="hljs-keyword">UNIQUE</span> KEY (col1, col2, col3),<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     <span class="hljs-keyword">UNIQUE</span> KEY (col3)<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> )<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH(col3)<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> PARTITIONS <span class="hljs-number">4</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.05</span> sec)<br></code></pre></td></tr></table></figure><p>这个例子中，col3是该表每一个唯一索引的一部分。因此上述语句成功了。</p><p>下面这个建表语句时无法分区的，因为分区索引中不能有某列出现的该表的每一个唯一索引中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t4 (<br>    col1 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col2 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col3 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col4 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> KEY (col1, col3),<br>    <span class="hljs-keyword">UNIQUE</span> KEY (col2, col4)<br>);<br></code></pre></td></tr></table></figure><p>由于主键也是被定义为唯一索引的，若表有主键，上述的限制页适用与主键。下述两例均是无效的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t5 (<br>    col1 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col2 <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col3 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col4 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY(col1, col2)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH(col3)<br>PARTITIONS <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t6 (<br>    col1 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col2 <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col3 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col4 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY(col1, col3),<br>    <span class="hljs-keyword">UNIQUE</span> KEY(col2)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH( <span class="hljs-keyword">YEAR</span>(col2) )<br>PARTITIONS <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><p>两例中，主键都未包含分区表达式中的列。然而，下面的两例都是有效的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t7 (<br>    col1 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col2 <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col3 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col4 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY(col1, col2)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH(col1 <span class="hljs-operator">+</span> <span class="hljs-keyword">YEAR</span>(col2))<br>PARTITIONS <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t8 (<br>    col1 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col2 <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col3 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    col4 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY(col1, col2, col4),<br>    <span class="hljs-keyword">UNIQUE</span> KEY(col2, col1)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH(col1 <span class="hljs-operator">+</span> <span class="hljs-keyword">YEAR</span>(col2))<br>PARTITIONS <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><p>如果一张表没有唯一索引（该情形包括没有主键），则上述限制不再生效，那么只要列类型兼容分区类型，可以在分区表达式中适用任何列。</p><p>基于同样的道理，不能在分区之后给分区表加唯一索引，除非该索引包含分区表达式中所有的列。思考下面的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_no_pk (c1 <span class="hljs-type">INT</span>, c2 <span class="hljs-type">INT</span>)<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">RANGE</span>(c1) (<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>         <span class="hljs-keyword">PARTITION</span> p0 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">10</span>),<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>         <span class="hljs-keyword">PARTITION</span> p1 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">20</span>),<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>         <span class="hljs-keyword">PARTITION</span> p2 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">30</span>),<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>         <span class="hljs-keyword">PARTITION</span> p3 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">40</span>)<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     );<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.12</span> sec)<br></code></pre></td></tr></table></figure><p>使用下面的ALTER语句给t_no_pk表增加主键是可行的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">#  possible PK<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t_no_pk <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY(c1);<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.13</span> sec)<br>Records: <span class="hljs-number">0</span>  Duplicates: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br><br># <span class="hljs-keyword">drop</span> this PK<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t_no_pk <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.10</span> sec)<br>Records: <span class="hljs-number">0</span>  Duplicates: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br><br>#  use another possible PK<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t_no_pk <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY(c1, c2);<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.12</span> sec)<br>Records: <span class="hljs-number">0</span>  Duplicates: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br><br># <span class="hljs-keyword">drop</span> this PK<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t_no_pk <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.09</span> sec)<br>Records: <span class="hljs-number">0</span>  Duplicates: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>但是，下面这条语句是无效的，因为c1是分区索引的一部分，却不是主键的一部分：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">#  fails <span class="hljs-keyword">with</span> error <span class="hljs-number">1503</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t_no_pk <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY(c2);<br>ERROR <span class="hljs-number">1503</span> (HY000): A <span class="hljs-keyword">PRIMARY</span> KEY must include <span class="hljs-keyword">all</span> columns <span class="hljs-keyword">in</span> the <span class="hljs-keyword">table</span><span class="hljs-string">&#x27;s partitioning function</span><br></code></pre></td></tr></table></figure><p>因为t_no_pk表的分区索引中只含有c1列，因此尝试将c2设置为唯一索引是无效的。但是，你可以设置一个同时使用c1和c2的主键。</p><p>上述规则也适用于你期望使用 ALTER TABLE … PARTITION BY 来分区的当前非分区表。思考如下建表语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> np_pk (<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     added <span class="hljs-type">DATE</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> );<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.08</span> sec)<br></code></pre></td></tr></table></figure><p>下面的ALTER语句是无效的，因为added列不是该表中任何唯一索引的一部分：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> np_pk<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH( TO_DAYS(added) )<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     PARTITIONS <span class="hljs-number">4</span>;<br>ERROR <span class="hljs-number">1503</span> (HY000): A <span class="hljs-keyword">PRIMARY</span> KEY must include <span class="hljs-keyword">all</span> columns <span class="hljs-keyword">in</span> the <span class="hljs-keyword">table</span><span class="hljs-string">&#x27;s partitioning function</span><br></code></pre></td></tr></table></figure><p>但是，使用id列作为分区索引时可行的，如下例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> np_pk<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH(id)<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     PARTITIONS <span class="hljs-number">4</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.11</span> sec)<br>Records: <span class="hljs-number">0</span>  Duplicates: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>在np_pk这个例子中，能被用于分区表达式中的只有id列；若你想在分区表达式中使用任何表中其他列，你必须先修改表，或将待分区的列加入主键，或直接删除主键。</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pptp配置</title>
      <link href="/2014/03/13/2014-pptp%E9%85%8D%E7%BD%AE/"/>
      <url>/2014/03/13/2014-pptp%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.yum -y install ppp pptp<br>2.vim /etc/ppp/chap-secrets<br><span class="hljs-comment"># Secrets for authentication using CHAP</span><br><span class="hljs-comment"># client    server  secret          IP addresses</span><br>vpn帐号   vpnIP vpn密码 *<br><br>3.vim /etc/ppp/peers/phpcurl<br>pty <span class="hljs-string">&#x27;pptp vpnIP --nolaunchpppd&#x27;</span><br>name vpn帐号<br>remotename vpnIP<br>require-mppe-128<br>file /etc/ppp/options.pptp<br>ipparam phpcurl<br><br>4.vim /etc/ppp/options.pptp<br><br>lock<br>noauth<br>refuse-pap<br>refuse-eap<br>refuse-chap<br>nobsdcomp<br>nodeflate<br>require-mppe-128<br><br>5.pppd call phpcurl<br>6.route del default dev eth0<br>7.route add default dev ppp0<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Linux命令行生成随机密码的十种方法</title>
      <link href="/2014/03/05/2014-%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AF%86%E7%A0%81%E7%9A%84%E5%8D%81%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2014/03/05/2014-%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AF%86%E7%A0%81%E7%9A%84%E5%8D%81%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Linux操作系统的一大优点是对于同样一件事情，你可以使用高达数百种方法来实现它。例如，你可以通过数十种方法来生成随机密码。本文将介绍生成随机密码的十种方法。 这些方法均收集于Command-Line Fu，并且在我们自己的Linux PC机上测试过。这十种方法的一些在安装了Cygwin的Windows下也是可以运行的，特别是最后一种方法。</p><p>生成一个随机密码</p><p>对于下面的任何一种方法，你可以通过简单的修改来生成特定长度的密码，或者只使用其输出结果的前N位。希望你正在使用一些类似于LastPass的密码管理器，这样你就不用自己记住这些随机生成的密码了。</p><ol><li><p>这种方法使用SHA算法来加密日期，并输出结果的前32个字符：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">date +%s | sha256sum | base64 | head -c <span class="hljs-number">32</span> ; <span class="hljs-keyword">echo</span><br></code></pre></td></tr></table></figure></li><li><p>这种方法使用内嵌的/dev/urandom，并过滤掉那些日常不怎么使用的字符。这里也只输出结果的前32个字符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt; /dev/urandom <span class="hljs-built_in">tr</span> -dc _A-Z-a-z-0-9 | <span class="hljs-built_in">head</span> -c<span class="hljs-variable">$&#123;1:-32&#125;</span>;<span class="hljs-built_in">echo</span>; <br></code></pre></td></tr></table></figure></li><li><p>这种方法使用openssl的随机函数。如果你的系统也许没有安装openssl，你可以尝试其它九种方法或自己安装openssl。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl rand -<span class="hljs-built_in">base64</span> 32 <br></code></pre></td></tr></table></figure></li><li><p>这种方法类似于之前的urandom，但它是反向工作的。Bash的功能是非常强大的！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tr</span> -<span class="hljs-built_in">cd</span> <span class="hljs-string">&#x27;[:alnum:]&#x27;</span> &lt; /dev/urandom | <span class="hljs-built_in">fold</span> -w30 | <span class="hljs-built_in">head</span> -n1 <br></code></pre></td></tr></table></figure></li><li><p>这种方法使用string命令，它从一个文件中输出可打印的字符串：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strings /dev/urandom | grep -o <span class="hljs-string">&#x27;[[:alnum:]]&#x27;</span> | <span class="hljs-built_in">head</span> -n 30 | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\n&#x27;</span>; <span class="hljs-built_in">echo</span> <br></code></pre></td></tr></table></figure></li><li><p>这是使用urandom的一个更简单的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt; /dev/urandom <span class="hljs-built_in">tr</span> -dc _A-Z-a-z-0-9 | <span class="hljs-built_in">head</span> -c6 <br></code></pre></td></tr></table></figure></li><li><p>这种方法使用非常有用的dd命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/urandom bs=1 count=32 2&gt;/dev/null | <span class="hljs-built_in">base64</span> -w 0 | rev | <span class="hljs-built_in">cut</span> -b 2- | rev <br></code></pre></td></tr></table></figure></li><li><p>你甚至可以生成一个只用左手便可以输入的密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;/dev/urandom <span class="hljs-built_in">tr</span> -dc <span class="hljs-string">&#x27;12345!@#$%qwertQWERTasdfgASDFGzxcvbZXCVB&#x27;</span> | <span class="hljs-built_in">head</span> -c8; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> <br></code></pre></td></tr></table></figure></li><li><p>如果每次都使用上述某种方法，那更好的办法是将它保存为函数。如果这样做了，那么在首次运行命令之后，你便可以在任何时间只使用randpw就可以生成随机密码。或许你可以把它保存到你的~/.bashrc文件里面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">randpw</span></span>()&#123; &lt; /dev/urandom <span class="hljs-built_in">tr</span> -dc _A-Z-a-z-0-9 | <span class="hljs-built_in">head</span> -c<span class="hljs-variable">$&#123;1:-16&#125;</span>;<span class="hljs-built_in">echo</span>;&#125; <br></code></pre></td></tr></table></figure></li><li><p>最后这种生成随机密码的方法是最简单的。它同样也可以在安装了Cygwin的Windows下面运行。在Mac OS X下或许也可以运行。我敢肯定会有人抱怨这种方法生成的密码没有其它方法来的随机。但实际上如果你使用它生成的全部字符串作为密码，那这个密码就足够随机了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">date</span> | <span class="hljs-built_in">md5sum</span> <br></code></pre></td></tr></table></figure></li></ol><p>是的，这种方法也极其好记。</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql_faq</title>
      <link href="/2013/12/22/2013-mysql-faq/"/>
      <url>/2013/12/22/2013-mysql-faq/</url>
      
        <content type="html"><![CDATA[<h4 id="int-5-的含义，存储时使用多岁字节？最大能存放的数是多少？"><a href="#int-5-的含义，存储时使用多岁字节？最大能存放的数是多少？" class="headerlink" title="int(5) 的含义，存储时使用多岁字节？最大能存放的数是多少？"></a>int(5) 的含义，存储时使用多岁字节？最大能存放的数是多少？</h4><p>以前，为一直认为int(5)表示最多能存放5个字符长的数字，即99,999能存进去，但是100,000会被截断。又例如当我们有一个字段is_onuse(1)，它有2个值0/1表示禁用/启用，我也一直认为这样定义字段会节省空间。</p><p>但实际上，这些“认为”都是想当然的，都是错误的。在MySQL中数值类型的存储空间是预定义的，例如对于tinyint(1)来说，不论你存储的是0还是1还是100，它都是占用一个字节的空间（当然超过127会被截断）。对于int(5)，同样的，不论99,999还是100,000都是占用4个字节的空间。从这点上看，与字符串的定义varchar(5)是截然不同的两个概念（varchar(5)的确是只能存储5个字符）。详细的官方文档，请点击查看</p><h4 id="mysql-不区分声调-‘e’-‘e’"><a href="#mysql-不区分声调-‘e’-‘e’" class="headerlink" title="mysql 不区分声调 ‘e’ ‘é’"></a>mysql 不区分声调 ‘e’ ‘é’</h4><p>遇到这个问题的通常情况是数据字符涉及到多国语言。大家往往认为在创建数据库或表格时指定charset=utf8，数据库就能识别所有字符，结果实际情况却并非这样</p><p>mysql使用charset指定字符如果存储，却依靠另外一个参数–collation–来指定排序规则。这个collation正是mysql是否区分大小学，是否区分声调字符的关键。每个charset有一个默认collation。utf8的默认collation是utf8_general_ci，ci表示case insensitive，即不区分大小写。通过测试，该collation也不区分’e’ 和’é’，’ü’和’u’。 而实际上绝大多collation都不区分，或者部分区分这些带声调或特殊地区的特殊字符。如果一个数据集必须保证区分这类字符，可以指定charset=utf8 collation=utf8_bin</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> data_state(<br>id <span class="hljs-type">INT</span> UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>country <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_bin <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>state <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_bin <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>url <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>c_time <span class="hljs-type">INT</span> UNSIGNED <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span><br>)ENGINE<span class="hljs-operator">=</span>MYISAM <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> data_city(<br>id <span class="hljs-type">INT</span> UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>state_id <span class="hljs-type">INT</span> UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>city <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_bin <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>url <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>c_time <span class="hljs-type">INT</span> UNSIGNED <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span><br>)ENGINE<span class="hljs-operator">=</span>MYISAM <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><h4 id="查看MySQL当前连接数"><a href="#查看MySQL当前连接数" class="headerlink" title="查看MySQL当前连接数"></a>查看MySQL当前连接数</h4><ol><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">straysh ~]<span class="hljs-variable">$mysqladmin</span> status<br>Uptime: 17863  Threads: 1  Questions: 2932  Slow queries: 0  Opens: 57  Flush tables: 1  Open tables: 50  Queries per second avg: 0.164<br></code></pre></td></tr></table></figure></li><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show status like <span class="hljs-string">&#x27;Conn%&#x27;</span>;<br>+-----------------------------------+-------+<br>| Variable_name                     | Value |<br>+-----------------------------------+-------+<br>| Connection_errors_accept          | 0     |<br>| Connection_errors_internal        | 0     |<br>| Connection_errors_max_connections | 0     |<br>| Connection_errors_peer_address    | 0     |<br>| Connection_errors_select          | 0     |<br>| Connection_errors_tcpwrap         | 0     |<br>| Connections                       | 281   |<br>+-----------------------------------+-------+<br>7 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure></li></ol><h4 id="ERROR-1054-42S22-Unknown-column-‘plugin’-in-‘mysql-user’"><a href="#ERROR-1054-42S22-Unknown-column-‘plugin’-in-‘mysql-user’" class="headerlink" title="ERROR 1054 (42S22): Unknown column ‘plugin’ in ‘mysql.user’"></a>ERROR 1054 (42S22): Unknown column ‘plugin’ in ‘mysql.user’</h4><p>see <a href="http://dba.stackexchange.com/questions/78923/mysql-service-stops-after-trying-to-grant-privileges-to-a-user/78927#78927">MySQL service stops after trying to grant privileges to a user</a></p><p>to be continue. .. …</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux shell用法和技巧</title>
      <link href="/2013/12/21/2013-Linux-shell%E7%94%A8%E6%B3%95%E5%92%8C%E6%8A%80%E5%B7%A7/"/>
      <url>/2013/12/21/2013-Linux-shell%E7%94%A8%E6%B3%95%E5%92%8C%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>检查远程端口是否对bash开放：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> &gt;/dev/tcp/8.8.8.8/53 &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;open&quot;</span><br></code></pre></td></tr></table></figure><p>让进程转入后台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ctrl + z<br></code></pre></td></tr></table></figure><p>将进程转到前台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$&gt;<span class="hljs-built_in">fg</span><br></code></pre></td></tr></table></figure><p>产生随机的十六进制数，其中n是字符数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl rand -hex n<br></code></pre></td></tr></table></figure><p>在当前shell里执行一个文件里的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /home/user/file.name<br></code></pre></td></tr></table></figure><p>截取前5个字符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$&#123;variable:0:5&#125;</span><br></code></pre></td></tr></table></figure><p>SSH debug 模式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -vvv user@ip_address<br></code></pre></td></tr></table></figure><p>SSH with pem key:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh user@ip_address -i key.pem<br></code></pre></td></tr></table></figure><p>用wget抓取完整的网站目录结构，存放到本地目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -r --no-parent --reject <span class="hljs-string">&quot;index.html*&quot;</span> http://hostname/ -P /home/user/dirs<br></code></pre></td></tr></table></figure><p>一次创建多个目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /home/user/&#123;<span class="hljs-built_in">test</span>,test1,test2&#125;<br></code></pre></td></tr></table></figure><p>列出包括子进程的进程树：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps axwef<br></code></pre></td></tr></table></figure><p>创建 war 文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jar -cvf name.war file<br></code></pre></td></tr></table></figure><p>测试硬盘写入速度：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/tmp/output.img bs=8k count=256k; <span class="hljs-built_in">rm</span> -rf /tmp/output.img<br></code></pre></td></tr></table></figure><p>测试硬盘读取速度：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdparm -Tt /dev/sda<br></code></pre></td></tr></table></figure><p>获取文本的md5 hash：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;text&quot;</span> | <span class="hljs-built_in">md5sum</span><br></code></pre></td></tr></table></figure><p>检查xml格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xmllint --noout file.xml<br></code></pre></td></tr></table></figure><p>将tar.gz提取到新目录里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar zxvf package.tar.gz -C new_dir<br></code></pre></td></tr></table></figure><p>使用curl获取HTTP头信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -I http://www.example.com<br></code></pre></td></tr></table></figure><p>修改文件或目录的时间戳(YYMMDDhhmm):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> -t 0712250000 file<br></code></pre></td></tr></table></figure><p>用wget命令执行ftp下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -m ftp://username:password@hostname<br></code></pre></td></tr></table></figure><p>生成随机密码(例子里是16个字符长):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LANG=c &lt; /dev/urandom <span class="hljs-built_in">tr</span> -dc _A-Z-a-z-0-9 | <span class="hljs-built_in">head</span> -c<span class="hljs-variable">$&#123;1:-16&#125;</span>;<span class="hljs-built_in">echo</span>;<br></code></pre></td></tr></table></figure><p>快速备份一个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> some_file_name&#123;,.bkp&#125;<br></code></pre></td></tr></table></figure><p>访问Windows共享目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">smbclient -U <span class="hljs-string">&quot;DOMAIN\user&quot;</span> //dc.domain.com/share/test/dir<br></code></pre></td></tr></table></figure><p>执行历史记录里的命令(这里是第100行):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">!100<br></code></pre></td></tr></table></figure><p>解压:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip package_name.zip -d dir_name<br></code></pre></td></tr></table></figure><p>输入多行文字(CTRL + d 退出):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; test.txt<br></code></pre></td></tr></table></figure><p>创建空文件或清空一个现有文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; test.txt<br></code></pre></td></tr></table></figure><p>与Ubuntu NTP server同步时间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ntpdate ntp.ubuntu.com<br></code></pre></td></tr></table></figure><p>用netstat显示所有tcp4监听端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -lnt4 | awk <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span> | <span class="hljs-built_in">cut</span> -f2 -d: | grep -o <span class="hljs-string">&#x27;[0-9]*&#x27;</span><br></code></pre></td></tr></table></figure><p>qcow2镜像文件转换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-img convert -f qcow2 -O raw precise-server-cloudimg-amd64-disk1.img \<br>                                 precise-server-cloudimg-amd64-disk1.raw<br></code></pre></td></tr></table></figure><p>重复运行文件，显示其输出（缺省是2秒一次）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">watch ps -ef<br></code></pre></td></tr></table></figure><p>所有用户列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">getent passwd<br></code></pre></td></tr></table></figure><p>Mount root in read/write mode:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount -o remount,rw /<br></code></pre></td></tr></table></figure><p>挂载一个目录（这是不能使用链接的情况）:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount --<span class="hljs-built_in">bind</span> /source /destination<br></code></pre></td></tr></table></figure><p>动态更新DNS server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">nsupdate &amp;gt; &amp;gt;EOF<br>update add <span class="hljs-variable">$HOST</span> 86400 A <span class="hljs-variable">$IP</span><br>send<br>EOF<br></code></pre></td></tr></table></figure><p>递归grep所有目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -r <span class="hljs-string">&quot;some_text&quot;</span> /path/to/dir<br></code></pre></td></tr></table></figure><p>列出前10个最大的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsof / | awk <span class="hljs-string">&#x27;&#123; if($7 &gt; 1048576) print $7/1048576 &quot;MB &quot;$9 &#125;&#x27;</span> | <span class="hljs-built_in">sort</span> -n -u | <span class="hljs-built_in">tail</span><br></code></pre></td></tr></table></figure><p>显示剩余内存(MB):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">free -m | grep cache | awk <span class="hljs-string">&#x27;/[0-9]/&#123; print $4&quot; MB&quot; &#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>打开Vim并跳到文件末：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim + some_file_name<br></code></pre></td></tr></table></figure><p>Git 克隆指定分支(master):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:name/app.git -b master<br></code></pre></td></tr></table></figure><p>Git 切换到其它分支(develop):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout develop<br></code></pre></td></tr></table></figure><p>Git 删除分支(myfeature):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -d myfeature<br></code></pre></td></tr></table></figure><p>Git 删除远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin :branchName<br></code></pre></td></tr></table></figure><p>Git 将新分支推送到远程服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin mynewfeature<br></code></pre></td></tr></table></figure><p>打印历史记录中最后一次cat命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">!<span class="hljs-built_in">cat</span>:p<br></code></pre></td></tr></table></figure><p>运行历史记录里最后一次cat命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">!<span class="hljs-built_in">cat</span><br></code></pre></td></tr></table></figure><p>找出/home/user下所有空子目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find /home/user -maxdepth 1 -<span class="hljs-built_in">type</span> d -empty<br></code></pre></td></tr></table></figure><p>获取test.txt文件中第50-60行内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt; test.txt sed -n <span class="hljs-string">&#x27;50,60p&#x27;</span><br></code></pre></td></tr></table></figure><p>运行最后一个命令(如果最后一个命令是mkdir /root/test, 下面将会运行: sudo mkdir /root/test)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo !!<br></code></pre></td></tr></table></figure><p>创建临时RAM文件系统 – ramdisk (先创建/tmpram目录):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount -t tmpfs tmpfs /tmpram -o size=512m<br></code></pre></td></tr></table></figure><p>Grep whole words:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -w <span class="hljs-string">&quot;name&quot;</span> test.txt<br></code></pre></td></tr></table></figure><p>在需要提升权限的情况下往一个文件里追加文本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;some text&quot;</span> | sudo <span class="hljs-built_in">tee</span> -a /path/file<br></code></pre></td></tr></table></figure><p>列出所有kill signal参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -l<br></code></pre></td></tr></table></figure><p>在bash历史记录里禁止记录最后一次会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -9 $$<br></code></pre></td></tr></table></figure><p>扫描网络寻找开放的端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -p 8081 172.20.0.0/16<br></code></pre></td></tr></table></figure><p>设置git email:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;me@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>To sync with master if you have unpublished commits:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull --rebase origin master<br></code></pre></td></tr></table></figure><p>将所有文件名中含有”txt”的文件移入/home/user目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find -iname <span class="hljs-string">&quot;*txt*&quot;</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">mv</span> -v &#123;&#125; /home/user \;<br></code></pre></td></tr></table></figure><p>将文件按行并列显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">paste</span> test.txt test1.txt<br></code></pre></td></tr></table></figure><p>shell里的进度条:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pv data.log<br></code></pre></td></tr></table></figure><p>使用netcat将数据发送到Graphite server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hosts.sampleHost 10 `date +%s`&quot;</span> | nc 192.168.200.2 3000<br></code></pre></td></tr></table></figure><p>将tabs转换成空格：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">expand</span> test.txt &gt; test1.txt<br></code></pre></td></tr></table></figure><p>Skip bash history:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt; space &gt;cmd<br></code></pre></td></tr></table></figure><p>去之前的工作目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> -<br></code></pre></td></tr></table></figure><p>拆分大体积的tar.gz文件(每个100MB)，然后合并回去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">split</span> –b 100m /path/to/large/archive /path/to/output/files<br><span class="hljs-built_in">cat</span> files* &gt; archive<br></code></pre></td></tr></table></figure><p>使用curl获取HTTP status code:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sL -w <span class="hljs-string">&quot;%&#123;http_code&#125;\\n&quot;</span> www.example.com -o /dev/null<br></code></pre></td></tr></table></figure><p>设置root密码，强化MySQL安全安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/mysql_secure_installation<br></code></pre></td></tr></table></figure><p>当Ctrl + c不好使时:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ctrl + \<br></code></pre></td></tr></table></figure><p>获取文件owner:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">stat</span> -c %U file.txt<br></code></pre></td></tr></table></figure><p>block设备列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk -f<br></code></pre></td></tr></table></figure><p>找出文件名结尾有空格的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">exec</span> egrep -l <span class="hljs-string">&quot; +$&quot;</span> &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>找出文件名有tab缩进符的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">exec</span> egrep -l $<span class="hljs-string">&#x27;\t&#x27;</span> &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>用”=”打印出横线:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%100s\n&#x27;</span> | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27; &#x27;</span> =<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 不区分声调 &#39;e&#39; &#39;é&#39;</title>
      <link href="/2013/12/17/2013-mysql-%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A3%B0%E8%B0%83-e-e/"/>
      <url>/2013/12/17/2013-mysql-%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A3%B0%E8%B0%83-e-e/</url>
      
        <content type="html"><![CDATA[<p>遇到这个问题的通常情况是数据字符涉及到多国语言。大家往往认为在创建数据库或表格时指定charset=utf8，数据库就能识别所有字符，结果实际情况却并非这样</p><p>mysql使用charset指定字符如果存储，却依靠另外一个参数--collation--来指定排序规则。这个collation正是mysql是否区分大小学，是否区分声调字符的关键。每个charset有一个默认collation。utf8的默认collation是utf8_general_ci，ci表示case insensitive，即不区分大小写。通过测试，该collation也不区分'e' 和'é'，'ü'和'u'。 而实际上绝大多collation都不区分，或者部分区分这些带声调或特殊地区的特殊字符。如果一个数据集必须保证区分这类字符，可以指定charset=utf8 collation=utf8_bin</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql导出select结果到文件</title>
      <link href="/2013/12/16/2013-mysql%E5%AF%BC%E5%87%BAselect%E7%BB%93%E6%9E%9C%E5%88%B0%E6%96%87%E4%BB%B6/"/>
      <url>/2013/12/16/2013-mysql%E5%AF%BC%E5%87%BAselect%E7%BB%93%E6%9E%9C%E5%88%B0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>h&#123;ip&#125; <span class="hljs-operator">-</span>u&#123;account&#125; <span class="hljs-operator">-</span>p <span class="hljs-operator">-</span>e &quot;query statement&quot; db <span class="hljs-operator">&gt;</span> file <br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p <span class="hljs-operator">-</span>e &quot;select * from a&quot; test <span class="hljs-operator">&gt;</span> <span class="hljs-number">1.</span>txt<br></code></pre></td></tr></table></figure><p>这样会输出列名信息，如果不想输出列名信息： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p <span class="hljs-operator">-</span>Ne &quot;select * from a&quot; test <span class="hljs-operator">&gt;</span> <span class="hljs-number">1.</span>txt <br>或<br>root<span class="hljs-operator">&gt;</span>mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p test <br><span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;1.txt&#x27;</span>; <br></code></pre></td></tr></table></figure><p>两种方法效果一样的<br>第二种方式的mysql文档：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> [<span class="hljs-keyword">select</span> options go here] <span class="hljs-keyword">INTO</span> &#123;OUTFILE <span class="hljs-operator">|</span> DUMPFILE&#125; filename <br>EXPORT_OPTIONS <br><span class="hljs-keyword">FROM</span> table_references [additional <span class="hljs-keyword">select</span> options go here] <br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p <br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a <span class="hljs-keyword">into</span> outfile &quot;1.txt&quot; fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\t&#x27;</span> lines terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\r\n&#x27;</span> <br></code></pre></td></tr></table></figure><p>第一种方法和第二种方法的结合：使用 mysql -e执行导出到文件的sql语句 </p><p><code>mysql -hxx -uxx -pxx -e &quot;query statement&quot; db</code></p><p>例如:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p <span class="hljs-operator">-</span>e&quot;select * from a into outfile &#x27;1.txt&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\r\n&#x27;&quot; test<br></code></pre></td></tr></table></figure><p>如果不想输出列名信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p <span class="hljs-operator">-</span>Ne&quot;select * from a into outfile &#x27;1.txt&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\r\n&#x27;&quot; test<br></code></pre></td></tr></table></figure><p>默认情况下， mysql -e导出的文件，列是用”\t”分隔，行是用”\r\n”分隔(windows)，行是用”\n”分隔(unix)</p><p>追加一种方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> col002,col005,col004,col008 <br>    <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;e:/mysql/i0812.txt&#x27;</span> fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;|&#x27;</span> lines terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\r\n&#x27;</span> <br><span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> col003 <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> col001 <span class="hljs-keyword">from</span> qdbm) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> col005;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表单按回车就自动提交的问题</title>
      <link href="/2013/12/13/2013-%E8%A1%A8%E5%8D%95%E6%8C%89%E5%9B%9E%E8%BD%A6%E5%B0%B1%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2013/12/13/2013-%E8%A1%A8%E5%8D%95%E6%8C%89%E5%9B%9E%E8%BD%A6%E5%B0%B1%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="当form表单中只有一个-lt-input-type-quot-text-quot-name-quot-name-quot-gt-时按回车键将会自动将表单提交。"><a href="#当form表单中只有一个-lt-input-type-quot-text-quot-name-quot-name-quot-gt-时按回车键将会自动将表单提交。" class="headerlink" title="当form表单中只有一个&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;时按回车键将会自动将表单提交。"></a>当form表单中只有一个<code>&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;</code>时按回车键将会自动将表单提交。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;post.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再添加一个 <code>&lt;input type=&quot;text&quot; /&gt;</code></p><p>按下回车将不会自动提交，但是页面上显示一个不知所云的输入框挺别扭，后从网上搜到两个解决办法：</p><h2 id="1-添加一个-lt-input-style-quot-display-none-quot-type-quot-text-quot-gt"><a href="#1-添加一个-lt-input-style-quot-display-none-quot-type-quot-text-quot-gt" class="headerlink" title="1) 添加一个 &lt;input style=&quot;display: none;&quot; type=&quot;text&quot; /&gt;"></a>1) 添加一个 <code>&lt;input style=&quot;display: none;&quot; type=&quot;text&quot; /&gt;</code></h2><p>不显示输入框，然后回车之后也不会提交：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;post.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span> /&gt;</span>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-添加一个onkeydown事件，然后回车之后也不会显示："><a href="#2-添加一个onkeydown事件，然后回车之后也不会显示：" class="headerlink" title="2) 添加一个onkeydown事件，然后回车之后也不会显示："></a>2) 添加一个onkeydown事件，然后回车之后也不会显示：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;post.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">onkeydown</span>=<span class="hljs-string">&quot;if(event.keyCode==13) return false;&quot;</span>/&gt;</span>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果想添加回车事件可以在onkeydown事件中添加判断提交表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;post.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span> /&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">onkeydown</span>=<span class="hljs-string">&quot;if(event.keyCode==13)&#123;gosubmit();&#125;&quot;</span> /&gt;</span>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们有时候希望回车键敲在文本框（input element）里来提交表单（form），但有时候又不希望如此。比如搜索行为，希望输入完关键词之后直接按回车键立即提交表单，而有些复杂表单，可能要避免回车键误操作在未完成表单填写的时候就触发了表单提交。</p><p>要控制这些行为，不需要借助JS，浏览器已经帮我们做了这些处理，这里总结几条规则：</p><p>如果表单里有一个type="submit"的按钮，回车键生效。</p><p>如果表单里只有一个type="text"的input，不管按钮是什么type，回车键生效。</p><p>如果按钮不是用input，而是用button，并且没有加type，IE下默认为type=button，FX默认为type=submit。</p><p>其他表单元素如textarea、select不影响，radio checkbox不影响触发规则，但本身在FX下会响应回车键，在IE下不响应。</p><p>type="image"的input，效果等同于type="submit"，不知道为什么会设计这样一种type，不推荐使用，应该用CSS添加背景图合适些。</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Configuring MySQL To Use UTF-8</title>
      <link href="/2013/12/10/2013-Configuring-MySQL-To-Use-UTF-8/"/>
      <url>/2013/12/10/2013-Configuring-MySQL-To-Use-UTF-8/</url>
      
        <content type="html"><![CDATA[<p>A project I’m working on at the moment is going to have multiple language options available, not all of which use the same alphabet (e.g. Russian and Chinese).</p><p>To lessen the pain commonly associated with internationalisation on the web, it’s beneficial to use the UTF-8 character set. This short summary from the Unicode Consortium may help explain better;</p><p>Unicode provides a unique number for every character, no matter what the platform, no matter what the program, no matter what the language. … Unicode enables a single software product or a single website to be targeted across multiple platforms, languages and countries without re-engineering. It allows data to be transported through many different systems without corruption</p><p>Thankfully MySQL has supported Unicode for quite some time now, even if it’s not configured to use it by default.</p><p>First, let’s check what our settings are at the moment;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;collation%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+-------------------+</span><br><span class="hljs-operator">|</span> Variable_name        <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>             <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+-------------------+</span><br><span class="hljs-operator">|</span> collation_connection <span class="hljs-operator">|</span> latin1_swedish_ci <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> collation_database   <span class="hljs-operator">|</span> latin1_swedish_ci <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> collation_server     <span class="hljs-operator">|</span> latin1_swedish_ci <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+-------------------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;character_set%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+----------------------------+</span><br><span class="hljs-operator">|</span> Variable_name            <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>                      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+----------------------------+</span><br><span class="hljs-operator">|</span> character_set_client     <span class="hljs-operator">|</span> latin1                     <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_set_connection <span class="hljs-operator">|</span> latin1                     <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_set_database   <span class="hljs-operator">|</span> latin1                     <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_set_filesystem <span class="hljs-operator">|</span> <span class="hljs-type">binary</span>                     <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_set_results    <span class="hljs-operator">|</span> latin1                     <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_set_server     <span class="hljs-operator">|</span> latin1                     <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_set_system     <span class="hljs-operator">|</span> utf8                       <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_sets_dir       <span class="hljs-operator">|</span> <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>share<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>charsets<span class="hljs-operator">/</span> <span class="hljs-operator">|</span> <br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+----------------------------+</span><br><span class="hljs-number">8</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure>That’s to be expected, but it’s not really what we wanted.<p>Find your MySQL configuration file (on most Linux/BSD systems it’s /etc/my.cnf) and make sure it’s got the following statements under the relevant headers.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">[mysqld]<br><span class="hljs-keyword">default</span><span class="hljs-operator">-</span><span class="hljs-type">character</span><span class="hljs-operator">-</span><span class="hljs-keyword">set</span><span class="hljs-operator">=</span>utf8<br><span class="hljs-keyword">default</span><span class="hljs-operator">-</span><span class="hljs-keyword">collation</span><span class="hljs-operator">=</span>utf8_general_ci<br><span class="hljs-type">character</span><span class="hljs-operator">-</span><span class="hljs-keyword">set</span><span class="hljs-operator">-</span>server<span class="hljs-operator">=</span>utf8<br><span class="hljs-keyword">collation</span><span class="hljs-operator">-</span>server<span class="hljs-operator">=</span>utf8_general_ci<br>init<span class="hljs-operator">-</span><span class="hljs-keyword">connect</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;SET NAMES utf8&#x27;</span><br><br>[client]<br><span class="hljs-keyword">default</span><span class="hljs-operator">-</span><span class="hljs-type">character</span><span class="hljs-operator">-</span><span class="hljs-keyword">set</span><span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure>Restart MySQL and make sure it’s working;<p>service mysql restart</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;collation%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+-----------------+</span><br><span class="hljs-operator">|</span> Variable_name        <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+-----------------+</span><br><span class="hljs-operator">|</span> collation_connection <span class="hljs-operator">|</span> utf8_general_ci <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> collation_database   <span class="hljs-operator">|</span> utf8_general_ci <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> collation_server     <span class="hljs-operator">|</span> utf8_general_ci <span class="hljs-operator">|</span> <br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------+-----------------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;character_set%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+----------------------------+</span><br><span class="hljs-operator">|</span> Variable_name            <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>                      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+----------------------------+</span><br><span class="hljs-operator">|</span> character_set_client     <span class="hljs-operator">|</span> utf8                       <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_set_connection <span class="hljs-operator">|</span> utf8                       <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_set_database   <span class="hljs-operator">|</span> utf8                       <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_set_filesystem <span class="hljs-operator">|</span> <span class="hljs-type">binary</span>                     <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_set_results    <span class="hljs-operator">|</span> utf8                       <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_set_server     <span class="hljs-operator">|</span> utf8                       <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_set_system     <span class="hljs-operator">|</span> utf8                       <span class="hljs-operator">|</span> <br><span class="hljs-operator">|</span> character_sets_dir       <span class="hljs-operator">|</span> <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>share<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>charsets<span class="hljs-operator">/</span> <span class="hljs-operator">|</span> <br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------------+----------------------------+</span><br><span class="hljs-number">8</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>Update: Demonstrating setting the charset and collation when creating tables, as suggested by Mo:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `content` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> auto_increment,<br>  `<span class="hljs-keyword">language</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY  (`id`)<br>) ENGINE<span class="hljs-operator">=</span>MyISAM <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>favorite_CPanel|服务器文件及目录</title>
      <link href="/2013/12/10/2013-favorite-CPanel-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%AE%E5%BD%95/"/>
      <url>/2013/12/10/2013-favorite-CPanel-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h4>Apache</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs config">/usr/local/apache<br>+ bin- apache binaries are stored here – httpd, apachectl, apxs<br>+ conf – configuration files – httpd.conf<br>+ cgi-bin<br>+ domlogs – domain log files are stored here<br>+ htdocs<br>+ include – header files<br>+ libexec – shared object (.so) files are stored here – libphp4.so,mod_rewrite.so<br>+ logs – apache logs – access_log, error_log, suexec_log<br>+ man – apache manual pages<br>+ proxy -<br>+ icons -<br></code></pre></td></tr></table></figure><h4>CPanel</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs config">/usr/local/cpanel<br>+ 3rdparty/ – tools like fantastico, mailman files are located here<br>+ addons/ – AdvancedGuestBook, phpBB etc<br>+ base/ – phpmyadmin, squirrelmail, skins, webmail etc<br>+ bin/ – cpanel binaries<br>+ cgi-sys/ – cgi files like cgiemail, formmail.cgi, formmail.pl etc<br>+ logs/ – cpanel access log and error log<br>+ whostmgr/ – whm related files<br></code></pre></td></tr></table></figure><h4>WHM</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs config">/var/cpanel – whm files<br>+ bandwidth/ – rrd files of domains<br>+ username.accts – reseller accounts are listed in this files<br>+ packages – hosting packages are listed here<br>+ root.accts – root owned domains are listed here<br>+ suspended – suspended accounts are listed here<br>+ users/ – cpanel user file – theme, bwlimit, addon, parked, sub-domains all are listed in this files<br>+ zonetemplates/ – dns zone template files are taken from here<br></code></pre></td></tr></table></figure><h4>Important CPanel/WHM files</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs config">/etc/domainips  独立ip  如果共享ip被当成了独立ip删除这里的就可以了<br>/etc/httpd/conf/httpd.conf – apache configuration file<br>/etc/exim.conf – mail server configuration file<br>/etc/named.conf – name server (named) configuration file<br>/etc/proftpd.conf – proftpd server configuration file<br>/etc/pure-ftpd.conf – pure-ftpd server configuration file<br>/etc/valiases/domainname – catchall and forwarders are set here<br>/etc/vfilters/domainname – email filters are set here<br>/etc/userdomains – all domains are listed here – addons, parked,subdomains along with their usernames<br>/etc/localdomains – exim related file – all domains should be listed here to be able to send mails<br>/var/cpanel/users/username – cpanel user file<br>/var/cpanel/cpanel.config – cpanel configuration file ( Tweak Settings )<br>/etc/cpbackup-userskip.conf -<br>/etc/sysconfig/network – Networking Setup<br>/etc/hosts -<br>/var/spool/exim -<br>/var/spool/cron -<br>/etc/resolv.conf – Networking Setup Resolver Configuration<br>/etc/nameserverips – Networking Setup Nameserver IPs ( For resellers to give their nameservers )<br>/var/cpanel/resellers – For addpkg, etc permissions for resellers.<br>/etc/chkserv.d – Main &gt;&gt; Service Configuration &gt;&gt; Service Manager<br>/var/run/chkservd – Main &gt;&gt; Server Status &gt;&gt; Service Status<br>/var/log/dcpumon – top log process<br>/root/cpanel3-skel – skel directory. Eg: public_ftp, public_html.<br>/etc/wwwacct.conf – account creation defaults file in WHM (Basic cPanel/WHMSetup)<br>/etc/cpupdate.conf – Update Config<br>/etc/cpbackup.conf – Configure Backup<br>/etc/clamav.conf – clamav (antivirus configuration file )<br>/etc/my.cnf – mysql configuration file<br>/usr/local/Zend/etc/php.ini OR /usr/local/lib/php.ini – php configuration file<br>/etc/ips – ip addresses on the server (except the shared ip)<br>/etc/ipaddrpool – ip addresses which are free<br>/etc/ips.dnsmaster – name server ips<br>/var/cpanel/Counters – To get the counter of each users.<br>/var/cpanel/bandwidth – To get bandwith usage of domains<br></code></pre></td></tr></table></figure><h4>PHP</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs config">Program :/usr/local/bin/php, /usr/bin/php<br>ini file: /usr/local/lib/php.ini – apache must be restarted after any change to this file<br></code></pre></td></tr></table></figure><h4>Exim</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs config">Conf : /etc/exim.conf – exim main configuration file<br>/etc/localdomains – list of domains allowed to relay mail<br>Log : /var/log/exim_mainlog – incoming/outgoing mails are logged here<br>/var/log/exim_rejectlog – exim rejected mails are reported here<br>/var/log/exim_paniclog – exim errors are logged here<br>Mail queue: /var/spool/exim/input<br>Cpanel script to restart exim – /scripts/restartsrv_exim<br>Email forwarders and catchall address file – /etc/valiases/domainname.com<br>Email filters file – /etc/vfilters/domainname.com<br>POP user authentication file – /home/username/etc/domainname/passwd<br>catchall inbox – /home/username/mail/inbox<br>POP user inbox – /home/username/mail/domainname/popusername/inbox<br>POP user spambox – /home/username/mail/domainname/popusername/spam<br>Program : /usr/sbin/exim (suid – -rwsr-xr-x 1 root root )<br>Init Script: /etc/rc.d/init.d/exim<br></code></pre></td></tr></table></figure><h4>MySQL</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs config">Program : /usr/bin/mysql<br>Init Script : /etc/rc.d/init.d/mysql<br>Conf : /etc/my.cnf, /root/.my.cnf<br>Data directory – /var/lib/mysql – Where all databases are stored.<br>Database naming convention – username_dbname (eg: john_sales)<br>Permissions on databases – drwx 2 mysql mysql<br>Socket file – /var/lib/mysql/mysql.sock, /tmp/ mysql.sock<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HOWTO: prevent &#39;stdin: is not a tty&#39; errors when using ssh</title>
      <link href="/2013/12/10/2013-HOWTO-prevent-stdin-is-not-a-tty-errors-when-using-ssh/"/>
      <url>/2013/12/10/2013-HOWTO-prevent-stdin-is-not-a-tty-errors-when-using-ssh/</url>
      
        <content type="html"><![CDATA[<p>link:<a href="http://www.vpshostingforum.com/howto-prevent-stdin-not-tty-errors-when-using-ssh-t4152.html">http://www.vpshostingforum.com/howto-prevent-stdin-not-tty-errors-when-using-ssh-t4152.html</a></p><p>When you are connecting to a remote server using ssh (for rsync, or other remote functions), and are receiving 'stdin: is not a tty' error messages in your log files, it is most likely because your remote shell is trying to execute something which needs to run interactively, when you are not in an interactive mode.</p><p>I was experiencing this problem myself, while re-creating my rsync backup system on my new local server, and after looking all over the place for info - I finally found a solution.</p><p>Of course, the rsync was still working properly, but having it generate errors was keeping me from sleeping</p><p>Simply add the following line to the top of your .bashrc file (in the home dir of your user account):</p><p>Code:</p><pre class="brush:bash">[ -z "$PS1" ] && return</pre><p>This will cause bash to check and see if it is running interactively or not, and if it is not, it will halt processing of the configuration file, preventing the rest of the file from executing code which could possibly generate this error when in non-interactive mode.</p><p>This must be done for each of your user accounts, but if you also make the change in /etc/skel/.bashrc, the 'fixed' version will be used for all new accounts in the future.</p><p>Note: This is the first time I have done anything with bash configuration files, so feel free to let me know if this method will cause any bad results </p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>检测上传的文件类型</title>
      <link href="/2013/10/30/2013-%E6%A3%80%E6%B5%8B%E4%B8%8A%E4%BC%A0%E7%9A%84%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/"/>
      <url>/2013/10/30/2013-%E6%A3%80%E6%B5%8B%E4%B8%8A%E4%BC%A0%E7%9A%84%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>在$_FILES数组中，type字段中的图片类型不能作为检测的途径。应为这个值是浏览器通过HTTP头发送过来的，是可以伪造的。例如：</p><p>首先在test.php中写入<?php phpinfo();?>，然后修改文件名为test.jpg，并通过表单添加该文件。<br>服务端接收的数据如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">array</span> (<br>    <span class="hljs-string">&#x27;pic&#x27;</span> =&gt; <span class="hljs-keyword">array</span> (<br>        <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;test.jpg&#x27;</span>,<br>        <span class="hljs-string">&#x27;type&#x27;</span> =&gt; <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,<br>        <span class="hljs-string">&#x27;tmp_name&#x27;</span> =&gt; <span class="hljs-string">&#x27;/tmp/phpogAh98&#x27;</span>,<br>        <span class="hljs-string">&#x27;error&#x27;</span> =&gt; <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;size&#x27;</span> =&gt; <span class="hljs-number">0</span>,<br>    ),<br>)<br></code></pre></td></tr></table></figure><p>网络上也有一些通过读取文件前2字节，来判断文件类型的代码。但这些方法既不严谨也不够安全。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_type</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;rb&quot;</span>);  <br>    <span class="hljs-variable">$bin</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节  </span><br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);  <br>    <span class="hljs-variable">$strInfo</span> = @<span class="hljs-title function_ invoke__">unpack</span>(<span class="hljs-string">&quot;C2chars&quot;</span>, <span class="hljs-variable">$bin</span>);  <br>    <span class="hljs-variable">$typeCode</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>].<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);  <br>    <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;&#x27;</span>;  <br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$typeCode</span>)  <br>    &#123;  <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7790</span>: <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;exe&#x27;</span>;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7784</span>: <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;midi&#x27;</span>;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8297</span>: <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;rar&#x27;</span>;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8075</span>: <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;zip&#x27;</span>;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">255216</span>: <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;jpg&#x27;</span>;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7173</span>: <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;gif&#x27;</span>;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6677</span>: <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;bmp&#x27;</span>;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">13780</span>: <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;png&#x27;</span>;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>: <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;unknown: &#x27;</span>.<span class="hljs-variable">$typeCode</span>;<br>    &#125;  <br>    <span class="hljs-comment">//Fix  </span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>]==<span class="hljs-string">&#x27;-1&#x27;</span> AND <span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]==<span class="hljs-string">&#x27;-40&#x27;</span> ) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;jpg&#x27;</span>;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>]==<span class="hljs-string">&#x27;-119&#x27;</span> AND <span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]==<span class="hljs-string">&#x27;80&#x27;</span> ) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;png&#x27;</span>;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$fileType</span>;  <br>&#125; <br></code></pre></td></tr></table></figure><p>其实，在php中就有检测图片类型的方法。<a href="http://us1.php.net/manual/zh/function.getimagesize.php">getimagesize</a>。这个函数不需要GD等画图库的支持。打开文件失败或者不是有效的图片时返回false。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">array</span> (<br>    <span class="hljs-number">0</span> =&gt; <span class="hljs-number">460</span>,<br>    <span class="hljs-number">1</span> =&gt; <span class="hljs-number">406</span>,<br>    <span class="hljs-number">2</span> =&gt; <span class="hljs-number">2</span>,<br>    <span class="hljs-number">3</span> =&gt; <span class="hljs-string">&#x27;width=&quot;460&quot; height=&quot;406&quot;&#x27;</span>,<br>    <span class="hljs-string">&#x27;bits&#x27;</span> =&gt; <span class="hljs-number">8</span>,<br>    <span class="hljs-string">&#x27;channels&#x27;</span> =&gt; <span class="hljs-number">3</span>,<br>    <span class="hljs-string">&#x27;mime&#x27;</span> =&gt; <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,<br>)<br></code></pre></td></tr></table></figure><p>正确的放回值中mime亦可用作进一步过滤图片类型。另外需要注意，当被检测的文件为空时，会产生警告：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">Notice: <span class="hljs-title function_ invoke__">getimagesize</span>(): Read error! in /fileupload/sample5/file_type_detect.php on line <span class="hljs-number">2</span><br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>可以使用filezie()函数先过滤掉空的文件。或者使用@getimagesize()抑制错误输出。</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结合HTML5的纯js图片上传</title>
      <link href="/2013/10/20/2013-%E7%BB%93%E5%90%88HTML5%E7%9A%84%E7%BA%AFjs%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
      <url>/2013/10/20/2013-%E7%BB%93%E5%90%88HTML5%E7%9A%84%E7%BA%AFjs%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>首次发长文，文辞简陋加之能力有限，若有错漏，望不吝赐教。</p><p>本文探讨的是图片（文件）上传的前端技术，涉及到html5（FileRader API）、js（常规DOM操作）以及ajax（模拟表单提交multipart/form-data数据）。后端使用的php语言，为简便，这里仅仅接收了ajax提交的数据。</p><p>首先让我们来回顾一下传统的使用表单上传文件的技术。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- The data encoding type, enctype, MUST be specified as below --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;__URL__&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MAX_FILE_SIZE must precede the file input field --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MAX_FILE_SIZE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30000&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- Name of input element determines name in $_FILES array --&gt;</span><br>    Send this file: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userfile&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Send File&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>传统表单上传的要点是：必须使用method=”POST”；必须指定enctype=”multipart/form-data”；包含&lt;input type=”file” /&gt;表单元素。文件上传必须使用POST，这个不必多说，若有疑问请自行google或者点击<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">RFC2616</a>。enctype指定了http协议头中的contentType值，它的缺省值为application/x-www-form-urlencoded，而multipart/form-data则是上传文件专用的编码方式，它指定了requestBody中的数据拼接和拆解的格式。关于协议的具体内容，请点击<a href="http://www.ietf.org/rfc/rfc2388.txt">multipart/form-data</a>。<a href="http://www.w3.org/TR/html401/interact/forms.html#adef-enctype">更多表单细节请点击</a></p><p>后端接收文件使用$_FILES即可。</p><p>在上传多个文件时，就需要动态的添加&lt;input type=”file” /&gt;，而取消某个文件时又要删除对应的表单元素。不论现实它是否复杂，传统的表单上传都有一个缺点：一次只能添加一个文件。如果要上传20个文件，就要至少点击20次，如果更多呢，例如100，想想就崩溃了。</p><p>在HTML5出现之前，就已经有大量的插件能够解决这个问题。例如我之前一直使用的swfupload。<a href="http://app.ifilmplus.com/m_attention/">在线demo</a>,点击标签微博发布器-&gt;定时微博。如果你能找到这个文件/app/m_attention/modules/clocksend/common/js/main.js，重点看看L16~L48以及L269，这是插件的调用方式。</p><p>上面说的这些插件都用到了flash或者其它技术来实现多文件选取，无法定制。好消息是，在HTML5中提供了一些API，使得单纯的使用JavaScript就可以访问选取的文件，不仅可以获得文件的文件名，物理路径，还能直接读取文件的内容。关于FileReader<a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader">请点击</a>。请复制下面的代码体验FileReader：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;post&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userfile&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;upfile&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;handleFiles(this.files)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;upload&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;imgcont&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFiles</span>(<span class="hljs-params">files</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (files.<span class="hljs-property">length</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> file = files[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/text\/\w+/</span>.<span class="hljs-title function_">test</span>(file.<span class="hljs-property">type</span>)) &#123;</span><br><span class="language-javascript">            reader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> + <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&#x27;#imgcont&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            reader.<span class="hljs-title function_">readAsText</span>(file);</span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/image\/\w+/</span>.<span class="hljs-title function_">test</span>(file.<span class="hljs-property">type</span>))&#123;</span><br><span class="language-javascript">            reader.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    $(<span class="hljs-string">&quot;&lt;img src=&#x27;&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span>+<span class="hljs-string">&quot;&#x27; /&gt;&quot;</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&#x27;#imgcont&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            reader.<span class="hljs-title function_">readAsDataURL</span>(file);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请注意上面代码中的第22行，这是一个技巧。传统的图片显示需要指定src为一个网络路径或者相对路径，而现代浏览器都支持一种新的方式，<a href="http://tools.ietf.org/html/rfc2397">“data” url</a>。它以消耗客户端性能为代价，将图片的base64编码替换成src的值，省去了一次对图片地址的http请求。然后，在我们的例子中，它实现了 <strong>图片预览</strong> 的功能。</p><p>####Ajax上传文件<br>现在，我们已经使用JavaScript获取了待上传的文件，只需要点击Submit按钮，图片就会发送到服务器。接下来，我们来尝试使用ajax来上传文件。</p><p>在讲解技术之前，我先来科普几个Tips。</p><ul><li><code>&lt;input type=&quot;file&quot; /&gt;</code> 的value值是只读的，无法修改，使用JavaScript修改该值会被告知一个SecurityError: The operation is insecure.的错误。</li><li>前面我们已经提过，文件上传的时候需要指定http协议头的contentType=’multipart/form-data’，因此简单的向服务器post数据，服务器是无法正常接收图片的。即便使用jQuery，在(.ajax()中使用)(‘form’).serialize()方法直接提交整个表单，也是无效的，即使同时指定ContentType:’multipart/form-data’同样无效。当然，你可以将图片的二进制数据（使用FileReader.readAsBinaryString()）post到服务器，当作普通的变量来接收，再将二进制数据写入到文件中来生成图片，但是这样做就不是上传图片了。 </li></ul><p>这里插入一段个人提示。网络上有一篇文章《基于HTML5的可预览多图片Ajax上传》。我摘录了这边文章中的核心代码，然后我要指出这些技术中的不可取之处以及为何下面的代码是不建议使用的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//文件上传</span><br><span class="hljs-attr">funUploadFile</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span>;    <br>    <span class="hljs-keyword">if</span> (location.<span class="hljs-property">host</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;sitepointstatic&quot;</span>) &amp;gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//非站点服务器上运行</span><br>        <span class="hljs-keyword">return</span>;    <br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, file; file = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileFilter</span>[i]; i++) &#123;<br>        (<span class="hljs-keyword">function</span>(<span class="hljs-params">file</span>) &#123;<br>            <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>            <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">upload</span>) &#123;<br>                <span class="hljs-comment">// 上传中</span><br>                xhr.<span class="hljs-property">upload</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;progress&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>                    self.<span class="hljs-title function_">onProgress</span>(file, e.<span class="hljs-property">loaded</span>, e.<span class="hljs-property">total</span>);<br>                &#125;, <span class="hljs-literal">false</span>);<br>                <span class="hljs-comment">// 文件上传成功或是失败</span><br>                xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;<br>                            self.<span class="hljs-title function_">onSuccess</span>(file, xhr.<span class="hljs-property">responseText</span>);<br>                            self.<span class="hljs-title function_">funDeleteFile</span>(file);<br>                            <span class="hljs-keyword">if</span> (!self.<span class="hljs-property">fileFilter</span>.<span class="hljs-property">length</span>) &#123;<br>                                <span class="hljs-comment">//全部完毕</span><br>                                self.<span class="hljs-title function_">onComplete</span>();    <br>                            &#125;<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            self.<span class="hljs-title function_">onFailure</span>(file, xhr.<span class="hljs-property">responseText</span>);        <br>                        &#125;<br>                    &#125;<br>                &#125;;<br>                <span class="hljs-comment">// 开始上传</span><br>                xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, self.<span class="hljs-property">url</span>, <span class="hljs-literal">true</span>);<br>                xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>, <span class="hljs-string">&#x27;multipart/form-data&#x27;</span>);<br>                xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;X_FILENAME&quot;</span>, file.<span class="hljs-property">name</span>);<br>                xhr.<span class="hljs-title function_">send</span>(file);<br>            &#125;    <br>        &#125;)(file);    <br>    &#125;    <br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$fn</span> = (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FILENAME&#x27;</span>]) ? <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FILENAME&#x27;</span>] : <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$fn</span>) &#123;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<br>        <span class="hljs-string">&#x27;uploads/&#x27;</span> . <span class="hljs-variable">$fn</span>,<br>        <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>)<br>    );<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;http://www.zhangxinxu.com/study/201109/uploads/<span class="hljs-subst">$fn</span>&quot;</span>;<br><span class="hljs-keyword">exit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>作者使用了ajax来发送数据。注意L34～L37,打开一个post连接，指定contentType为multipart-form-data，然后发送了一个额外的头部信息X_FILENAME=file.name，最后发送了图片的二进制代码触发发送动作。上述代码的特点：1、只能发送一张图片；2、requestBody中不能发送其它信息；3、若有额外信息需要发送，可以使用额外的头部新来装载，并在服务端使用$_SERVER[‘HTTP_变量名’]来接收。上述代码是有很大不足的，首先使用php://input来接收数据倒还不如使用post来接收的方便（最少只需要简单的数行代码就能实现），另外根据<a href="http://php.net/manual/en/wrappers.php.php">php官方文档</a>中php://input一节有这么一句：php://input is not available with enctype=”multipart/form-data”。经测试，注释L35上述代码不受影响。当然我也很佩服作者的编码能力，和想象力。但是同时我也要指出这篇文章中的错误，希望后来的读者在借鉴的同时能仔细甄别。</p><p>解决这个问题的方法有两种</p><ul><li><p>第一种思路，使用XMLHttpRequest对象的FormData对象。请点击<a href="https://developer.mozilla.org/zh-CN/docs/DOM/XMLHttpRequest/FormData">FormData</a>以及<a href="https://developer.mozilla.org/zh-CN/docs/DOM/XMLHttpRequest/FormData/Using_FormData_Objects">使用FormData</a>，或者请看一篇中文博客文档<a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html">XMLHttpRequest Level 2 使用指南</a>。这个思路的实现是比较简单的，但是它仍然有缺点：需要&lt;input type=”file” /&gt;这个表单元素来存放图片，而且在向FormData对象添加文件时，必须使用该表单元素的DOM对象。使用jQuery的同学一定要注意这个问题。</p></li><li><p>第二种思路，自己拼装http协议。按照multipart/form-data的格式自己拼装http协议的内容。看上去这个思路颇具难度。但，相信稍稍了解http协议和ajax技术的同学都可以写出来。不过，好消息是，这部分内容早就有人实现并封装了，而且HTML5的drag和drop方法也一并封装了，我们只需要实现页面的DOM操作就可以了。<a href="https://github.com/weixiyen/jquery-filedrop">传送门</a></p></li></ul><p>下面我会给出一demo，介绍这个jq插件的使用方法。<br><a href="https://github.com/straysh/fileupload">暂时放出项目链接，有空再写</a></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博文测试</title>
      <link href="/2013/10/13/2013-%E5%8D%9A%E6%96%87%E6%B5%8B%E8%AF%95/"/>
      <url>/2013/10/13/2013-%E5%8D%9A%E6%96%87%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h4 id="Github提交中文乱码"><a href="#Github提交中文乱码" class="headerlink" title="Github提交中文乱码"></a>Github提交中文乱码</h4><p>这个状况是由于cygwin的中文乱码导致，解决办法：vim ~/.inputrc 添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> meta-flag on<br><span class="hljs-built_in">set</span> convert-meta off<br><span class="hljs-built_in">set</span> input-meta on<br><span class="hljs-built_in">set</span> output-meta on<br></code></pre></td></tr></table></figure><p>重启console</p><h4 id="Github公钥安装"><a href="#Github公钥安装" class="headerlink" title="Github公钥安装"></a>Github公钥安装</h4><p>确认已经安装了ssh， 在console输入ssh -v检查<br>没有ssh 需要启动setup.exe选择ssh安装即可。</p><ul><li>#mkdir ~/.ssh</li><li>#ssh-keygen -t rsa (密码可以不设置)</li><li>登录github网站，选择account settings（网站最上面）-&gt;SSH Keys(侧边栏)-&gt;Add SSH key,title任意，key需要vim ~/.ssh/id_rsa.pub复制出来</li><li>最后，git push 你的项目的ssh路径 例如：git push git@github:straysh/test.git</li><li>输入刚才设置密钥时设置的密码就ok了。</li></ul><h4 id="mintty中vim无彩色"><a href="#mintty中vim无彩色" class="headerlink" title="mintty中vim无彩色"></a>mintty中vim无彩色</h4><ul><li>检查.vimrc 中 syntax on</li><li>检查TERM变量，在console里输入<br>echo $TERM<br>如果输出的不是xterm，需要修改mintty的配置：<br>在控制台右键选options-&gt;termibal-&gt;type 选择xterm<br>并在console里输入 export TERM=xterm</li></ul><h4 id="vim中文乱码"><a href="#vim中文乱码" class="headerlink" title="vim中文乱码"></a>vim中文乱码</h4><p>最简单的办法 设置console字符集为utf8，打开vim之后set encoding=utf-8<br>或者修改.vimrc，添加</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-comment">&quot; 设置编码</span><br><span class="hljs-keyword">set</span> fenc=utf-<span class="hljs-number">8</span><br><span class="hljs-keyword">set</span> encoding=utf-<span class="hljs-number">8</span><br><span class="hljs-keyword">set</span> fileencodings=utf-<span class="hljs-number">8</span>,gbk,cp936,latin-<span class="hljs-number">1</span><br><span class="hljs-comment">&quot; 解决consle输出乱码</span><br><span class="hljs-keyword">language</span> <span class="hljs-keyword">messages</span> zh_CN.utf-<span class="hljs-number">8</span> <br><br>warning: CRLF will <span class="hljs-keyword">be</span> replaced by LF<br>git config --<span class="hljs-keyword">global</span> core.autocrlf false<br></code></pre></td></tr></table></figure><h4 id="禁止Vimwiki自动套用p标签"><a href="#禁止Vimwiki自动套用p标签" class="headerlink" title="禁止Vimwiki自动套用p标签"></a>禁止Vimwiki自动套用p标签</h4><p>vimwiki会自动套用p标签，当我们使用自定义的html标签时，页面就会变形。我将段落改为=tab激活(段落以一个=号和tab键开头)，找到autoload/vimwiki_html.vim文件，修改L856-L871：<br>有点hack的味道，不过暂时解决了这个难题</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">function!</span> <span class="hljs-title">s</span>:process_tag_para<span class="hljs-params">(line, para)</span> &quot;&#123;&#123;&#123;<br>  <span class="hljs-keyword">let</span> lines = []<br>  <span class="hljs-keyword">let</span> para = <span class="hljs-variable">a:para</span><br>  <span class="hljs-keyword">let</span> processed = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-variable">a:line</span> =~ <span class="hljs-string">&#x27;^=\t\S&#x27;</span><br>    <span class="hljs-keyword">if</span> !para<br><span class="hljs-string">&quot;     call add(lines, &quot;</span><br><br><span class="hljs-string">&quot;) let para = 1 endif let processed = 1 call add(lines, substitute(a:line,&#x27;^=\t&#x27;, &#x27;&lt; p&gt;&#x27;,&#x27;&#x27;)) elseif para &amp;&amp; a:line =~ &#x27;^\s*$&#x27; call add(lines, &quot;</span><br><span class="hljs-comment">&quot;)</span><br>    <span class="hljs-keyword">let</span> para = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">endif</span><br>  <span class="hljs-keyword">return</span> [processed, lines, para]<br><span class="hljs-keyword">endfunction</span> <span class="hljs-comment">&quot;&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="上次修改完之后发现一个bug，wiki的超链接语法无法转换成html链接。再次修改代码如下："><a href="#上次修改完之后发现一个bug，wiki的超链接语法无法转换成html链接。再次修改代码如下：" class="headerlink" title="上次修改完之后发现一个bug，wiki的超链接语法无法转换成html链接。再次修改代码如下："></a>上次修改完之后发现一个bug，wiki的超链接语法无法转换成html链接。再次修改代码如下：</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">function!</span> <span class="hljs-title">s</span>:process_tag_para<span class="hljs-params">(line, para)</span> &quot;&#123;&#123;&#123;<br>  <span class="hljs-keyword">let</span> lines = []<br>  <span class="hljs-keyword">let</span> para = <span class="hljs-variable">a:para</span><br>  <span class="hljs-keyword">let</span> processed = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-variable">a:line</span> =~ <span class="hljs-string">&#x27;^=\t\S&#x27;</span><br>    <span class="hljs-keyword">if</span> !para<br><span class="hljs-string">&quot;     call add(lines, &quot;</span><br><br><span class="hljs-string">&quot;) call add(lines, substitute(a:line,&#x27;^=\t&#x27;,&#x27;&#x27;,&#x27;&#x27;)) let para = 1 endif let processed = 1 elseif para &amp;&amp; a:line =~ &#x27;^\s*$&#x27; call add(lines, &quot;</span><br><span class="hljs-comment">&quot;)</span><br>    <span class="hljs-keyword">let</span> para = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">call</span> <span class="hljs-built_in">add</span>(lines, <span class="hljs-variable">a:line</span>) <br>    <span class="hljs-keyword">let</span> processed = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">endif</span><br>  <span class="hljs-keyword">return</span> [processed, lines, para]<br><span class="hljs-keyword">endfunction</span> <span class="hljs-comment">&quot;&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yii </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yii_Page_Caching</title>
      <link href="/2013/10/07/2013-Yii-Page-Caching/"/>
      <url>/2013/10/07/2013-Yii-Page-Caching/</url>
      
        <content type="html"><![CDATA[<h1 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h1><p>1.输出缓存 <br>2.HTTP缓存</p><p>页面缓存指的是将整个页面缓存住。页面缓存可以在不同的地方进行。例如，通过选取合适的HTTP头，客户端浏览器可以将浏览的页面在限定的时间内缓存住。web应用本身也可将页面存储在缓存中。</p><h4 id="toc_0.0.0.1">1.输出缓存(Output Caching)</h4><p>页面缓存可以当作是片段缓存的特例。因为页面内容通常是由试图上应用布局来生成的，如果只是简单的在布局上调用beginCache()和endCache()是没有效果的。原因是，在视图被计算出来之后，再会在CController::render()方法中应用布局文件。</p><p>为了将整个页面缓存住，就要跳过action生成页面内容的代码。我们可以使用COutputCache作为action过滤器来完成这个任务。下面的代码显示了如何配置缓存过滤器：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filters</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<br>        <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;COutputCache&#x27;</span>,<br>            <span class="hljs-string">&#x27;duration&#x27;</span> =&gt; <span class="hljs-number">100</span>,<br>            <span class="hljs-string">&#x27;varyByParam&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;id&#x27;</span>),<br>        ),<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的过滤器配置会应用到控制器中的所有方法上。我们可以使用加号操作符(+)，限制它只发生在一个或几个方法上。更多的细节可以在控制器中找到。</p><pre><code>Tip：COutputCache可以作为过滤器是因为它继续自CFileterWidget，而CFilterWidget既是过滤器又是挂件。事实上，挂件的运作方式跟过滤器是很像的：一个挂件（过滤器）会在任何内嵌的内容（方法）被计算之前开始运行，并且挂件（过滤器）会在任何内嵌的内容（方法）被计算之后结束。</code></pre><h4 id="toc_0.0.0.2">2.HTTP缓存</h4><p>作为简单的缓存方法输出内容的补充，Yii在1.1.11版本引入了CHttpCacheFilter。这个过滤器有助于设置前述的HTTP头来通知客户端在前次请求之后页面内容没有发生改变，这样，服务器不需要重新传输页面内容。CHttpCacheFilter的设置和COutputCache相似：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<br>        <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;CHttpCacheFilter + index&#x27;</span>,<br>            <span class="hljs-string">&#x27;lastModified&#x27;</span> =&gt; <span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">app</span>()-&gt;db-&gt;<span class="hljs-title function_ invoke__">createCommand</span>(<span class="hljs-string">&quot;SELECT MAX(update_time) FROM post&quot;</span>)<br>-&gt;<span class="hljs-title function_ invoke__">queryScalar</span>(),<br>        ),<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码将HTTP头的Last-Modified设置为文章最后修改的时间。你也可以使用CHttpCacheFilter::lastModifiedExpression（php表达式）来设置HTTP头的Last-Modified。</p><pre><code>Tip：CHttpCacheFilter::lastModifiedExpression和CHttpCacheFilter::lastModified都能使用整数表示Unix时间戳或者任意的字符串表示可人识别的时间。后一种方式可以使用strtotime()解析，不许要其它转换。</code></pre><p>SEO提示<br>搜索引擎机器人倾向于考虑缓存中的HTTP头信息。由于一些爬虫对单位时间内处理的一个域的页面数量有限制，引入缓存HTTP头或许有助于爬虫索引你的站点，因为这样做减少了爬虫处理的页面数量。</p><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><p><a href='http://www.yiiframework.com/doc/guide/1.1/en/caching.page'>Yii Page Caching</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Output Caching<br>HTTP Caching<br></code></pre></td></tr></table></figure><p>Page caching refers to caching the content of a whole page. Page caching can occur at different places. For example, by choosing an appropriate page header, the client browser may cache the page being viewed for a limited time. The Web application itself can also store the page content in cache.</p><ol><li>Output Caching</li></ol><p>Page caching can be considered as a special case of fragment caching. Because the content of a page is often generated by applying a layout to a view, it will not work if we simply call beginCache() and endCache() in the layout. The reason is because the layout is applied within the CController::render() method AFTER the content view is evaluated.</p><p>To cache a whole page, we should skip the execution of the action generating the page content. We can use COutputCache as an action filter to accomplish this task. The following code shows how we configure the cache filter:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filters</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<br>    <span class="hljs-keyword">array</span>(<br>      <span class="hljs-string">&#x27;COutputCache&#x27;</span>,<br>      <span class="hljs-string">&#x27;duration&#x27;</span>=&gt;<span class="hljs-number">100</span>,<br>      <span class="hljs-string">&#x27;varyByParam&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;id&#x27;</span>),<br>    ),<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>The above filter configuration would make the filter to be applied to all actions in the controller. We may limit it to one or a few actions only by using the plus operator. More details can be found in filter.</p><blockquote>Tip: We can use COutputCache as a filter because it extends from CFilterWidget, which means it is both a widget and a filter. In fact, the way a widget works is very similar to a filter: a widget (filter) begins before any enclosed content (action) is evaluated, and the widget (filter) ends after the enclosed content (action) is evaluated.</blockquote><ol start="2"><li>HTTP Caching</li></ol><p>In addition to simply caching the output of an action, Yii introduced CHttpCacheFilter in version 1.1.11. This filter aids in setting the aforementioned headers to notify a client that a page’s content has not been changed since the last request, so the server will not have to re-transmit the content. CHttpCacheFilter can be set up similar to COutputCache:</p><p>public function filters()<br>{</p><blockquote>return array(array('CHttpCacheFilter + index','lastModified'=>Yii::app()->db->createCommand("SELECT MAX(update_time) FROM post")->queryScalar(),),);</blockquote><p>}</p><p>The above code will set the Last-Modified header to the last date at which a post was updated. You can also use CHttpCacheFilter::lastModifiedExpression to set the Last-Modified header using a php expression.</p><blockquote>Tip: Both, CHttpCacheFilter::lastModifiedExpression and CHttpCacheFilter::lastModified can take either an integer representing an epochal Unix timestamp or an arbitrary string representing a human-readable date. As long as later one can be parsed by strtotime(), no further conversion is necessary.</blockquote><p>The “Entity Tag” (or ETag for short) header can be set in a similar fashion through CHttpCacheFilter::etagSeed and CHttpCacheFilter::etagSeedExpression , respectively. Both will be serialized (so you can use either a single value or an entire array) and are used to generate a quoted, base64-encoded SHA1 hash serving as content for the ETag header. This differs from the way the Apache Webserver and others are generating their ETags. However, this method is perfectly in line with the RFC and turned out to be more feasible for use in a framework.</p><blockquote>Note: In order to comply with RFC 2616, section 13.3.4, CHttpCacheFilter will send out ETag and Last-Modified headers if they can both be generated. Consequently, both will be used for cache validation if sent by the client.</blockquote><p>Since entity tags are hashes, they allow more complex and/or more precise caching strategies than Last-Modified headers. For instance, an ETag can be invalidated if the site has switched to another theme.</p><blockquote>Tip: Expensive expressions for CHttpCacheFilter::etagSeedExpression may defeat the purpose of CHttpCacheFilter and introduce unnecessary overhead, since they need to be re-evaluated on every request. Try to find a simple expression that invalidates the cache if the page content has been modified.</blockquote><p>SEO Implications</p><p>Search engine bots tend to respect cache headers. Since some crawlers have a limit on how many pages per domain they process within a certain time span, introducing caching headers may help indexing your site as they reduce the number of pages that need to be processed.</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yii_Dynamic_Content</title>
      <link href="/2013/10/04/2013-Yii-Dynamic-Content/"/>
      <url>/2013/10/04/2013-Yii-Dynamic-Content/</url>
      
        <content type="html"><![CDATA[<h1 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h1><h2 id="toc_0.1">动态内容</h2><p>使用片段缓存或者页面缓存时，我们经常遇到这样的情境：除了在个别地方，整个输出的内容都是相对静态的。例如，帮助页面要显示静态的帮助信息，同时，页面顶部要显示当前登录用户的用户名。</p><p>解决这个问题，我们可以通过用户名来变换缓存的内容，但这样对，同时，页面顶部要显示当前登录用户的用户名。</p><p>解决这个问题，我们可以通过用户名来变换缓存的内容，但除了用户名，缓存中绝大部分内容都是相同的，这对我们珍贵的缓存空间是巨大的浪费。我们也可以将页面划分成几个片段，并分别缓存起来，但是这么做使得视图和代码都变得更加的复杂。更好的实现方式是使用CController提供的动态内容特性。</p><p>动态内容指的是输出当中不应该被缓存的片段，即使它被内嵌在片段缓存中。要使得这部分内容一直是动态的，那么每一次请求都要重新生成之，即使嵌套在它上面的这部分内容是从缓存中读取的。因此，我们需要这部分动态的内容有某个方法或者函数来生成。</p><p>调用CController::renderDynamic()方法在期望的地方插入动态内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">... 其它HTML内容 ...<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">beginCache</span>(<span class="hljs-variable">$id</span>)&#123; <span class="hljs-meta">?&gt;</span><br>... 片段缓存中的内容 ...<br>    <span class="hljs-meta">&lt;?php</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">renderDynamic</span>(<span class="hljs-variable">$callback</span>); <span class="hljs-meta">?&gt;</span><br>... 片段缓存中的内容 ...<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">endCache</span>(); &#125; <span class="hljs-meta">?&gt;</span><br>... 其它HTML内容 ...<br></code></pre></td></tr></table></figure><p>上面的代码中，$callback指的是有效的php回调函数。它可以是指向当前控制器类的方法名的字符串，或者全局的函数。也可以是指向对象方法的数组。renderDynamic()任何附加的参数都会被传递给回调函数。回调函数会将动态内容return回来而不是直接输出。</p><h1>原文</h1><a href='http://www.yiiframework.com/doc/guide/1.1/en/caching.dynamic'>Yii Dynamic Content</a><p>Dynamic Content</p><p>When using fragment caching or page caching, we often encounter the situation where the whole portion of the output is relatively static except at one or several places. For example, a help page may display static help information with the name of the user currently logged in displayed at the top.</p><p>To solve this issue, we can variate the cache content according to the username, but this would be a big waste of our precious cache space since most content are the same except the username. We can also divide the page into several fragments and cache them individually, but this complicates our view and makes our code very complex. A better approach is to use the dynamic content feature provided by CController.</p><p>A dynamic content means a fragment of output that should not be cached even if it is enclosed within a fragment cache. To make the content dynamic all the time, it has to be generated every time even when the enclosing content is being served from cache. For this reason, we require that dynamic content be generated by some method or function.</p><p>We call CController::renderDynamic() to insert dynamic content at the desired place.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">...other HTML content...<br>&lt;?php if(\(this-&gt;beginCache(\)id)) &#123; ?&gt;<br>...fragment content to be cached...<br><br>&lt;blockquote&gt;<br>&lt;?php \(this-&gt;renderDynamic(\)callback); ?&gt;<br>&lt;/blockquote&gt;<br><br>...fragment content to be cached...<br>&lt;?php $this-&gt;endCache(); &#125; ?&gt;<br>...other HTML content...<br></code></pre></td></tr></table></figure><p>In the above, $callback refers to a valid PHP callback. It can be a string referring to the name of a method in the current controller class or a global function. It can also be an array referring to a class method. Any additional parameters to renderDynamic() will be passed to the callback. The callback should return the dynamic content instead of displaying it.</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yii_Fragment_Caching</title>
      <link href="/2013/10/04/2013-Yii-Fragment-Caching/"/>
      <url>/2013/10/04/2013-Yii-Fragment-Caching/</url>
      
        <content type="html"><![CDATA[<h1 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h1><p>缓存选项<br>嵌套缓存</p><p>片段缓存指的是缓存页面的片段。例如，一个显示了年度销售报表的页面中，我们可以把这个报表存储在缓存中，这样每次请求都节约了生成该报表的时间。</p><p>在视图文件中通过调用CController::beginCache()和CController::endCache()来使用片段缓存。这两个方法分别标记出了待缓存的页面内容的开始和结束位置。类似变量缓存，我们需要一个ID来唯一标识被缓存的片段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">... 其它HTML内容 ...<br>&lt;?php if($this-&gt;beginCache($id))&#123; ?&gt;<br>... 被缓存的内容 ...<br>&lt;?php $this-&gt;endCache(); ?&gt;<br>... 其它HTML内容 ...<br></code></pre></td></tr></table></figure><p>上面的代码中，如果beginCache()返回false，已缓存的内容会被自动插入到其中；否则，当endCache()被调用时if语句块内的代码会被执行。</p><h4 id="toc_0.0.0.1">1.缓存选项</h4><p>调用beginCache()时，我们可以通过使用数组来作为组成缓存选项的第二个参数来定制片段缓存。事实上，beginCache()和endCache()方法是对COutputCache挂件的两个实用的包装。因此，缓存选项可以是用来初始化COutputCache挂件的任意属性。</p><p>属性duration</p><p>或许最常用的选项是有效期(duration)，它指定了缓存在多长时间内有效。类似于CCache::set()的过期参数(expiration)。下面这段代码将缓存约一个小时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">... 其它HTML内容 ...<br>&lt;?php if($this-&gt;beginCache($id, array(&#x27;duration&#x27;=&gt;3600))&#123; ?&gt;<br>... 缓存的内容 ...<br>&lt;?php $this-&gt;endCache();&#125; ?&gt;<br>... 其它HTML内容 ...<br></code></pre></td></tr></table></figure><p>如果不设置duration值，默认会是60，即缓存将会在60秒后失效。</p><p>自1.1.8版本起，若设置duration为0，所有现有的缓存都将被删除。若datation是负值，缓存将被禁用，但已经存在的缓存仍然有效。而在1.1.8版本之前，daration为0或负数将使缓存被(完全,译者注)禁用。</p><p>属性dependency</p><p>类似变量缓存，被缓存的内容片段也可以有依赖(dependencies)。例如，展示出来的一篇已发布的文章取决于发布的内容是否修改过。</p><p>为了指定依赖关系，我们使用denpendency选项，它既可以是一个实现了ICacheDenpendcy的对象，也可以是一个可用来生成denpendency对象的配置数组。下面的代码显示了缓存片段依赖于lastModified列的修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">... 其它HTML内容 ...<br>&lt;?php if($this-&gt;beginCach($id, array(&#x27;dependency&#x27;=&gt;array(<br>                &#x27;class&#x27;=&gt;&#x27;system.caching.dependencies.CDbCacheDependency&#x27;,<br>                &#x27;sql&#x27;=&gt;&#x27;SELECT MAX(lastModified) FROM `post`))) &#123; ?&gt;<br>... 缓存的内容 ...<br>&lt;?php $this-&gt;endCache(); &#125; ?&gt;<br>... 其它HTML内容 ...<br></code></pre></td></tr></table></figure><p>属性variation</p><p>缓存的内容可能随一些参数而变化。例如，个人的profile对不同的用户是不一样的。为了缓存个人的profile，我们希望缓存的副本随着用户ID而改变。本质上来说，就是在调用beginCache()方法时，要使用不同的ID参数。</p><p>在一些方案中需要开发人员来变更ID参数，作为一种替代的方案，COutputCache内置了这个特性。(Instead of asking developers to variate the IDs according to some scheme, COutputCache is built-in with such a feature)。下面是对variation的归纳。</p><p>varyByRoute:设置这个选项为TRUE，缓存将会根据route而改变。因此，每一个由controller和action组成的请求都将被缓存为单独的内容。</p><p>varyBySession:设置这个选项为TRUE，缓存将会根据session ID而改变。因此，每一个用户session看到的内容都是不同的，并且他们都使用缓存。</p><p>varyByParam:设置这个选项为名称数组(关联数组，字符串为键，译者注)，我们可以根据指定的GET参数值来读取不同的缓存内容。例如，如果一个页面根据id参数来展示不同的文章，我们可以通过设置varyByParam参数为array(‘id’)来缓存每一篇文章。若没有这样一个变换的手段，我们将只能缓存主一篇文章。</p><p>varyByExpression:设置该选项为PHP表达式，我们可以是缓存根据表达式的值而改变。</p><p>请求类型(Request Types)</p><p>有时，我们希望缓存只在特定的HTTP请求时有效。例如，一个表单页，我们只希望在页面初始化时将表单缓存住，这是一个GET请求。其它一系列(通过POST请求)的表单都不应该被缓存，因为这些表单中肯能含有用户输入信息。可以指定requestTypes选项来达到目的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">... 其它HTML内容 ...<br>&lt;?php if($this-&gt;beginCache($id, array(&#x27;requestTypes&#x27;=&gt;array(&#x27;GET&#x27;)))&#123; ?&gt;<br>... 缓存的HTML内容 ...<br>&lt;?php $this-&gt;endCache(); &#125; ?&gt;<br>... 其它HTML内容 ...<br></code></pre></td></tr></table></figure><h4 id="toc_0.0.0.2">2.嵌套缓存</h4><p>片段缓存是可嵌套的。也就是说，一个片段缓存可以被包装在一个更大的片段缓存中。例如，评论被缓存在一内层的缓存中，并且这些片段缓存同文章内容一起被缓存在外层的片段缓存中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">... 其它HTML内容 ...<br>&lt;?php if($this-&gt;beginCache($id1)&#123; ?&gt;<br>... 外层的缓存内容 ...<br>    &lt;?php if($this-&gt;beginCache($id2) &#123; ?&gt;<br>        ... 内层的缓存内容 ...<br>    &lt;?php $this-&gt;endCache(); &#125; ?&gt;<br>... 外层的缓存内容 ...<br>&lt;?php $this-&gt;endCache(); &#125; ?&gt;<br>... 其它HTML内容 ...<br></code></pre></td></tr></table></figure><p>嵌套缓存中可以使用不同的缓存参数。例如，上例中的内外层缓存中可以使用不同的duration参数。设置当外层缓存数据失效时，内层缓存仍然能提供有效的片段缓存内容。但是，反过来却不行。如果外层缓存有效，即时内层缓存过期了，它还是会继续提供相同的缓存副本。在设置duration或者dependency参数时，务必谨慎，否则内层的缓存将会被外层缓存覆盖掉。</p><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><p><a href='http://www.yiiframework.com/doc/guide/1.1/en/caching.fragment'>Yii Fragment Caching</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Caching Options<br>Nested Caching<br></code></pre></td></tr></table></figure><p>Fragment caching refers to caching a fragment of a page. For example, if a page displays a summary of yearly sale in a table, we can store this table in cache to eliminate the time needed to generate it for each request.</p><p>To use fragment caching, we call CController::beginCache() and CController::endCache() in a controller’s view script. The two methods mark the beginning and the end of the page content that should be cached, respectively. Like data caching, we need an ID to identify the fragment being cached.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">...other HTML content...<br>&lt;?php if(\(this-&gt;beginCache(\)id)) &#123; ?&gt;<br>...content to be cached...<br>&lt;?php $this-&gt;endCache(); &#125; ?&gt;<br>...other HTML content...<br></code></pre></td></tr></table></figure><p>In the above, if beginCache() returns false, the cached content will be automatically inserted at the place; otherwise, the content inside the if-statement will be executed and be cached when endCache() is invoked.</p><ol><li>Caching Options</li></ol><p>When calling beginCache(), we can supply an array as the second parameter consisting of caching options to customize the fragment caching. As a matter of fact, the beginCache() and endCache() methods are a convenient wrapper of the COutputCache widget. Therefore, the caching options can be initial values for any properties of COutputCache.<br>Duration</p><p>Perhaps the most commonly option is duration which specifies how long the content can remain valid in cache. It is similar to the expiration parameter of CCache::set(). The following code caches the content fragment for at most one hour:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">...other HTML content...<br>&lt;?php if(\(this-&gt;beginCache(\)id, array(&#x27;duration&#x27;=&gt;3600))) &#123; ?&gt;<br>...content to be cached...<br>&lt;?php $this-&gt;endCache(); &#125; ?&gt;<br>...other HTML content...<br></code></pre></td></tr></table></figure><p>If we do not set the duration, it would default to 60, meaning the cached content will be invalidated after 60 seconds.</p><p>Starting from version 1.1.8, if the duration is set 0, any existing cached content will be removed from the cache. If the duration is a negative value, the cache will be disabled, but existing cached content will remain in the cache. Prior to version 1.1.8, if the duration is 0 or negative, the cache will be disabled.<br>Dependency</p><p>Like data caching, content fragment being cached can also have dependencies. For example, the content of a post being displayed depends on whether or not the post is modified.</p><p>To specify a dependency, we set the dependency option, which can be either an object implementing ICacheDependency or a configuration array that can be used to generate the dependency object. The following code specifies the fragment content depends on the change of lastModified column value:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">...other HTML content...<br>&lt;?php if(\(this-&gt;beginCache(\)id, array(&#x27;dependency&#x27;=&gt;array(<br>&#x27;class&#x27;=&gt;&#x27;system.caching.dependencies.CDbCacheDependency&#x27;,<br>&#x27;sql&#x27;=&gt;&#x27;SELECT MAX(lastModified) FROM Post&#x27;)))) &#123; ?&gt;<br><br>...content to be cached...<br>&lt;?php $this-&gt;endCache(); &#125; ?&gt;<br>...other HTML content...<br></code></pre></td></tr></table></figure><p>Variation</p><p>Content being cached may be variated according to some parameters. For example, the personal profile may look differently to different users. To cache the profile content, we would like the cached copy to be variated according to user IDs. This essentially means that we should use different IDs when calling beginCache().</p><p>Instead of asking developers to variate the IDs according to some scheme, COutputCache is built-in with such a feature. Below is a summary.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">varyByRoute: by setting this option to true, the cached content will be variated according to route. Therefore, each combination of the requested controller and action will have a separate cached content.<br></code></pre></td></tr></table></figure><p>varyBySession: by setting this option to true, we can make the cached content to be variated according to session IDs. Therefore, each user session may see different content and they are all served from cache.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">varyByParam: by setting this option to an array of names, we can make the cached content to be variated according to the values of the specified GET parameters. For example, if a page displays the content of a post according to the id GET parameter, we can specify varyByParam to be array(&#x27;id&#x27;) so that we can cache the content for each post. Without such variation, we would only be able to cache a single post.<br></code></pre></td></tr></table></figure><p>varyByExpression: by setting this option to a PHP expression, we can make the cached content to be variated according to the result of this PHP expression.</p><p>Request Types</p><p>Sometimes we want the fragment caching to be enabled only for certain types of request. For example, for a page displaying a form, we only want to cache the form when it is initially requested (via GET request). Any subsequent display (via POST request) of the form should not be cached because the form may contain user input. To do so, we can specify the requestTypes option:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">...other HTML content...<br>&lt;?php if(\(this-&gt;beginCache(\)id, array(&#x27;requestTypes&#x27;=&gt;array(&#x27;GET&#x27;)))) &#123; ?&gt;<br>...content to be cached...<br>&lt;?php $this-&gt;endCache(); &#125; ?&gt;<br>...other HTML content...<br></code></pre></td></tr></table></figure><ol start="2"><li>Nested Caching</li></ol><p>Fragment caching can be nested. That is, a cached fragment is enclosed within a bigger fragment that is also cached. For example, the comments are cached in an inner fragment cache, and they are cached together with the post content in an outer fragment cache.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">...other HTML content...<br>&lt;?php if(\(this-&gt;beginCache(\)id1)) &#123; ?&gt;<br>...outer content to be cached...<br><br>&lt;?php if(\(this-&gt;beginCache(\)id2)) &#123; ?&gt;<br>...inner content to be cached...<br>&lt;?php $this-&gt;endCache(); &#125; ?&gt;<br><br><br>...outer content to be cached...<br>&lt;?php $this-&gt;endCache(); &#125; ?&gt;<br>...other HTML content...<br></code></pre></td></tr></table></figure><p>Different caching options can be set to the nested caches. For example, the inner cache and the outer cache in the above example can be set with different duration values. Even when the data cached in the outer cache is invalidated, the inner cache may still provide the valid inner fragment. However, it is not true vice versa. If the outer cache is evaluated to be valid, it will continue to provide the same cached copy even after the content in the inner cache has been invalidated. You must be careful in setting the durations or the dependencies of the nested caches, otherwise the outdated inner fragments may be kept in the outer fragment.</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>translation_Versioning_REST_Services</title>
      <link href="/2013/10/04/2013-translation-Versioning-REST-Services/"/>
      <url>/2013/10/04/2013-translation-Versioning-REST-Services/</url>
      
        <content type="html"><![CDATA[<h1 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h1><p>Scott Seely解释了何时发人员需要创建一个新的<a href="http://en.wikipedia.org/wiki/Endpoint">endpoint</a>。这篇高水准的、非语言相关的文章解释了怎样给REST服务打上版本号以及各个选项在何时才有意义。</p><p>在一个多层次的应用程序开始过程中，版本号是一个反复出现的问题。无论你正在更新一个远程调用，或改变一个COM对象，或更新一个web服务，在增加新功能的同时你必须考虑到怎么样兼容现有的用户（consumers）(开发人员或用户)。每一项新的技术的提出都促使我们重新定制版本号并提出处理系统变更的建议。</p><p>在这篇文章中，我们着眼于这些事件类型，它们促使REST服务中新版本号的生成。我们只考虑HTTP协议的REST。REST可以在多种不同的协议上以建筑学的风格来实现。在实践中，大部分人选择HTTP技术作为REST架构的基石。</p><p>在创建一个REST服务时，在项目的首轮迭代中通常将次原开放为只读的。在HTTP术语中，这意味着项目支持通过URL的GET方式被请求。之后，你可能会增加通过POST添加诸如资源的方法,通过PUT方法修改资源，通过DELTE方法删除资源。支持更多HTTP方法的同时，你不能中断现有的用户。换句话说，支持DELETE方法删除资源的同时，不能改变旧有的GET获取资源的功能。</p><p>那么，哪些事件类型会破坏现有的客户端？</p><p>从数据类型中移除字段会破坏现有客户端。客户端应用的开发人员应该处理丢失的值，但事实上他们很少这么做。结果他们的代码失效了，产生各种bug。</p><p>对现有的字段排序或者新增字段会破坏依赖字段位置的客户端。例如，客户端依赖于FirstName这个字段，而这个字段在位置0上，但是布局把FirstName更改成了其它位置，客户端崩溃了，用户抱怨（系统不能正常工作）。再次声明：客户端代码要基于名字查找，虽然基于索引的代码更容易编写。</p><p>重命名一个存在的字段也会导致客户端崩溃。将FirstName修改成firstname会使大小写敏感的客户端崩溃。大多数人使用XML或者JSON传递数据，它们都是大小写敏感的。若你使用其它方式（非大小写敏感）传递数据，牢记这一点尤为重要。</p><p>更改URL结构同样导致客户端崩溃。在你移动的资源之后，客户端将无法使用旧的url请求到它们。</p><p>处理以上问题的最简单的方式是改变URL结构。”正确”的处理方式是使用HTTP状态码301，表示永久重定向。这么做通过响应HTTP Location头信息会告诉请求端（通常是浏览器）资源的新位置。</p><p>这么说吧，闭关不是所有的HTTP客户端都足够智能到自动跟随跳转。如果你无法控制现有的HTTP客户但，一些，通常是许多，会被写成禁止跟随跳转。在这个例子中，我建议尼保留旧的URL架构不动同时用代码来实现基本的新旧URL结构。旧的URL结构能被网络设备处理，同时也能被代码处理。如果你们有IT部门，跟负责负载均衡和web服务器的团队合作找到正确的方案。</p><p>在重命名，重排序，新增，或者删除字段上，我有两个建议，很大程度上取决于谁在使用你们的服务。我们首先看看REST主义者：他们阅读过Roy Fielding的博士论文而且真正懂得Web的工作原理。第二条建议着重于怎么处理版本控制，当你的目标客户对简单的实现更感兴趣而不是最大化互联网架构的使用。</p><p>一种学派支持所谓的HATEOAS：超媒体（Hypermedia）或者说应用引擎状态（Engine of Application State）。HATEOAS学派认为应该使用HTTP Accept和Content-Type头信息来处理和描述版本控制下的数据。Accept信息描述了请求这需要的内容的类型。而HTTP 消息（HTTP message）包含了数据，Content-Type描述了消息中数据的类型。</p><p>这些头部信息的值是<a href="http://en.wikipedia.org/wiki/MIME">MIME类型</a>,互联网名称与数字地址分配机构维护着可接收的MIME类型列表。作为供应商，你也可以使用vnd前缀创建自己的MIME类型。例如，假设尼打算暴露foo这个数据类型，并且你的域名是example.com，你可以为该数据定义如下的MIME类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">vnd.example-com.foo+xml 在XML中表示foo这个数据<br>vnd.example-com.foo+json 在JSON中表示foo这个数据<br></code></pre></td></tr></table></figure><p>之后，任何人在请求你的服务时，只要他们建立了HTTP连接并且设置了正确的Accept头部MIME类型，以用户请求的格式返回的响应内容中会包含foo值。如果你对foo数据做了版本控制，那么MIME类型中就包含版本信息。</p><p>例如，对于版本1.0,1.1和1.2，JSON格式的foo数据需要参照如下方式设置Accept/Content-type头信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1.0:vnd.example-com.foo+json;version=1.0<br>1.1:vnd.example-com.foo+json;version=1.1<br>2.0:vnd.example-com.foo+json;version=2.0<br></code></pre></td></tr></table></figure><p>所有的HTTP协议栈（HTTP stacks）都有读写HTTP Accept和Content-Type头信息的技术。例如，jQuery中我会这么写来请求版本1.1的foo数据JSON对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">beforeSend</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">req</span>)&#123;<br>        req.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Accept&#x27;</span>, <span class="hljs-string">&#x27;vnd.example-com-foo+json;version=1.1&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://http:/~/12&#x27;</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>        <span class="hljs-comment">/* code elided */</span><br>    &#125;,<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>在服务端，你的代码需要查看accept类型并根据指定的请求版本写出客户端期望的字段。服务端必须基于URL和返回的Content-Type设置vary header来说明响应是可缓存的，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Vary: Content-Type<br></code></pre></td></tr></table></figure><p>通过使用Vary header，确保互联网架构能够精确的缓存响应。否则，依赖这种架构的服务器会缓存XML表现形式并在用户请求JSON的时候返回它。使用MIME类型，你可以处理任何版本的资源表现形式，仅需要在一个url上支持一个大家都知道的MIME类型。在你变更实现方式的时候，接收端（receiving endpoint）需要知道怎样读写返回的表现形式。</p><p>不幸的是，这最后一个bit对代码相当的敏感。用来接收的应用程序需要深入哇据HTTP Accept头并决定以何种格式书写响应。在一次请求中，在解码数据之前，例如在PUT或POST时，接收端需要检查Content-Type。</p><h2 id="toc_0.1">NOTE</h2>只发送一种Accept类型的消息发送者通常不许要设置Accept类型，因为响应的Content-Type中应该包含了Accept type。<p>多数常用的web框架例如Django，Microsoft ASP.NET, Microsoft WCF,以及基于PHP的框架，没有这样的技术来自动处理基于Content-Type的序列操作(<a href="http://en.wikipedia.org/wiki/Serialization">serialization</a>)。作为替换手段，开发人员不得不手写那些代码。客户端框架来发送和接收消息也成为可能，但设置HTTP Accept头不总是简单的,但设置url确实简单多了。</p><p>这是我们回到我的第二个建议上 —— 易用至上。URL最大。</p><p>创建web services的第二种方式是保持URL至上（TUK原则）。遵循这一模式的开发者称他为REST，因为他们听说过REST并且在一定程序上它和HTTP相关，但他们并不烦恼于阅读Fielding论文。幸运的是，这个学派唯一的过错在于把他们所做的东西叫做REST。为避免刺激REST主义者，我称之为TUK。</p><p>在TUK中，也需要通过url在标识资源。在管理资源时，使用表转的HTTP方法：读取使用GET，新建使用POST，更新使用PUT，删除使用DELETE</p><p>在这一点上，和REST是不同的。我们诸如上文提到的因改而产生的崩溃（breaking changes）。新增，删除，重排序，和重命名字段造成了一个某处的更改崩溃（breaking change）。你在这个世界创建一个新的版本，要更改URL结构。通常，你需要同时对大量成块的（largely chunks of）对象做版本控制。相应的，foo对象的1.0，1.1，2.0版本长的像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1.0 http://www.example.com/~/foo<br>1.1 http://www.example.com/~/foo<br>2.0 http://www.example.com/~/foo<br></code></pre></td></tr></table></figure><p>对本版号来说，一个可接受的选择是使用时间戳。如果你们使用时间来做版本控制，这样的结构也可以工作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">June 2008: http://www.example.com/~/foo<br>October 2009: http://www.example.com/~/foo<br>February 2010: http://www.example.com/~/foo<br></code></pre></td></tr></table></figure><p>如果你使用时间做版本控制，记住把年放在月的前面，并使用2个数字的月份。这样对版本排序会简单的多。</p><p>TUK风格有另外一个特征：Accept很少使用。相反，终端（endpoint）依赖查询字符串中的特定的格式来决定请求的Content-Type和期望返回的Content-Type。</p><p>为了便利，默认的格式是JSON。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Request the resource as XML: http://www.example.com/~/foo?format=xml<br>Request the resource as JSON: http://www.example.com/~/foo?format=json<br></code></pre></td></tr></table></figure><p><a href="http://en.wikipedia.org/wiki/Portable_Contacts">Portable Contacts</a>和开放社区都使用这种模式，因为理解起来十分简单。</p><p>开发人员倾向于使用url做版本控制。在url上标记版本使人一眼就能知道当前使用的服务版本号。只需要看一下请求的http url，什么都清楚了。</p><p>在实现你的代码的时候，应该在一个中心区域来实现业务逻辑。不同版本的监听者应该知道在对象的业务逻辑表现形式和对外的表现形式之间进行转换。简而言之，保持HTTP部分的简洁以便统一的修改代码和更容易支持完全不同的客户端</p><h2 id="toc_0.2">Summary</h2>在你重排序，重命名，新增或删除字段时，需要新建版本。通过改变表现形式，使得用户原有的解析数据的方式失效了。如果你的客户有结构话的想法并且对REST很了解，你应该使用应用程序接收的MIME类型对数据的表现形式做版本控制。如果你的客户将url作为最重要的一面，将url的设计作为版本控制的核心。那么熟悉WS-* web services的人倾向于在变更版本时改变url。<p>两种技术都是可行的。你要了解你的客户以便选中哪一种方式。一句话，企业和学术范倾向于REST版本控制。如果你的客户是小型业务，而用户都是hacker心理的人，追随TUK的道路。</p><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><p><a href='http://www.informit.com/articles/article.aspx?p=1566460'>Versioning REST Services</a><br /><br>Scott Seely explains when developers need to create a new endpoint versus just adding data. This higher level, non-language specific article explains how to version REST services and when each choice makes sense.</p><p>Versioning is a perennial issue in the development of multi-tier applications. Whether you are updating a remote procedure call, changing a COM object, or updating a Web service, you need to think about how to support existing consumers while providing new functionality. With each new technology, we have to revisit versioning and come up with new recommendations for how to handle change.</p><p>In this article, we look at the types of events that cause you to create a new version in a REST service. We then look at two approaches to deploying versions. We only consider HTTP REST. REST can be implemented as an architectural style on many different protocols. As a practical matter, most of us choose HTTP technology as a cornerstone in our REST architectures.<br>Creating New Versions</p><p>When creating a REST service, the first iteration in the project likely exposes the resource as read-only. In HTTP terms, this means that the project called for you to support GET on the URL. Later on, you might add the ability to add new resources through POST, update resources through PUT, and delete resources through DELETE. By supporting more HTTP methods, you cannot break existing clients. Put another way, the act of supporting DELETE does not change an older client’s ability to GET the resource.</p><p>What types of events do break existing clients, then?</p><blockquote><p>Removing a field from a data type breaks clients. Developers who write client apps should handle missing values, but they frequently don’t. Their code breaks. And they file bugs against you.<br>  Repositioning existing fields or adding a field to a data type. This will break existing clients that rely on the field position. For example, if the client relies on the field FirstName being in position 0 and a layout changes that field to any other position, clients break and users complain. Again: The client code should do name-based lookups, but code that uses indexes may be easier to write for some folks.<br>  Renaming an existing field. Changing FirstName to firstName will break clients that rely on case sensitivity. Most of you transmit data as XML or JSON; both of these are case sensitive. If you transmit data in some other (non-case sensitive) form, this is even more important to keep In mind.<br>  Updating your URL structure. If you move the resource, existing clients won’t be able to get to them.</p></blockquote><p>The easiest one of these to handle is changes to URL structure. The “right way” to handle this is to use the HTTP status code 301, Moved Permanently. Doing so tells the caller the new home for the resource via the HTTP Location header in the response.</p><p>That said, not all HTTP clients are smart enough to automatically follow redirects. If you do not control the existing HTTP clients, some, perhaps many, were written to not follow redirects. In this case, I advise you to keep the old URL structure in place and write the underlying implementation to handle the old and new URL structure with the same code. The old URL structure can be handled with networking equipment as well as with code. If you have an IT department to call on, work with the teams that own the load balancer and web servers to get the right rules in place.</p><p>I have two recommendations for renaming, reordering, adding, or deleting fields. They largely depend on who consumes your service. We first look at the RESTafarians: folks who read Roy Fielding’s PhD dissertation and really understand how the Web works. The second recommendation addresses how to handle versioning when your target clients are more interested in simplicity of implementation than in maximizing their use of the architecture of the Internet.<br>Hypermedia as the Engine of Application State</p><p>One school of thought follows what is called HATEOAS: Hypermedia as the Engine of Application State. HATEOAS says that you should use the HTTP Accept and Content-Type headers to handle versioning of data as well as describing data. Accept states the type of content the requester would like to get. When an HTTP message contains data, Content-Type states the type of content in that message.</p><p>The values in these headers are Multipurpose Internet Mail Extensions (MIME) types. The Internet Corporation for Assigned Names and Numbers maintains the list of accepted MIME types. As a vendor, you can also create your own MIME types using the vnd prefix. For example, if you are exposing the foo data type and your company is example.com, you can define the following MIME types for the data:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">vnd.example-com.foo+xml for the XML representation of foo data<br>vnd.example-com.foo+json for the JSON representation of foo data<br></code></pre></td></tr></table></figure><p>Then, whenever anyone requests data from your service, they create an HTTP request and set the Accept header to the correct MIME type. The response contains the data in the user requested format. As you version the foo data type, allow for the MIME type information to include version data.</p><p>For example, for versions 1.0, 1.1, and 2.0 of the foo data type as JSON set the Accept/Content-Type header as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1.0: vnd.example-com.foo+json; version=1.0<br>1.1: vnd.example-com.foo+json; version=1.1<br>2.0: vnd.example-com.foo+json; version=2.0<br></code></pre></td></tr></table></figure><p>All the HTTP stacks have a mechanism to read and set the HTTP Accept and Content-Type headers. For example, in jQuery I would write the following to request version 1.1 of the foo object as JSON:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">ajax</span>(&#123;<br>  <span class="hljs-attr">beforeSend</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">req</span>) &#123;<br>    req.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Accept&quot;</span>, <span class="hljs-string">&quot;vnd.example-com.foo+json; version=1.1&quot;</span>); <br>  &#125;,<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;&lt;a href=&#x27;http://http://www.example.com/foo/12&#x27;&quot;</span>,<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">/* code elided */</span><br>  &#125;,<br>  <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>On the server, your code needs to look at the accept type and handle writing out only the fields that the client expects, depending on which version of foo was requested. The server has to set the HTTP Vary header to say that the response is cacheable based on the URL plus the returned Content-Type, as follows:</p><p>Vary: Content-Type </p><p>By using the Vary header, you make sure that the Internet architecture can accurately cache the response. Otherwise, servers that rely on the architecture could cache the XML representation and return that when the caller asks for JSON. Using the MIME type, you can handle any version a resource representation by supporting a well know set of MIME types on a single URL. As you change the implementation, the receiving endpoint needs to know how to read and write the representations as requested.</p><p>Unfortunately, this last bit can be fairly code intensive. The receiving application needs to dig into the HTTP Accept header and determine which formatting should be used to write the response. Before decoding data in a request, such as in a PUT or POST, the receiver needs to look at the Content-Type.</p><p>NOTE</p><p>a message sender that only sends one Accept type typically does not need to do this, since the response Content-Type should match the Accept type.</p><p>Many popular web frameworks such as Django, Microsoft ASP.NET, Microsoft WCF, and those built on PHP do not have mechanisms to handle serialization based on Content-Type automatically. Instead, the developer has to write that code. The client frameworks to send and receive messages also make it possible, but not always simple, to set the HTTP Accept header. They do make it easy to set the URL.</p><p>This brings us to my second recommendation – where ease of use is paramount.<br>The URL is King</p><p>A second way to create Web services is to observe that The URL is King (TUK). Developers who follow this pattern call it REST because they heard that REST and HTTP are somehow related, but they couldn’t be bothered to read the Fielding dissertation. Fortunately, the only thing this school is guilty of is calling what they do REST. So as to not incite the RESTafarians, I call it TUK.</p><p>In TUK, you still identify resources by their URLs. When manipulating resources, use the standard HTTP methods:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">GET to read<br>POST to create<br>PUT to update<br>DELETE to remove<br></code></pre></td></tr></table></figure><p>At this point, we depart from REST. We have the same breaking changes as before. Adding, removing, reordering, and renaming fields constitutes a breaking change for someone somewhere. When you create a new version in this world, change the URL structure. Typically, you version large chunks of your objects at a time. Our foo object version for 1.0, 1.1, and 2.0 looks like this, instead:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1.0: &lt;a href=&quot;http://www.example.com/app/1.0/foo&quot;&gt;http://www.example.com/app/1.0/foo&lt;/a&gt;<br>1.1: &lt;a href=&quot;http://www.example.com/app/1.1/foo&quot;&gt;http://www.example.com/app/1.1/foo&lt;/a&gt;<br>2.0: &lt;a href=&quot;http://www.example.com/app/2.0/foo&quot;&gt;http://www.example.com/app/2.0/foo&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>An acceptable alternative to version numbers are date stamps. If your organization handles versioning by date, the following would also work:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">June 2008: &lt;a href=&quot;http://www.example.com/app/2008/06/foo&quot;&gt;http://www.example.com/app/2008/06/foo&lt;/a&gt;<br>October 2009: &lt;a href=&quot;http://www.example.com/app/2009/10/foo&quot;&gt;http://www.example.com/app/2009/10/foo&lt;/a&gt;<br>February 2010: &lt;a href=&quot;http://www.example.com/app/2010/02/foo&quot;&gt;http://www.example.com/app/2010/02/foo&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>If you version by date, always put the year before the month, and use two digit months. This makes it easy to sort the versions visually.</p><p>The TUK style has another characteristic: Accept is used rarely, if ever. Instead, endpoints rely on a format parameter in the query string to determine the content type of the request and the desired response content type.</p><p>By convention, the default value for format is json. Examples:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Request the resource as XML: &lt;a href=&quot;http://www.example.com/app/1.0/foo?format=xml&quot;&gt;http://www.example.com/app/1.0/foo?format=xml&lt;/a&gt;<br>Request the resource as JSON: &lt;a href=&quot;http://www.example.com/app/1.0/foo?format=json&quot;&gt;http://www.example.com/app/1.0/foo?format=json&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>Both Portable Contacts and OpenSocial use this pattern because it is so easy for people to understand.</p><p>Developers tend to prefer versioning by URL. Versioning by URL allows them to figure out which version of the service is in use at a glance. Just look at the HTTP request URL, and you know everything!</p><p>When implementing your code, you should keep the business logic in one central location. The various listeners for each version should know how to transpose between the business logic representation of the object and the external representation. In general, keep the HTTP part fairly thin and simple so that you can fix code centrally and support disparate clients easily.<br>Summary</p><p>You have a new version of your service whenever you reorder, rename, add, or delete fields. By changing the representation, you invalidate the assumptions consumers have already made about how to interpret the data. If your audience is architecturally minded and aware of REST, you should version data representations in the MIME types your application accepts. If your clients view the URL as the most important facet, make the URL the center of your versioning efforts. Folks who are familiar with versioning with WS-* Web services tend to be more comfortable with changing the URL when versions change.</p><p>Both mechanisms are valid. You need to know your consumer to know which path to follow. In general, working with enterprises and academically-minded folks tends to point developers towards REST versioning. If your clients are smaller businesses and users with a hacker mentality, follow the TUK approach. </p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql_MySQL权威指南笔记（二）</title>
      <link href="/2013/10/03/2013-mysql-MySQL%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2013/10/03/2013-mysql-MySQL%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>接着刚才的话题。FROM子句中的表引用table reference是可以用表表达式table expression来替换的(这两者本身也是等价的)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `stu` <span class="hljs-keyword">WHERE</span> `name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Jack&#x27;</span><br>等价于：<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>　<span class="hljs-keyword">FROM</span> `stu`) tmp <span class="hljs-keyword">WHERE</span> `name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Jack&#x27;</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>注意别名的使用<br>上面用法是毫无意义的,只是为说明语法，看下面的例子：<br><span class="hljs-keyword">SELECT</span> tmp.`name`,`course_name`<br><span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `stu` <span class="hljs-keyword">WHERE</span> `age`<span class="hljs-operator">&amp;</span>gt;<span class="hljs-number">30</span>) tmp,`course` c<br><span class="hljs-keyword">WHERE</span> tmp.`id`<span class="hljs-operator">=</span>c.`sid`<br></code></pre></td></tr></table></figure><h3 id="SELECT语句：WHERE子句"><a href="#SELECT语句：WHERE子句" class="headerlink" title="SELECT语句：WHERE子句"></a>SELECT语句：WHERE子句</h3><p>FROM子句结束后，执行的就是WHERE子句。WHERE子句过滤出了符合条件的临时表中的行。说的更仔细：WHERE子句过滤掉（删除）了谓词为false或者unknown的行。</p><p>假设stu表中有一行记录 12 Yoyo (NULL) 即id字段为数值12，name字段为字符’Yoyo’，age字段为NULL。NULL值在MySQL中就是不可测定的，不可知的。因此在执行WHERE age&gt;30 的测试时，返回的是unknown，既不是true也不是false。</p><p>WHERE子句可以包含以下条件：</p><ul><li><a href='#comparison-operator'>比较运算符</a></li><li><a href='#logical-operator'>AND、OR、XOR、NOT</a></li><li><a href='#in-operator'>带有列表的IN</a></li><li>BETWEEN</li><li>LIKE</li><li>REGEXP</li><li><a href='#match-operator'>MATCH</a></li><li><a href='#null-operator'>NULL</a></li><li><a href='#anyall-operator'>ANY、ALL</a></li><li><a href='#exists-operator'>EXISTS</a></li></ul><p><a name='comparison-operator'></a><br>比较运算符包括：=等于、&lt;小于、&gt;大于、&lt;=小于等于、&gt;=大于等于、&lt;&gt;不等于，以及不常用的!=不等于、&lt;=&gt;相等或者都等于空。对于带有列表的比较运算符：例如(x,y)=(1,3)，MySQL在内部将其转化为 (x=1) AND (y=3);(x,y)&gt;(1,3),内部转化为(x&gt;1) OR (x=1 AND y&gt;3)。MySQL在内部的转换和我们自然的认为(x&gt;1) AND (y&gt;3)是不同的！！。鉴于这种列表式的写法最终还是会被MySQL转换为常规的AND、OR，建议直接使用这种常规的写法，也不容易出现错误。</p><p>有一种比较特殊的关联子查询(correlated subquery)，看例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c.course_name<br><span class="hljs-keyword">FROM</span> course c<br><span class="hljs-keyword">WHERE</span> <span class="hljs-number">30</span> <span class="hljs-operator">&amp;</span>lt; (<span class="hljs-keyword">SELECT</span> s.age <span class="hljs-keyword">FROM</span> stu s <span class="hljs-keyword">WHERE</span> s.id<span class="hljs-operator">=</span>c.sid)<br></code></pre></td></tr></table></figure><p>关联子查询的特点是，子查询的结果依赖主表的行。例如上例中的SELECT s.age FROM stu s WHERE s.id=c.sid，年龄的查询依赖于主表的sid，即主表没扫描一行，子查询就要重新计算一次。</p><p><a name='logical-operator'></a><br>逻辑AND、OR、XOR、NOT就不需要多说了。</p><p><a name='in-operator'></a><br>IN操作符后面需要跟一个列表，一个使用（）圆括号包起来的以,逗号分隔的值</p><p><a name='match-operator'></a><br>MATCH用在全文检索，不讨论。</p><p><a name='null-operator'></a><br>前面说过，NULL在MySQL中是不可测定的，未知的值。所以诸如WHERE col=NULL这样的语法是错误的。而应该写作：WHERE col IS NULL、WHERE col IS NOT NULL</p><p><a name='anyall-operator'></a><br>ALL、ANY、SOME通常用在比较运算符有操作数为列表的情形。其中SOME和ANY是同义词。看下面的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.id,s.name <span class="hljs-keyword">FROM</span> stu s <span class="hljs-keyword">WHERE</span> s.id <span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">ALL</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<span class="hljs-operator">/</span><span class="hljs-operator">/</span>条件为s.id大于(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)中的每一个值<br><span class="hljs-keyword">SELECT</span> s.id,s.name <span class="hljs-keyword">FROM</span> stu s <span class="hljs-keyword">WHERE</span> s.id <span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">ANY</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<span class="hljs-operator">/</span><span class="hljs-operator">/</span>条件为s.id大于(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)中的任意一个值<br><span class="hljs-keyword">SELECT</span> s.id,s.name <span class="hljs-keyword">FROM</span> stu s <span class="hljs-keyword">WHERE</span> s.id <span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">ALL</span> <br>(<span class="hljs-keyword">SELECT</span> c.sid <span class="hljs-keyword">FROM</span> course c <span class="hljs-keyword">WHERE</span> c.course_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Math&#x27;</span>)<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>条件为s.id大于子查询中的每一个值<br></code></pre></td></tr></table></figure><p><a name='exists-operator'></a><br>EXISTS通常用在关联子查询中。用来作为测试条件。我们改造一下之前correlated subquery的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c.course_name<br><span class="hljs-keyword">FROM</span> course c<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> stu s <span class="hljs-keyword">WHERE</span> s.id<span class="hljs-operator">=</span>c.sid <span class="hljs-keyword">AND</span> s.age<span class="hljs-operator">&amp;</span>gt;<span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><p>最终的结果是一样的。当WHERE测试为true时，主表的select就会返回相应的结果。</p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>demo blog入口分析</title>
      <link href="/2013/09/29/2013-demo-blog%E5%85%A5%E5%8F%A3%E5%88%86%E6%9E%90/"/>
      <url>/2013/09/29/2013-demo-blog%E5%85%A5%E5%8F%A3%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>首先搭建demo blog环境，更改数据库连接如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27;db&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;connectionString&#x27;</span> =&gt; <span class="hljs-string">&#x27;mysql:host=localhost;dbname=blog&#x27;</span>,<br>    <span class="hljs-string">&#x27;emulatePrepare&#x27;</span> =&gt; <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-string">&#x27;123456&#x27;</span>,<br>    <span class="hljs-string">&#x27;charset&#x27;</span> =&gt; <span class="hljs-string">&#x27;utf8&#x27;</span>,<br>    <span class="hljs-string">&#x27;tablePrefix&#x27;</span> =&gt; <span class="hljs-string">&#x27;tbl_&#x27;</span>,<br>),<br></code></pre></td></tr></table></figure><p>从<a href="http://www.blog.test/index.php?r=post/index%E8%AE%BF%E9%97%AEdemo">http://www.blog.test/index.php?r=post/index访问demo</a> blog。下面我们来一步步分解yii的执行流程：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$yii</span>=<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;/../yii/framework/yii.php&#x27;</span>;        <span class="hljs-comment">//加载yii框架</span><br><span class="hljs-variable">$config</span>=<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;/protected/config/main.php&#x27;</span>;    <span class="hljs-comment">//指定配置文件路径</span><br><span class="hljs-comment">// defined(&#x27;YII_DEBUG&#x27;) or define(&#x27;YII_DEBUG&#x27;,true);    //debug模式，默认关闭</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-variable">$yii</span>);                                        <span class="hljs-comment">//包含yii核心文件</span><br><span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">createWebApplication</span>(<span class="hljs-variable">$config</span>)-&gt;<span class="hljs-title function_ invoke__">run</span>();                <span class="hljs-comment">//这里是关键，每一次访问都从这里开始</span><br></code></pre></td></tr></table></figure><p>最后一行代码分解为2部分来看:Yii::createWebApplication()和run()。Yii这个类定义在框架目录的根上yii.php。很明显这个类只是对YiiBase.php的一个包装，我们可以在yii.php按自己的需求定制。追着YiiBase.php，首先请大家快速的预览一下该文件。发现从L14-L43有着大量的常量定义。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//这里定义了app的开始时间。注意microtime(true)返回浮点数，省去了自己拼接的麻烦</span><br><span class="hljs-title function_ invoke__">defined</span>(<span class="hljs-string">&#x27;YII_BEGIN_TIME&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;YII_BEGIN_TIME&#x27;</span>,<span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>));<br><span class="hljs-comment">//是否开启debug模式，默认关闭</span><br><span class="hljs-title function_ invoke__">defined</span>(<span class="hljs-string">&#x27;YII_DEBUG&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;YII_DEBUG&#x27;</span>,<span class="hljs-literal">false</span>);<br><span class="hljs-comment">//定义了Yii::trace()需要记录的堆栈调用(call stack information)信息(文件名和行号)。</span><br><span class="hljs-comment">//默认0，即不记录任何回溯信息(backtrace information)，大于0时，至多记录到该定义</span><br><span class="hljs-comment">//级别的call stacks信息(详细参看YiiBase::L460 log函数)</span><br><span class="hljs-title function_ invoke__">defined</span>(<span class="hljs-string">&#x27;YII_TRACE_LEVEL&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;YII_TRACE_LEVEL&#x27;</span>,<span class="hljs-number">0</span>);<br><span class="hljs-comment">//是否开启异常处理，默认开启</span><br><span class="hljs-title function_ invoke__">defined</span>(<span class="hljs-string">&#x27;YII_ENABLE_EXCEPTION_HANDLER&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;YII_ENABLE_EXCEPTION_HANDLER&#x27;</span>,<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//是否开启错误处理，默认开启</span><br><span class="hljs-title function_ invoke__">defined</span>(<span class="hljs-string">&#x27;YII_ENABLE_ERROR_HANDLER&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;YII_ENABLE_ERROR_HANDLER&#x27;</span>,<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//定义框架根路径</span><br><span class="hljs-title function_ invoke__">defined</span>(<span class="hljs-string">&#x27;YII_PATH&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;YII_PATH&#x27;</span>,<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>));<br><span class="hljs-comment">//定义zii根路径</span><br><span class="hljs-title function_ invoke__">defined</span>(<span class="hljs-string">&#x27;YII_ZII_PATH&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;YII_ZII_PATH&#x27;</span>,YII_PATH.DIRECTORY_SEPARATOR.<span class="hljs-string">&#x27;zii&#x27;</span>);<br></code></pre></td></tr></table></figure><p>接下来，继续追查YiiBase::createWebApplication()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createWebApplication</span>(<span class="hljs-params"><span class="hljs-variable">$config</span>=<span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">createApplication</span>(<span class="hljs-string">&#x27;CWebApplication&#x27;</span>,<span class="hljs-variable">$config</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createApplication</span>(<span class="hljs-params"><span class="hljs-variable">$class</span>,<span class="hljs-variable">$config</span>=<span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$class</span>(<span class="hljs-variable">$config</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>最终产生了一个CWebApplication实例，并调用了父类CApplication的构造方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$config</span>=<span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">setApplication</span>(<span class="hljs-variable">$this</span>);    <span class="hljs-comment">//奇特的单例方法</span><br>    <span class="hljs-comment">// set basePath at early as possible to avoid trouble</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$config</span>))<br>        <span class="hljs-variable">$config</span>=<span class="hljs-keyword">require</span>(<span class="hljs-variable">$config</span>);<span class="hljs-comment">//包含配置文件</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;basePath&#x27;</span>]))<br>    &#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setBasePath</span>(<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;basePath&#x27;</span>]);<span class="hljs-comment">//设置Yii::app()-&gt;basePath属性</span><br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;basePath&#x27;</span>]);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setBasePath</span>(<span class="hljs-string">&#x27;protected&#x27;</span>);<span class="hljs-comment">//注意：这里表明最好在配置文件中显示的定义basePath,否则系统会使用默认值</span><br>    <span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">setPathOfAlias</span>(<span class="hljs-string">&#x27;application&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">getBasePath</span>());<span class="hljs-comment">//3个别名设置，又认识了几个别名 ^_^</span><br>    <span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">setPathOfAlias</span>(<span class="hljs-string">&#x27;webroot&#x27;</span>,<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>]));<br>    <span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">setPathOfAlias</span>(<span class="hljs-string">&#x27;ext&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">getBasePath</span>().DIRECTORY_SEPARATOR.<span class="hljs-string">&#x27;extensions&#x27;</span>);<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">preinit</span>();<span class="hljs-comment">//父类CModule中的一个空protect方法</span><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">initSystemHandlers</span>();<span class="hljs-comment">//初始化异常句柄和错误句柄 TODO待研究</span><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">registerCoreComponents</span>();<span class="hljs-comment">//初始化核心组件。CPhpMessageSource、CDbConnection、CPhpMessageSource、</span><br>    <span class="hljs-comment">//CErrorHandler、CSecurityManager、CStatePersister、CUrlManager、CHttpRequest、CFormatter TODO待研究</span><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">configure</span>(<span class="hljs-variable">$config</span>);<span class="hljs-comment">//call CModule::configure() 迭代剩余的配置信息</span><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">attachBehaviors</span>(<span class="hljs-variable">$this</span>-&gt;behaviors);<span class="hljs-comment">//绑定事件 TODO待研究</span><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">preloadComponents</span>();<span class="hljs-comment">//加载静态的app组件。不知道干嘛的 TODO待研究</span><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">init</span>();<span class="hljs-comment">//调用了实例CWebApplication::init()</span><br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">init</span>();<span class="hljs-comment">//调用爷爷类CModule::init(),这是一个空方法。即这行代码执行后 什么都没发生。</span><br>    <span class="hljs-comment">// preload &#x27;request&#x27; so that it has chance to respond to onBeginRequest event.</span><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getRequest</span>();<span class="hljs-comment">//调用父类CApplication::getRequest()</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRequest</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getComponent</span>(<span class="hljs-string">&#x27;request&#x27;</span>);<span class="hljs-comment">//返回一个CHttpRequest组件(核心组件)的实例</span><br>&#125;<br></code></pre></td></tr></table></figure><p>到现在，Yii::createWebapplication执行完毕，接下来执行了父类CApplication::run()方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">hasEventHandler</span>(<span class="hljs-string">&#x27;onBeginRequest&#x27;</span>))<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">onBeginRequest</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CEvent</span>(<span class="hljs-variable">$this</span>));<span class="hljs-comment">//绑定onBeginRequest方法</span><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">processRequest</span>();<span class="hljs-comment">//开始处理http请求</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">hasEventHandler</span>(<span class="hljs-string">&#x27;onEndRequest&#x27;</span>))<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">onEndRequest</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CEvent</span>(<span class="hljs-variable">$this</span>));<span class="hljs-comment">//绑定onEndRequest方法</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processRequest</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$this</span>-&gt;catchAllRequest) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;catchAllRequest[<span class="hljs-number">0</span>]))<br>    &#123;<br>        <span class="hljs-variable">$route</span>=<span class="hljs-variable language_">$this</span>-&gt;catchAllRequest[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-title function_ invoke__">array_splice</span>(<span class="hljs-variable">$this</span>-&gt;catchAllRequest,<span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$name</span>=&gt;<span class="hljs-variable">$value</span>)<br>            <span class="hljs-variable">$_GET</span>[<span class="hljs-variable">$name</span>]=<span class="hljs-variable">$value</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-variable">$route</span>=<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getUrlManager</span>()-&gt;<span class="hljs-title function_ invoke__">parseUrl</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">getRequest</span>());<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">runController</span>(<span class="hljs-variable">$route</span>);<span class="hljs-comment">//解析完url，执行post/index，到此结束</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yii </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql_MySQL权威指南笔记（一）</title>
      <link href="/2013/09/29/2013-mysql-MySQL%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2013/09/29/2013-mysql-MySQL%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="SELECT语句的常用元素"><a href="#SELECT语句的常用元素" class="headerlink" title="SELECT语句的常用元素"></a>SELECT语句的常用元素</h3><ul><li>Literal</li><li>Expression</li><li>Column specification</li><li>User variable</li><li>System variable</li><li>Case expression</li><li>Scalar function</li><li>Null value</li><li>Cast expression</li><li>Compaund expression</li><li>Row expression</li><li><a href='#table-expression' />Table expression</a></li><li>Aggregation function<br><a name='table-expression'></a></li></ul><p>一个table expression通常得到一个值，该表达式用在SELECT中以及SELECT语句的WHERE子句中。</p><p>我们通常按照表达式的数据类型或其值的复杂性或其形式来给表达式分类。表达式的数据类型和MySQL的数据类型是一致的，也包含数值型、字符型、时间型、十六进制和布尔类型。这时，表达式有一个确定的值，我们称其为标量scalar value。在按复杂性分类时，这些scalar value所表示的表达式被成为scalar expression。除此之外，还有row expression和table expression。需要注意的是，row expression是列表(有序)，而table expression是集合(无序)</p><p>表达式的第三种划分方式是以上面两种为基础的。通常来说，带有运算符的表达式就是compaund expression。与之对应的是单一表达式singular expression。在MySQL中table expression是可复合的(如只用UNION关键字)，而row expression是不可复合的。</p><h3 id="SELECT语句的定义"><a href="#SELECT语句的定义" class="headerlink" title="SELECT语句的定义"></a>SELECT语句的定义</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> statement<span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span> expression<span class="hljs-operator">&gt;</span><br><br><span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span> expression<span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> block head<span class="hljs-operator">&gt;</span> [<span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> block tail<span class="hljs-operator">&gt;</span>]<br><br><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> block head<span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> clause<span class="hljs-operator">&gt;</span><br>    [<span class="hljs-operator">&lt;</span><span class="hljs-keyword">from</span> clause<span class="hljs-operator">&gt;</span><br>        [<span class="hljs-operator">&lt;</span><span class="hljs-keyword">where</span> clause<span class="hljs-operator">&gt;</span>][<span class="hljs-operator">&lt;</span><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> clause<span class="hljs-operator">&gt;</span>][<span class="hljs-operator">&lt;</span><span class="hljs-keyword">having</span> clause<span class="hljs-operator">&gt;</span>]]<br><br><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> block tail<span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span><br>    [<span class="hljs-operator">&lt;</span><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> clause<span class="hljs-operator">&gt;</span>][limit clause]<br></code></pre></td></tr></table></figure><p>下面我们来分析一下SQL语句的执行过程。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `id`,`name`<span class="hljs-operator">/</span><span class="hljs-operator">/</span>最后一步，<span class="hljs-keyword">select</span>子句从结果集中抽取指定的列，形成最终的结果集并返回<br><span class="hljs-keyword">FROM</span> `stu`<span class="hljs-operator">/</span><span class="hljs-operator">/</span>第一步，<span class="hljs-keyword">from</span>子句指定了查询范围，并<span class="hljs-keyword">copy</span>出一张临时表<br><span class="hljs-keyword">WHERE</span> `age`<span class="hljs-operator">&gt;</span><span class="hljs-number">18</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>第二步，<span class="hljs-keyword">where</span>子句过滤出符合条件的<span class="hljs-type">row</span>，缩小的临时表<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> `classid`<span class="hljs-operator">/</span><span class="hljs-operator">/</span>第三步，<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>子句按指定的字段分组，这些字段在临时表中是唯一的，其他字段会形成列表<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>第四步，<span class="hljs-keyword">having</span>子句再次过滤出符合条件的<span class="hljs-type">row</span>，缩小了临时表<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `id`<span class="hljs-operator">/</span><span class="hljs-operator">/</span>第五步，<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>子句把临时表按指定的字段排序，只改变了临时表的<span class="hljs-type">row</span>顺序，不改变最终的结果集<br>LIMIT <span class="hljs-number">10</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>第六步，limit子句从结果集中抽取指定的<span class="hljs-keyword">rows</span><br></code></pre></td></tr></table></figure><p>上面的SQL语句最终的结果集就是一个table expression，就像之前说的，a table expression is a collection of rows。table expression的定义如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span> expression<span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span><br>    &#123;<span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> block head<span class="hljs-operator">&gt;</span><span class="hljs-operator">|</span>(<span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span> expression<span class="hljs-operator">&gt;</span>)<span class="hljs-operator">|</span><span class="hljs-operator">&lt;</span>compaund <span class="hljs-keyword">table</span> expression<span class="hljs-operator">&gt;</span>&#125;[<span class="hljs-keyword">select</span> block tail]<br><br><span class="hljs-operator">&lt;</span>compaund <span class="hljs-keyword">table</span> expression<span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span> expression<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span><span class="hljs-keyword">set</span> operator<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span> expression<span class="hljs-operator">&gt;</span><br><br><span class="hljs-operator">&lt;</span><span class="hljs-keyword">set</span> operator<span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span> <span class="hljs-keyword">UNION</span><br></code></pre></td></tr></table></figure><p>一个table expression可以是一条SELECT语句(singular expression)或者使用()括号将自身包起来，再或者是多个table expression使用一些关键字来复合(eg:UNION)，也就是所谓的compaund expression。而在使用UNION时，必须保证两个表表达式的度是相同的(列数相同)。</p><p>一个table expression可以调用另一个table expression(subquery或subselect)。理论上讲，table expression的嵌套可以是无限的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>    <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>        <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>            <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>                <span class="hljs-keyword">FROM</span> `stu`) <span class="hljs-keyword">AS</span> tmp1) <span class="hljs-keyword">AS</span> tmp2) <span class="hljs-keyword">AS</span> tmp3<br></code></pre></td></tr></table></figure><p>根据子查询返回的结果集的类型，子查询又被分为table subquery(返回的是table expression)、row subquery(返回的row expression)、column subquery(返回的是只有一列的row expression)、scalar subquery(返回值是一行一列，即一个标量)</p><h3 id="SELECT语句：FROM子句"><a href="#SELECT语句：FROM子句" class="headerlink" title="SELECT语句：FROM子句"></a>SELECT语句：FROM子句</h3><p>一个table expression通常是从FROM子句开始执行的。除非它没有FROM子句，例如：select 1+2。FROM子句的定义如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">from</span> clause<span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span><br>    <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span> reference<span class="hljs-operator">&gt;</span>[,<span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span> reference<span class="hljs-operator">&gt;</span>]...<br><br><span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span> reference<span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span><br>    <span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span> specification<span class="hljs-operator">&gt;</span>[[<span class="hljs-keyword">AS</span>] <span class="hljs-operator">&lt;</span>pseudonym<span class="hljs-operator">&gt;</span>]<br><span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span> specification<span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span>[<span class="hljs-operator">&lt;</span>database name<span class="hljs-operator">&gt;</span> . ]<span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span> name<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span>pseudonym<span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span><span class="hljs-operator">&lt;</span>alias name<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>定义看起来很复杂，用过MySQL的同学都知道这是很简单的。上面这段相当于：FROM 数据库名.表明 [AS] 别名。AS关键字可以省略。</p><p>上面这些规则同样适用于SELECT子句中的列。例如：SELECT 数据库名.表名.列名。需要注意的是，这些限定词都是可以使用别名替代的。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `testdb`.`stu`.`id` <span class="hljs-keyword">FROM</span> `testdb`.`stu` <span class="hljs-keyword">WHERE</span> `id`<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-keyword">SELECT</span> s.`id` <span class="hljs-keyword">FROM</span> `testdb`.`stu` <span class="hljs-string">&#x27;s&#x27;</span> <span class="hljs-keyword">WHERE</span> `id`<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-keyword">SELECT</span> s.`id` <span class="hljs-keyword">FROM</span> `testdb`.`stu` <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;s&#x27;</span> <span class="hljs-keyword">WHERE</span> `id`<span class="hljs-operator">=</span><span class="hljs-number">1</span><br>错误：<span class="hljs-keyword">SELECT</span> s.`id` <span class="hljs-string">&#x27;sid&#x27;</span> <span class="hljs-keyword">FROM</span> `testdb`.`stu` <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;s&#x27;</span> <span class="hljs-keyword">WHERE</span> sid<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>在同一个<span class="hljs-keyword">select</span> block head中列别名是不可用的<br></code></pre></td></tr></table></figure><p>最后，剩下FROM子句的一个难点，JOIN。具体看下图的分析，应该比较明了了。页面太长了 - -、，换下一章。<br><img src="/images/mysql_join.jpg" alt="join详解"></p>]]></content>
      
      
      <categories>
          
          <category> 博文 123</category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>个人简介</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>转眼到了2020年。</p><p>2017年是我职业生涯的一个转折，17年以前一直在做传统的PHP开发（Web + App），带着一个小规模的团队（3~5人）。埋头于功能的实现，少有性能的压力。</p><p>17年后，进入到区块链行业，熬了两个月，带着团队做出了第一款数字货币钱包。之后在币圈摸爬滚打，起起伏伏，无奈的是不到2年经历了3个东家。在这段时间，深入了Golang的开发，研究数字货币钱包。期间与众多大神共事，学习良多，感慨良多，加深了对基础的认知，算法、数据结构、数学知识、团队的协作、沟通的重要……</p><p>最后随着币圈沉寂，回到传统互联网圈子，目前在出行领域。</p><p>而此时，我已不再年轻。甚幸的是刚结完婚，新房也快装修结束。</p><p>稍感中年危机，技术上也到了瓶颈期。一直从事0-1的产品实现，欠缺高质量的锤炼。希望下次能找到一个稳定的平台，给我北漂的职业生涯画上一个完美的句号！</p><h1 style="text-align:center;">主子镇楼</h1><div>    <img src="/images/cat.jpg" alt="团团" style="display:block;width: 500px;margin:0 auto;" /></div><hr><hr><div>    <img src="/images/profile/1.jpg" alt="香山" style="display:block;width: 350px;margin:0 auto;" /></div>曹庭汉，男，87年生，身高165，体重110，未婚，籍贯湖北，现居北京朝阳。<p>此前在湖北武汉从事网络维护，工作无甚压力，颇感蹉跎青春，激情渐消。2011年开始接触web开发，兴趣浓厚，亦有志于此。遂来京于【LAMP兄弟连】培训约半年。</p><p>2012.8-2013.9 在新影数讯科技有限公司工作。期间，担任PHP研发工程师一职。主要工作：后台管理系统（CMS）的研发，部分社交媒体、影视站点数据采集、分析，微信公众平台以及少量新浪微博APP的开发。</p><p>一年后，逐渐产生触到天花板的感觉，大数据这个方向并不适合我这样一个初出茅庐的coder。决定转向web开发。</p><p>2013.10-2015.9 经朋友推荐，入职中儒泰纳传媒。从一个普通的phper逐渐成长为Tech Leader，向web方向的fullstack developer迈进一步。期间，负责整个项目的技术选型/架构、网络爬虫、前端js开发、网站后端（php）、移动端API（php&amp;Nodejs），以及服务器的整体运维。</p><p>一转眼2年过去，天花板渐现，对于一个非计算机专业的coder，我已然非常清晰的认识到自己缺少的部分。一番准备后，参加了成考，期望进入北邮弥补基础理论的缺失。同时，跟随我们Team的一位股东sonic以及另一位IOS工程师xx11Dragon，重新起航，创办了共同的信仰“人生菜单（北京）科技有限公司”。</p><p>2015.9 至今。创业是艰难的。在这段不长的时间里，开始向“T型”工程师转变，一（一横）是涉猎广泛：linux、C/C++、Java、Python、Android、R、Go、Erlang、Lua，虽是泛泛，收货匪浅，一（一竖）是深研本职技术：php、js、nodejs。</p><p>写了4年代码，激情越盛。唯尚有一憾：惯性单身。</p><h4 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h4><ul><li>熟练掌握Golang，Nodejs，PHP。</li><li>熟练掌握Gin(Golang后端Restfull框架)， express(NodeJs后端框架)，Laravel、Yii、ThinkPHP等PHP Web框架。</li><li>熟练掌握MySQL、MongoDB、Memcache、Ngnix、Redis、RabbitMQ。</li><li>熟练掌握MySQL事务、存储过程、索引优化、分区等相关技术。</li><li>熟练使用SVN、GIT版本控制器。</li><li>熟练掌握html、css、js(jQuery)以及ajax等前端技术。</li><li>熟练NodeJs后端技术栈， React-Native移动端技术栈。</li><li>熟悉Linux操作系统、bash脚本、lua脚本，能够在Linux环境下熟练开发。</li></ul><h4 id="联系方式："><a href="#联系方式：" class="headerlink" title="联系方式："></a>联系方式：</h4><ul>    Mail:jobhancao@gmail.com    <a href="https://github.com/straysh/straysh.info" target="_blank">Straysh的Github</a></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>books</title>
      <link href="/books/index.html"/>
      <url>/books/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>repository</title>
      <link href="/repository/index.html"/>
      <url>/repository/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
